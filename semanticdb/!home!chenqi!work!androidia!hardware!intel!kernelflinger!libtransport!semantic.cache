;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("lib.h" include (:system-flag t) nil [1470 1486])
            ("transport.h" include (:system-flag t) nil [1487 1509])
            ("transports" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("transport_t" type (:type "class") nil nil))
                nil [1511 1542])
            ("nb_transport" variable
               (:typemodifiers ("static")
                :type ("UINTN" type (:type "class") nil nil))
                nil [1543 1569])
            ("current" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("transport_t" type (:type "class") nil nil))
                nil [1570 1598])
            ("transport_register" function
               (:arguments 
                  ( ("trans" variable
                       (:pointer 1
                        :type ("transport_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [1630 1649])
                    ("nb" variable (:type ("UINTN" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1650 1659]))                  
                :type ("EFI_STATUS" type (:type "class") nil nil))
                nil [1600 1779])
            ("transport_unregister" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [1807 1812]))                  
                :type "void")
                nil [1781 1855])
            ("transport_start" function
               (:arguments 
                  ( ("start_cb" variable (:type ("start_callback_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1884 1910])
                    ("rx_cb" variable (:type ("data_callback_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1917 1939])
                    ("tx_cb" variable (:type ("data_callback_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1946 1968]))                  
                :type ("EFI_STATUS" type (:type "class") nil nil))
                nil [1857 2575])
            ("transport_stop" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2603 2608]))                  
                :type ("EFI_STATUS" type (:type "class") nil nil))
                nil [2577 2713])
            ("transport_run" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2740 2745]))                  
                :type ("EFI_STATUS" type (:type "class") nil nil))
                nil [2715 2801])
            ("transport_read" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [2829 2839])
                    ("size" variable (:type ("UINT32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2840 2852]))                  
                :type ("EFI_STATUS" type (:type "class") nil nil))
                nil [2803 2918])
            ("transport_write" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [2947 2957])
                    ("size" variable (:type ("UINT32" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2958 2970]))                  
                :type ("EFI_STATUS" type (:type "class") nil nil))
                nil [2920 3037]))          
      :file "transport.c"
      :pointmax 3038
      :fsize 3037
      :lastmodtime '(22781 19772 278156 351000)
      :unmatched-syntax nil))
  :file "!home!chenqi!work!androidia!hardware!intel!kernelflinger!libtransport!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
