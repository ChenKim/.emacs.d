;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("LOCAL_PATH" variable (:default-value ("$(BUILD_SYSTEM)")) nil [134 164])
            ("unique_product_copy_files_pairs" variable nil nil [1147 1182])
            ("unique_product_copy_files_destinations" variable nil nil [1342 1384])
            ("unique_product_copy_files_pairs" variable nil nil [2092 2127])
            ("unique_product_copy_files_destinations" variable nil nil [2127 2169])
            ("all_copied_headers" function (:arguments ("$(ALL_COPIED_HEADERS)")) nil [2806 2848])
            ("gen" variable (:default-value ("$(OUT_DOCS)/index.html")) nil [2964 2994])
            ("ALL_DOCS" variable (:default-value ("$(gen)")) nil [2994 3013])
            ("$(gen)" function (:arguments ("frameworks/base/docs/docs-redirect-index.html")) nil [3013 3102])
            ("property_overrides_split_enabled" variable nil nil [3212 3248])
            ("INSTALLED_DEFAULT_PROP_TARGET" variable (:default-value ("$(TARGET_ROOT_OUT)/default.prop")) nil [3436 3501])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(INSTALLED_DEFAULT_PROP_TARGET)")) nil [3501 3567])
            ("FINAL_DEFAULT_PROPERTIES" variable (:default-value ("$(call collapse-pairs, $(ADDITIONAL_DEFAULT_PROPERTIES))")) nil [3567 3658])
            ("FINAL_DEFAULT_PROPERTIES" variable (:default-value ("$(call uniq-pairs-by-first-component, \\
    $(FINAL_DEFAULT_PROPERTIES),=)")) nil [3804 3907])
            ("intermediate_system_build_prop" variable (:default-value ("$(call intermediates-dir-for,ETC,system_build_prop)/build.prop")) nil [3908 4005])
            ("$(INSTALLED_DEFAULT_PROP_TARGET)" function (:arguments ("$(intermediate_system_build_prop)")) nil [4006 4677])
            ("INSTALLED_VENDOR_DEFAULT_PROP_TARGET" variable nil nil [4768 4808])
            ("INSTALLED_VENDOR_DEFAULT_PROP_TARGET" variable (:default-value ("$(TARGET_OUT_VENDOR)/default.prop")) nil [4847 4921])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(INSTALLED_VENDOR_DEFAULT_PROP_TARGET)")) nil [4921 4994])
            ("FINAL_VENDOR_DEFAULT_PROPERTIES" variable (:default-value ("$(call collapse-pairs, $(PRODUCT_DEFAULT_PROPERTY_OVERRIDES))")) nil [4995 5098])
            ("FINAL_VENDOR_DEFAULT_PROPERTIES" variable (:default-value ("$(call uniq-pairs-by-first-component, \\
    $(FINAL_VENDOR_DEFAULT_PROPERTIES),=)")) nil [5098 5215])
            ("$(INSTALLED_VENDOR_DEFAULT_PROP_TARGET)" function (:arguments ("$(INSTALLED_DEFAULT_PROP_TARGET)")) nil [5216 5587])
            ("INSTALLED_BUILD_PROP_TARGET" variable (:default-value ("$(TARGET_OUT)/build.prop")) nil [5712 5768])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(INSTALLED_BUILD_PROP_TARGET)")) nil [5768 5832])
            ("FINAL_BUILD_PROPERTIES" variable (:default-value ("$(call collapse-pairs, $(ADDITIONAL_BUILD_PROPERTIES))")) nil [5832 5919])
            ("FINAL_BUILD_PROPERTIES" variable (:default-value ("$(call uniq-pairs-by-first-component, \\
    $(FINAL_BUILD_PROPERTIES),=)")) nil [5919 6018])
            ("BUILD_VERSION_TAGS" variable (:default-value ("$(BUILD_VERSION_TAGS)")) nil [6112 6156])
            ("BUILD_KEYS" variable (:default-value ("test-keys")) nil [6639 6663])
            ("BUILD_KEYS" variable (:default-value ("dev-keys")) nil [6668 6691])
            ("BUILD_VERSION_TAGS" variable (:default-value ("$(BUILD_KEYS)")) nil [6697 6733])
            ("BUILD_VERSION_TAGS" variable (:default-value ("$(subst $(space),$(comma),$(sort $(BUILD_VERSION_TAGS)))")) nil [6733 6812])
            ("build_desc" variable (:default-value ("$(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT)" "$(PLATFORM_VERSION)" "$(BUILD_ID)" "$(BUILD_NUMBER_FROM_FILE)" "$(BUILD_VERSION_TAGS)")) nil [6875 7011])
            ("$(intermediate_system_build_prop)" function (:arguments ("PRIVATE_BUILD_DESC" ":=" "$(build_desc)")) nil [7011 7082])
            ("BUILD_FINGERPRINT_FROM_FILE" variable (:default-value ("$$(cat $(PRODUCT_OUT)/build_fingerprint.txt)")) nil [7945 8021])
            ("KNOWN_OEM_THUMBPRINT_PROPERTIES" variable (:default-value ("ro.product.brand" "ro.product.name" "ro.product.device")) nil [8442 8546])
            ("OEM_THUMBPRINT_PROPERTIES" variable (:default-value ("$(filter $(KNOWN_OEM_THUMBPRINT_PROPERTIES),\\
    $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_OEM_PROPERTIES))")) nil [8546 8681])
            ("BUILDINFO_SH" variable (:default-value ("build/tools/buildinfo.sh")) nil [9517 9558])
            ("VENDOR_BUILDINFO_SH" variable (:default-value ("build/tools/vendor_buildinfo.sh")) nil [9558 9613])
            ("TARGET_BUILD_FLAVOR" variable (:default-value ("$(TARGET_PRODUCT)-$(TARGET_BUILD_VARIANT)")) nil [9713 9778])
            ("TARGET_BUILD_FLAVOR" variable (:default-value ("$(TARGET_BUILD_FLAVOR)_asan")) nil [9800 9851])
            ("system_prop_file" variable (:default-value ("$(TARGET_SYSTEM_PROP)")) nil [9883 9925])
            ("system_prop_file" variable (:default-value ("$(wildcard $(TARGET_DEVICE_DIR)/system.prop)")) nil [9930 9995])
            ("$(intermediate_system_build_prop)" function (:arguments ("$(VENDOR_BUILDINFO_SH)" "$(BUILDINFO_SH)" "$(INTERNAL_BUILD_ID_MAKEFILE)" "$(BUILD_SYSTEM)/version_defaults.mk" "$(system_prop_file)" "$(INSTALLED_ANDROID_INFO_TXT_TARGET)")) nil [10001 10266])
            ("build_desc" variable nil nil [13218 13232])
            ("INSTALLED_RECOVERYIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/recovery.img")) nil [13299 13361])
            ("INSTALLED_RECOVERYIMAGE_TARGET" variable nil nil [13366 13400])
            ("$(INSTALLED_BUILD_PROP_TARGET)" function (:arguments ("$(intermediate_system_build_prop)" "$(INSTALLED_RECOVERYIMAGE_TARGET)")) nil [13407 13590])
            ("INSTALLED_VENDOR_BUILD_PROP_TARGET" variable (:default-value ("$(TARGET_OUT_VENDOR)/build.prop")) nil [13899 13969])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(INSTALLED_VENDOR_BUILD_PROP_TARGET)")) nil [13969 14040])
            ("FINAL_VENDOR_BUILD_PROPERTIES" variable (:default-value ("$(call collapse-pairs, $(PRODUCT_PROPERTY_OVERRIDES))")) nil [14080 14173])
            ("FINAL_VENDOR_BUILD_PROPERTIES" variable (:default-value ("$(call uniq-pairs-by-first-component, \\
    $(FINAL_VENDOR_BUILD_PROPERTIES),=)")) nil [14173 14286])
            ("$(INSTALLED_VENDOR_BUILD_PROP_TARGET)" function (:arguments ("$(VENDOR_BUILDINFO_SH)")) nil [14329 14671])
            ("sdk_build_prop_remove" variable (:default-value ("ro.build.user=" "ro.build.host=" "ro.product.brand=" "ro.product.manufacturer=" "ro.product.device=")) nil [15571 15703])
            ("sdk_build_prop_remove" variable (:default-value ("ro.build.product=")) nil [15752 15795])
            ("INSTALLED_SDK_BUILD_PROP_TARGET" variable (:default-value ("$(PRODUCT_OUT)/sdk/sdk-build.prop")) nil [15795 15864])
            ("$(INSTALLED_SDK_BUILD_PROP_TARGET)" function (:arguments ("$(INSTALLED_BUILD_PROP_TARGET)")) nil [15864 16178])
            ("PACKAGE_STATS_FILE" variable (:default-value ("$(PRODUCT_OUT)/package-stats.txt")) nil [16263 16318])
            ("PACKAGES_TO_STAT" variable (:default-value ("$(sort $(filter $(TARGET_OUT)/% $(TARGET_OUT_DATA)/%, \\
	$(filter %.jar %.apk, $(ALL_DEFAULT_INSTALLED_MODULES))))")) nil [16318 16459])
            ("$(PACKAGE_STATS_FILE)" function (:arguments ("$(PACKAGES_TO_STAT)")) nil [16459 16566])
            (".PHONY" function (:arguments ("package-stats")) nil [16744 16766])
            ("package-stats" function (:arguments ("$(PACKAGE_STATS_FILE)")) nil [16766 16803])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [17049 17075])
            ("name" variable (:default-value ("$(name)-apkcerts-$(FILE_NAME_TAG)")) nil [17139 17181])
            ("intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,apkcerts)")) nil [17181 17250])
            ("APKCERTS_FILE" variable (:default-value ("$(intermediates)/$(name).txt")) nil [17250 17296])
            ("$(APKCERTS_FILE)" function nil nil [17403 17897])
            (".PHONY" function (:arguments ("apkcerts-list")) nil [17898 17920])
            ("apkcerts-list" function (:arguments ("$(APKCERTS_FILE)")) nil [17920 17952])
            ("BUILD_SYSTEM_STATS" variable (:default-value ("$(PRODUCT_OUT)/build_system_stats.txt")) nil [18146 18206])
            ("$(BUILD_SYSTEM_STATS)" function nil nil [18206 18458])
            ("SOONG_CONV" variable (:default-value ("$(sort $(SOONG_CONV))")) nil [18670 18706])
            ("SOONG_CONV_DATA" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,soong_conversion)/soong_conv_data")) nil [18706 18798])
            ("$(SOONG_CONV_DATA)" function nil nil [18798 18980])
            ("SOONG_TO_CONVERT_SCRIPT" variable (:default-value ("build/tools/soong_to_convert.py")) nil [18981 19040])
            ("SOONG_TO_CONVERT" variable (:default-value ("$(PRODUCT_OUT)/soong_to_convert.txt")) nil [19040 19096])
            ("$(SOONG_TO_CONVERT)" function (:arguments ("$(SOONG_CONV_DATA)" "$(SOONG_TO_CONVERT_SCRIPT)")) nil [19096 19217])
            ("DEFAULT_KEY_CERT_PAIR" variable (:default-value ("$(DEFAULT_SYSTEM_DEV_CERTIFICATE)")) nil [19591 19650])
            (".PHONY" function (:arguments ("systemimage")) nil [19739 19759])
            ("systemimage" function nil nil [19759 19772])
            (".PHONY" function (:arguments ("event-log-tags")) nil [19842 19865])
            ("all_event_log_tags_file" variable (:default-value ("$(TARGET_OUT_COMMON_INTERMEDIATES)/all-event-log-tags.txt")) nil [20044 20129])
            ("event_log_tags_file" variable (:default-value ("$(TARGET_OUT)/etc/event-log-tags")) nil [20130 20186])
            ("all_event_log_tags_src" variable (:default-value ("$(sort $(foreach m, $(ALL_MODULES), $(ALL_MODULES.$(m).EVENT_LOG_TAGS)))")) nil [20239 20344])
            ("pdk_fusion_log_tags_file" variable (:default-value ("$(patsubst $(PRODUCT_OUT)/%,$(_pdk_fusion_intermediates)/%,$(filter $(event_log_tags_file),$(ALL_PDK_FUSION_FILES)))")) nil [20452 20597])
            ("$(all_event_log_tags_file)" function (:arguments ("PRIVATE_SRC_FILES" ":=" "$(all_event_log_tags_src)" "$(pdk_fusion_log_tags_file)")) nil [20598 20701])
            ("$(all_event_log_tags_file)" function (:arguments ("$(all_event_log_tags_src)" "$(pdk_fusion_log_tags_file)" "$(MERGETAGS)" "build/tools/event_log_tags.py")) nil [20701 20903])
            ("event_log_tags_src" variable (:default-value ("$(sort $(foreach m,\\
      $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_PACKAGES) \\
      $(call module-names-for-tag-list,user), \\
      $(ALL_MODULES.$(m).EVENT_LOG_TAGS)) \\
      $(filter-out vendor/% device/% out/%,$(all_event_log_tags_src)))")) nil [21054 21323])
            ("$(event_log_tags_file)" function (:arguments ("PRIVATE_SRC_FILES" ":=" "$(event_log_tags_src)" "$(pdk_fusion_log_tags_file)")) nil [21324 21419])
            ("$(event_log_tags_file)" function (:arguments ("PRIVATE_MERGED_FILE" ":=" "$(all_event_log_tags_file)")) nil [21419 21493])
            ("$(event_log_tags_file)" function (:arguments ("$(event_log_tags_src)" "$(all_event_log_tags_file)" "$(pdk_fusion_log_tags_file)" "$(MERGETAGS)" "build/tools/event_log_tags.py")) nil [21493 21740])
            ("event-log-tags" function (:arguments ("$(event_log_tags_file)")) nil [21741 21780])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(event_log_tags_file)")) nil [21781 21837])
            ("INTERNAL_RAMDISK_FILES" variable (:default-value ("$(filter $(TARGET_ROOT_OUT)/%, \\
	$(ALL_GENERATED_SOURCES) \\
	$(ALL_DEFAULT_INSTALLED_MODULES))")) nil [22599 22721])
            ("BUILT_RAMDISK_TARGET" variable (:default-value ("$(PRODUCT_OUT)/ramdisk.img")) nil [22722 22773])
            ("INSTALLED_RAMDISK_TARGET" variable (:default-value ("$(BUILT_RAMDISK_TARGET)")) nil [22829 22881])
            ("$(INSTALLED_RAMDISK_TARGET)" function (:arguments ("$(MKBOOTFS)" "$(INTERNAL_RAMDISK_FILES)" "|" "$(MINIGZIP)")) nil [22881 23076])
            (".PHONY" function (:arguments ("ramdisk-nodeps")) nil [23077 23100])
            ("ramdisk-nodeps" function (:arguments ("$(MKBOOTFS)" "|" "$(MINIGZIP)")) nil [23100 23283])
            ("INTERNAL_BOOTIMAGE_ARGS" variable (:default-value ("$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET))" "--kernel" "$(INSTALLED_KERNEL_TARGET)")) nil [23452 23578])
            ("INTERNAL_BOOTIMAGE_ARGS" variable (:default-value ("--ramdisk" "$(INSTALLED_RAMDISK_TARGET)")) nil [23625 23690])
            ("INTERNAL_BOOTIMAGE_FILES" variable (:default-value ("$(filter-out --%,$(INTERNAL_BOOTIMAGE_ARGS))")) nil [23697 23770])
            ("VERITY_KEYID" variable (:default-value ("veritykeyid=id:`openssl x509 -in $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem -text \\
                | grep keyid | sed 's/://g' | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]' | sed 's/keyid//g'`")) nil [24072 24310])
            ("INTERNAL_KERNEL_CMDLINE" variable (:default-value ("$(strip $(BOARD_KERNEL_CMDLINE) buildvariant=$(TARGET_BUILD_VARIANT) $(VERITY_KEYID))")) nil [24323 24436])
            ("INTERNAL_BOOTIMAGE_ARGS" variable (:default-value ("--cmdline" "\"$(INTERNAL_KERNEL_CMDLINE)\"")) nil [24466 24532])
            ("INTERNAL_MKBOOTIMG_VERSION_ARGS" variable (:default-value ("--os_version" "$(PLATFORM_VERSION)" "--os_patch_level" "$(PLATFORM_SECURITY_PATCH)")) nil [24539 24663])
            ("INSTALLED_BOOTIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/boot.img")) nil [24664 24718])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(MKBOOTIMG)" "$(AVBTOOL)" "$(INTERNAL_BOOTIMAGE_FILES)")) nil [25290 25817])
            (".PHONY" function (:arguments ("bootimage-nodeps")) nil [25818 25843])
            ("bootimage-nodeps" function (:arguments ("$(MKBOOTIMG)" "$(AVBTOOL)")) nil [25843 26383])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(MKBOOTIMG)" "$(INTERNAL_BOOTIMAGE_FILES)" "$(BOOT_SIGNER)")) nil [26490 26972])
            (".PHONY" function (:arguments ("bootimage-nodeps")) nil [26973 26998])
            ("bootimage-nodeps" function (:arguments ("$(MKBOOTIMG)" "$(BOOT_SIGNER)")) nil [26998 27547])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(MKBOOTIMG)" "$(INTERNAL_BOOTIMAGE_FILES)" "$(VBOOT_SIGNER)" "$(FUTILITY)")) nil [27660 28261])
            (".PHONY" function (:arguments ("bootimage-nodeps")) nil [28262 28287])
            ("bootimage-nodeps" function (:arguments ("$(MKBOOTIMG)" "$(VBOOT_SIGNER)" "$(FUTILITY)")) nil [28287 28982])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(MKBOOTIMG)" "$(INTERNAL_BOOTIMAGE_FILES)")) nil [29022 29330])
            (".PHONY" function (:arguments ("bootimage-nodeps")) nil [29331 29356])
            ("bootimage-nodeps" function (:arguments ("$(MKBOOTIMG)")) nil [29356 29677])
            ("INTERNAL_KERNEL_CMDLINE" variable (:default-value ("$(strip $(BOARD_KERNEL_CMDLINE))")) nil [29773 29833])
            ("INSTALLED_BOOTIMAGE_TARGET" variable (:default-value ("$(INSTALLED_RAMDISK_TARGET)")) nil [30136 30194])
            (".PHONY" function (:arguments ("notice_files")) nil [30693 30714])
            ("$(3)" function (:arguments ("PRIVATE_MESSAGE" ":=" "$(4)")) nil [31644 31679])
            ("$(2)" function (:arguments ("PRIVATE_MESSAGE" ":=" "$(4)")) nil [31644 31679])
            ("$(3)" function (:arguments ("PRIVATE_DIR" ":=" "$(5)")) nil [31679 31710])
            ("$(2)" function (:arguments ("PRIVATE_DIR" ":=" "$(5)")) nil [31679 31710])
            ("$(2)" function (:arguments ("$(3)")) nil [31710 31722])
            ("$(3)" function (:arguments ("$(6)" "$(BUILD_SYSTEM)/Makefile" "build/tools/generate-notice-files.py")) nil [31722 32061])
            ("notice_files" function (:arguments ("$(2)" "$(3)")) nil [32061 32085])
            ("target_notice_file_txt" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE.txt")) nil [32257 32322])
            ("target_notice_file_html_or_xml" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE.html")) nil [32322 32396])
            ("target_notice_file_html_or_xml_gz" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE.html.gz")) nil [32396 32476])
            ("installed_notice_html_or_xml_gz" variable (:default-value ("$(TARGET_OUT)/etc/NOTICE.html.gz")) nil [32476 32544])
            ("tools_notice_file_txt" variable (:default-value ("$(HOST_OUT_INTERMEDIATES)/NOTICE.txt")) nil [32544 32606])
            ("tools_notice_file_html" variable (:default-value ("$(HOST_OUT_INTERMEDIATES)/NOTICE.html")) nil [32606 32670])
            ("target_notice_file_html_or_xml" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE.xml")) nil [32706 32779])
            ("target_notice_file_html_or_xml_gz" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE.xml.gz")) nil [32779 32858])
            ("installed_notice_html_or_xml_gz" variable (:default-value ("$(TARGET_OUT)/etc/NOTICE.xml.gz")) nil [32858 32925])
            ("target_vendor_notice_file_txt" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE_VENDOR.txt")) nil [32926 33005])
            ("target_vendor_notice_file_xml" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE_VENDOR.xml")) nil [33005 33084])
            ("target_vendor_notice_file_xml_gz" variable (:default-value ("$(TARGET_OUT_INTERMEDIATES)/NOTICE_VENDOR.xml.gz")) nil [33084 33169])
            ("installed_vendor_notice_xml_gz" variable (:default-value ("$(TARGET_OUT_VENDOR)/etc/NOTICE.xml.gz")) nil [33169 33242])
            ("kernel_notice_file" variable (:default-value ("$(TARGET_OUT_NOTICE_FILES)/src/kernel.txt")) nil [33274 33338])
            ("winpthreads_notice_file" variable (:default-value ("$(TARGET_OUT_NOTICE_FILES)/src/winpthreads.txt")) nil [33338 33412])
            ("pdk_fusion_notice_files" variable (:default-value ("$(filter $(TARGET_OUT_NOTICE_FILES)/%, $(ALL_PDK_FUSION_FILES))")) nil [33412 33503])
            ("$(target_notice_file_html_or_xml_gz)" function (:arguments ("$(target_notice_file_html_or_xml)" "|" "$(MINIGZIP)")) nil [35048 35168])
            ("$(installed_notice_html_or_xml_gz)" function (:arguments ("$(target_notice_file_html_or_xml_gz)")) nil [35168 35265])
            ("$(target_vendor_notice_file_xml_gz)" function (:arguments ("$(target_vendor_notice_file_xml)" "|" "$(MINIGZIP)")) nil [35366 35484])
            ("$(installed_vendor_notice_xml_gz)" function (:arguments ("$(target_vendor_notice_file_xml_gz)")) nil [35484 35579])
            ("$(kernel_notice_file)" function (:arguments ("$(BUILD_SYSTEM)/LINUX_KERNEL_COPYING" "|" "$(ACP)")) nil [36140 36292])
            ("$(winpthreads_notice_file)" function (:arguments ("$(BUILD_SYSTEM)/WINPTHREADS_COPYING" "|" "$(ACP)")) nil [36293 36449])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(TARGET_OUT_ETC)/security/otacerts.zip")) nil [36766 36839])
            ("$(TARGET_OUT_ETC)" function (:arguments ("KEY_CERT_PAIR" ":=" "$(DEFAULT_KEY_CERT_PAIR)")) nil [36839 36922])
            ("$(TARGET_OUT_ETC)" function (:arguments ("$(addsuffix .x509.pem,$(DEFAULT_KEY_CERT_PAIR))" "|" "$(ZIPTIME)")) nil [36922 37129])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(TARGET_OUT_ETC)/update_engine/update-payload-key.pub.pem")) nil [37339 37431])
            ("$(TARGET_OUT_ETC)" function (:arguments ("$(addsuffix .x509.pem,$(DEFAULT_KEY_CERT_PAIR))")) nil [37431 37634])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(TARGET_RECOVERY_ROOT_OUT)/etc/update_engine/update-payload-key.pub.pem")) nil [37635 37741])
            ("$(TARGET_RECOVERY_ROOT_OUT)" function (:arguments ("$(TARGET_OUT_ETC)/update_engine/update-payload-key.pub.pem")) nil [37741 37895])
            (".PHONY" function (:arguments ("otacerts")) nil [37908 37925])
            ("otacerts" function (:arguments ("$(TARGET_OUT_ETC)/security/otacerts.zip")) nil [37925 37975])
            ("INTERNAL_USERIMAGES_EXT_VARIANT" variable nil nil [38140 38175])
            ("INTERNAL_USERIMAGES_USE_EXT" variable (:default-value ("true")) nil [38217 38253])
            ("INTERNAL_USERIMAGES_EXT_VARIANT" variable (:default-value ("ext2")) nil [38253 38293])
            ("INTERNAL_USERIMAGES_USE_EXT" variable (:default-value ("true")) nil [38340 38376])
            ("INTERNAL_USERIMAGES_EXT_VARIANT" variable (:default-value ("ext3")) nil [38376 38416])
            ("INTERNAL_USERIMAGES_USE_EXT" variable (:default-value ("true")) nil [38463 38499])
            ("INTERNAL_USERIMAGES_EXT_VARIANT" variable (:default-value ("ext4")) nil [38499 38539])
            ("DEFAULT_TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS" variable (:default-value ("ext4=max_batch_time=0,commit=1,data=ordered,barrier=1,errors=panic,nodelalloc")) nil [38828 38954])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(SIMG2IMG)")) nil [39103 39143])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(MKEXTUSERIMG)" "$(MAKE_EXT4FS)" "$(E2FSCK)")) nil [39143 39212])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(MKF2FSUSERIMG)" "$(MAKE_F2FS)")) nil [39254 39312])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(MAKE_SQUASHFS)" "$(MKSQUASHFSUSERIMG)" "$(IMG2SIMG)")) nil [39543 39621])
            ("INTERNAL_USERIMAGES_BINARY_PATHS" variable (:default-value ("$(sort $(dir $(INTERNAL_USERIMAGES_DEPS)))")) nil [39628 39707])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(BUILD_VERITY_TREE)" "$(APPEND2SIMG)" "$(VERITY_SIGNER)")) nil [39776 39857])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(FEC)")) nil [39929 39964])
            ("SELINUX_FC" variable (:default-value ("$(call intermediates-dir-for,ETC,file_contexts.bin)/file_contexts.bin")) nil [39977 40061])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(SELINUX_FC)")) nil [40061 40103])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(BLK_ALLOC_TO_BASE_FS)")) nil [40104 40156])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(ALL_MODULES.fs_config_dirs.INSTALLED)" "$(ALL_MODULES.fs_config_files.INSTALLED)")) nil [40157 40281])
            ("INTERNAL_USERIMAGES_DEPS" variable (:default-value ("$(MKE2FS_CONF)")) nil [40324 40367])
            ("INTERNAL_RECOVERYIMAGE_FILES" variable (:default-value ("$(filter $(TARGET_RECOVERY_OUT)/%, \\
    $(ALL_DEFAULT_INSTALLED_MODULES))")) nil [47648 47755])
            ("recovery_initrc" variable (:default-value ("$(call include-path-for, recovery)/etc/init.rc")) nil [47756 47822])
            ("recovery_sepolicy" variable (:default-value ("$(TARGET_RECOVERY_ROOT_OUT)/sepolicy" "$(TARGET_RECOVERY_ROOT_OUT)/file_contexts.bin" "$(TARGET_RECOVERY_ROOT_OUT)/plat_property_contexts" "$(TARGET_RECOVERY_ROOT_OUT)/nonplat_property_contexts")) nil [47822 48055])
            ("IGNORE_RECOVERY_SEPOLICY" variable (:default-value ("$(patsubst $(TARGET_RECOVERY_OUT)/%,--exclude=/%,$(recovery_sepolicy))")) nil [48171 48270])
            ("recovery_kernel" variable (:default-value ("$(INSTALLED_KERNEL_TARGET)")) nil [48271 48349])
            ("recovery_ramdisk" variable (:default-value ("$(PRODUCT_OUT)/ramdisk-recovery.img")) nil [48349 48405])
            ("recovery_build_props" variable (:default-value ("$(intermediate_system_build_prop)")) nil [48405 48463])
            ("recovery_build_props" variable (:default-value ("$(INSTALLED_VENDOR_BUILD_PROP_TARGET)")) nil [48502 48564])
            ("recovery_resources_common" variable (:default-value ("$(call include-path-for, recovery)/res")) nil [48570 48638])
            ("recovery_density" variable (:default-value ("unknown")) nil [48699 48727])
            ("recovery_density" variable (:default-value ("$(filter %dpi,$(PRODUCT_AAPT_PREF_CONFIG))")) nil [48838 48901])
            ("recovery_densities" variable (:default-value ("mdpi")) nil [48951 48978])
            ("recovery_resources_common" variable (:default-value ("$(recovery_resources_common)-$(recovery_density)")) nil [49055 49133])
            ("recovery_resources_common" variable (:default-value ("$(recovery_resources_common)-xhdpi")) nil [49138 49202])
            ("recovery_font" variable (:default-value ("$(call include-path-for, recovery)/fonts/18x32.png")) nil [49524 49592])
            ("recovery_font" variable (:default-value ("$(call include-path-for, recovery)/fonts/12x22.png")) nil [49597 49665])
            ("TARGET_PRIVATE_RES_DIRS" variable (:default-value ("$(wildcard $(TARGET_DEVICE_DIR)/recovery/res)")) nil [49703 49776])
            ("recovery_resource_deps" variable (:default-value ("$(shell find $(recovery_resources_common) \\
  $(TARGET_PRIVATE_RES_DIRS) -type f)")) nil [49782 49890])
            ("recovery_fstab" variable (:default-value ("$(TARGET_RECOVERY_FSTAB)")) nil [49918 49961])
            ("recovery_fstab" variable (:default-value ("$(strip $(wildcard $(TARGET_DEVICE_DIR)/recovery.fstab))")) nil [49966 50041])
            ("recovery_wipe" variable (:default-value ("$(TARGET_RECOVERY_WIPE)")) nil [50074 50115])
            ("recovery_wipe" variable nil nil [50120 50137])
            ("RECOVERY_RESOURCE_ZIP" variable (:default-value ("$(TARGET_OUT)/etc/recovery-resource.dat")) nil [50861 50926])
            ("RECOVERY_RESOURCE_ZIP" variable nil nil [50931 50956])
            ("INTERNAL_RECOVERYIMAGE_ARGS" variable (:default-value ("$(addprefix --second ,$(INSTALLED_2NDBOOTLOADER_TARGET))" "--kernel" "$(recovery_kernel)" "--ramdisk" "$(recovery_ramdisk)")) nil [51176 51331])
            ("OTA_PUBLIC_KEYS" variable (:default-value ("$(DEFAULT_SYSTEM_DEV_CERTIFICATE).x509.pem")) nil [51850 51912])
            ("RECOVERY_INSTALL_OTA_KEYS" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,ota_keys)/keys")) nil [51995 52081])
            ("DUMPKEY_JAR" variable (:default-value ("$(HOST_OUT_JAVA_LIBRARIES)/dumpkey.jar")) nil [52081 52135])
            ("$(RECOVERY_INSTALL_OTA_KEYS)" function (:arguments ("PRIVATE_OTA_PUBLIC_KEYS" ":=" "$(OTA_PUBLIC_KEYS)")) nil [52135 52211])
            ("$(RECOVERY_INSTALL_OTA_KEYS)" function (:arguments ("extra_keys" ":=" "$(patsubst %,%.x509.pem,$(PRODUCT_EXTRA_RECOVERY_KEYS))")) nil [52211 52311])
            ("$(RECOVERY_INSTALL_OTA_KEYS)" function (:arguments ("$(OTA_PUBLIC_KEYS)" "$(DUMPKEY_JAR)" "$(extra_keys)")) nil [52311 52565])
            ("RECOVERYIMAGE_ID_FILE" variable (:default-value ("$(PRODUCT_OUT)/recovery.id")) nil [52566 52618])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(BOOT_SIGNER)")) nil [57754 57801])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(VBOOT_SIGNER)")) nil [57874 57922])
            ("$(INSTALLED_BOOTIMAGE_TARGET)" function (:arguments ("$(MKBOOTFS)" "$(MKBOOTIMG)" "$(MINIGZIP)" "$(INSTALLED_RAMDISK_TARGET)" "$(INTERNAL_RECOVERYIMAGE_FILES)" "$(recovery_initrc)" "$(recovery_sepolicy)" "$(recovery_kernel)" "$(INSTALLED_2NDBOOTLOADER_TARGET)" "$(recovery_build_props)" "$(recovery_resource_deps)" "$(recovery_fstab)" "$(RECOVERY_INSTALL_OTA_KEYS)" "$(INSTALLED_VENDOR_DEFAULT_PROP_TARGET)" "$(BOARD_RECOVERY_KERNEL_MODULES)" "$(DEPMOD)")) nil [57928 58465])
            ("$(INSTALLED_RECOVERYIMAGE_TARGET)" function (:arguments ("$(MKBOOTFS)" "$(MKBOOTIMG)" "$(MINIGZIP)" "$(INSTALLED_RAMDISK_TARGET)" "$(INSTALLED_BOOTIMAGE_TARGET)" "$(INTERNAL_RECOVERYIMAGE_FILES)" "$(recovery_initrc)" "$(recovery_sepolicy)" "$(recovery_kernel)" "$(INSTALLED_2NDBOOTLOADER_TARGET)" "$(recovery_build_props)" "$(recovery_resource_deps)" "$(recovery_fstab)" "$(RECOVERY_INSTALL_OTA_KEYS)" "$(INSTALLED_VENDOR_DEFAULT_PROP_TARGET)" "$(BOARD_RECOVERY_KERNEL_MODULES)" "$(DEPMOD)")) nil [58472 58992])
            ("$(RECOVERY_RESOURCE_ZIP)" function (:arguments ("$(INSTALLED_RECOVERYIMAGE_TARGET)" "|" "$(ZIPTIME)")) nil [59021 59237])
            (".PHONY" function (:arguments ("recoveryimage-nodeps")) nil [59244 59273])
            ("recoveryimage-nodeps" function nil nil [59273 59406])
            ("RECOVERY_RESOURCE_ZIP" variable nil nil [59457 59482])
            (".PHONY" function (:arguments ("recoveryimage")) nil [59489 59511])
            ("recoveryimage" function (:arguments ("$(INSTALLED_RECOVERYIMAGE_TARGET)" "$(RECOVERY_RESOURCE_ZIP)")) nil [59511 59585])
            ("BOARD_NAND_PAGE_SIZE" variable (:default-value ("2048")) nil [59618 59647])
            ("BOARD_NAND_SPARE_SIZE" variable (:default-value ("64")) nil [59687 59715])
            ("PDK_FUSION_SYSIMG_FILES" variable (:default-value ("$(filter-out $(foreach p,$(overridden_packages),$(p) %/$(p).apk), \\
        $(ALL_PDK_FUSION_FILES))")) nil [59865 59999])
            ("INTERNAL_SYSTEMIMAGE_FILES" variable (:default-value ("$(filter $(TARGET_OUT)/%, \\
    $(ALL_GENERATED_SOURCES) \\
    $(ALL_DEFAULT_INSTALLED_MODULES) \\
    $(PDK_FUSION_SYSIMG_FILES) \\
    $(RECOVERY_RESOURCE_ZIP))")) nil [60000 60191])
            ("FULL_SYSTEMIMAGE_DEPS" variable (:default-value ("$(INTERNAL_SYSTEMIMAGE_FILES)" "$(INTERNAL_USERIMAGES_DEPS)")) nil [60193 60276])
            ("ASAN_IN_SYSTEM_INSTALLED" variable (:default-value ("$(TARGET_OUT)/asan.tar.bz2")) nil [60332 60387])
            ("INSTALLED_FILES_FILE" variable (:default-value ("$(PRODUCT_OUT)/installed-files.txt")) nil [60846 60905])
            ("$(INSTALLED_FILES_FILE)" function (:arguments ("$(FULL_SYSTEMIMAGE_DEPS)" "$(FILESLIST)")) nil [60905 61148])
            (".PHONY" function (:arguments ("installed-file-list")) nil [61149 61177])
            ("installed-file-list" function (:arguments ("$(INSTALLED_FILES_FILE)")) nil [61177 61222])
            ("systemimage_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,systemimage)")) nil [61295 61382])
            ("BUILT_SYSTEMIMAGE" variable (:default-value ("$(systemimage_intermediates)/system.img")) nil [61382 61443])
            ("$(BUILT_SYSTEMIMAGE)" function (:arguments ("$(FULL_SYSTEMIMAGE_DEPS)" "$(INSTALLED_FILES_FILE)" "$(BUILD_IMAGE_SRCS)")) nil [63259 63387])
            ("INSTALLED_SYSTEMIMAGE" variable (:default-value ("$(PRODUCT_OUT)/system.img")) nil [63388 63439])
            ("SYSTEMIMAGE_SOURCE_DIR" variable (:default-value ("$(TARGET_OUT)")) nil [63439 63479])
            ("intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,recovery_patch)")) nil [63882 63954])
            ("RECOVERY_FROM_BOOT_PATCH" variable (:default-value ("$(intermediates)/recovery_from_boot.p")) nil [63954 64020])
            ("$(RECOVERY_FROM_BOOT_PATCH)" function (:arguments ("$(INSTALLED_RECOVERYIMAGE_TARGET)" "$(INSTALLED_BOOTIMAGE_TARGET)" "$(HOST_OUT_EXECUTABLES)/imgdiff" "$(HOST_OUT_EXECUTABLES)/bsdiff")) nil [64020 64435])
            ("RECOVERY_FROM_BOOT_PATCH" variable (:default-value ("$(INSTALLED_RECOVERYIMAGE_TARGET)")) nil [64484 64546])
            ("$(INSTALLED_SYSTEMIMAGE)" function (:arguments ("$(BUILT_SYSTEMIMAGE)" "$(RECOVERY_FROM_BOOT_PATCH)")) nil [64560 64802])
            ("systemimage" function (:arguments ("$(INSTALLED_SYSTEMIMAGE)")) nil [64803 64841])
            (".PHONY" function (:arguments ("systemimage-nodeps" "snod")) nil [64842 64874])
            ("snod" function (:arguments ("$(filter-out systemimage-nodeps snod,$(MAKECMDGOALS))" "|" "$(INTERNAL_USERIMAGES_DEPS)")) nil [64874 65197])
            ("systemimage-nodeps" function (:arguments ("$(filter-out systemimage-nodeps snod,$(MAKECMDGOALS))" "|" "$(INTERNAL_USERIMAGES_DEPS)")) nil [64874 65197])
            ("system_tar" variable (:default-value ("$(PRODUCT_OUT)/system.tar")) nil [65763 65803])
            ("INSTALLED_SYSTEMTARBALL_TARGET" variable (:default-value ("$(system_tar).$(SYSTEM_TARBALL_FORMAT)")) nil [65803 65876])
            ("$(INSTALLED_SYSTEMTARBALL_TARGET)" function (:arguments ("PRIVATE_SYSTEM_TAR" ":=" "$(system_tar)")) nil [65876 65947])
            ("$(INSTALLED_SYSTEMTARBALL_TARGET)" function (:arguments ("$(FS_GET_STATS)" "$(INTERNAL_SYSTEMIMAGE_FILES)")) nil [65947 66059])
            (".PHONY" function (:arguments ("systemtarball-nodeps")) nil [66060 66089])
            ("systemtarball-nodeps" function (:arguments ("$(FS_GET_STATS)" "$(filter-out systemtarball-nodeps stnod,$(MAKECMDGOALS))")) nil [66089 66239])
            (".PHONY" function (:arguments ("stnod")) nil [66240 66254])
            ("stnod" function (:arguments ("systemtarball-nodeps")) nil [66254 66282])
            ("pdk_odex_javalibs" variable (:default-value ("$(strip $(foreach m,$(DEXPREOPT.MODULES.JAVA_LIBRARIES),\\
  $(if $(filter $(DEXPREOPT.$(m).INSTALLED),$(ALL_DEFAULT_INSTALLED_MODULES)),$(m))))")) nil [66679 66844])
            ("pdk_odex_apps" variable (:default-value ("$(strip $(foreach m,$(DEXPREOPT.MODULES.APPS),\\
  $(if $(filter $(DEXPREOPT.$(m).INSTALLED),$(ALL_DEFAULT_INSTALLED_MODULES)),$(m))))")) nil [66844 66995])
            ("pdk_classes_dex" variable (:default-value ("$(strip \\
  $(foreach m,$(pdk_odex_javalibs),$(call intermediates-dir-for,JAVA_LIBRARIES,$(m),,COMMON)/javalib.jar) \\
  $(foreach m,$(pdk_odex_apps),$(call intermediates-dir-for,APPS,$(m))/package.dex.apk))")) nil [66995 67221])
            ("pdk_odex_config_mk" variable (:default-value ("$(PRODUCT_OUT)/pdk_dexpreopt_config.mk")) nil [67222 67283])
            ("$(pdk_odex_config_mk)" function (:arguments ("PRIVATE_JAVA_LIBRARIES" ":=" "$(pdk_odex_javalibs)")) nil [67283 67353])
            ("$(pdk_odex_config_mk)" function (:arguments ("PRIVATE_APPS" ":=" "$(pdk_odex_apps)")) nil [67353 67409])
            ("$(pdk_odex_config_mk)" function nil nil [67409 69098])
            ("PDK_PLATFORM_ZIP_PRODUCT_BINARIES" variable (:default-value ("$(filter-out $(OUT_DIR)/%,$(PDK_PLATFORM_ZIP_PRODUCT_BINARIES))")) nil [69099 69200])
            ("INSTALLED_PLATFORM_ZIP" variable (:default-value ("$(PRODUCT_OUT)/platform.zip")) nil [69200 69254])
            ("$(INSTALLED_PLATFORM_ZIP)" function (:arguments ("PRIVATE_DEX_FILES" ":=" "$(pdk_classes_dex)")) nil [69255 69322])
            ("$(INSTALLED_PLATFORM_ZIP)" function (:arguments ("PRIVATE_ODEX_CONFIG" ":=" "$(pdk_odex_config_mk)")) nil [69322 69394])
            ("$(INSTALLED_PLATFORM_ZIP)" function (:arguments ("$(INTERNAL_SYSTEMIMAGE_FILES)" "$(pdk_odex_config_mk)")) nil [69394 69751])
            (".PHONY" function (:arguments ("platform")) nil [70334 70351])
            ("platform" function (:arguments ("$(INSTALLED_PLATFORM_ZIP)")) nil [70351 70387])
            (".PHONY" function (:arguments ("platform-java")) nil [70388 70410])
            ("platform-java" function (:arguments ("platform")) nil [70410 70434])
            ("boot_tar" variable (:default-value ("$(PRODUCT_OUT)/boot.tar")) nil [71210 71246])
            ("INSTALLED_BOOTTARBALL_TARGET" variable (:default-value ("$(boot_tar).$(BOOT_TARBALL_FORMAT)")) nil [71246 71313])
            ("$(INSTALLED_BOOTTARBALL_TARGET)" function (:arguments ("PRIVATE_BOOT_TAR" ":=" "$(boot_tar)")) nil [71313 71378])
            ("$(INSTALLED_BOOTTARBALL_TARGET)" function (:arguments ("$(FS_GET_STATS)" "$(INTERNAL_BOOTIMAGE_FILES)")) nil [71378 71484])
            (".PHONY" function (:arguments ("boottarball-nodeps" "btnod")) nil [71485 71518])
            ("btnod" function (:arguments ("$(FS_GET_STATS)" "$(filter-out boottarball-nodeps btnod,$(MAKECMDGOALS))")) nil [71518 71668])
            ("boottarball-nodeps" function (:arguments ("$(FS_GET_STATS)" "$(filter-out boottarball-nodeps btnod,$(MAKECMDGOALS))")) nil [71518 71668])
            ("INTERNAL_USERDATAIMAGE_FILES" variable (:default-value ("$(filter $(TARGET_OUT_DATA)/%,$(ALL_DEFAULT_INSTALLED_MODULES))")) nil [71761 71863])
            ("skip_userdata.img" variable nil nil [71927 71948])
            ("skip_userdata.img" variable (:default-value ("true")) nil [72028 72054])
            ("userdataimage_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,userdata)")) nil [72101 72187])
            ("BUILT_USERDATAIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/userdata.img")) nil [72187 72245])
            ("INSTALLED_USERDATAIMAGE_TARGET" variable (:default-value ("$(BUILT_USERDATAIMAGE_TARGET)")) nil [73045 73109])
            ("INSTALLED_USERDATAIMAGE_TARGET_DEPS" variable (:default-value ("$(INTERNAL_USERIMAGES_DEPS)" "$(INTERNAL_USERDATAIMAGE_FILES)" "$(BUILD_IMAGE_SRCS)")) nil [73109 73246])
            ("$(INSTALLED_USERDATAIMAGE_TARGET)" function (:arguments ("$(INSTALLED_USERDATAIMAGE_TARGET_DEPS)")) nil [73246 73351])
            (".PHONY" function (:arguments ("userdataimage-nodeps")) nil [73352 73381])
            ("userdataimage-nodeps" function (:arguments ("|" "$(INTERNAL_USERIMAGES_DEPS)")) nil [73381 73464])
            ("skip_userdata.img" variable nil nil [73495 73516])
            ("ASAN_OUT_DIRS_FOR_SYSTEM_INSTALL" variable (:default-value ("$(sort $(patsubst $(PRODUCT_OUT)/%,%,\\
  $(TARGET_OUT_SHARED_LIBRARIES) \\
  $(2ND_TARGET_OUT_SHARED_LIBRARIES) \\
  $(TARGET_OUT_VENDOR_SHARED_LIBRARIES) \\
  $(2ND_TARGET_OUT_VENDOR_SHARED_LIBRARIES)))")) nil [73568 73805])
            ("ASAN_SYSTEM_INSTALL_OPTIONS" variable (:default-value ("--owner=1000" "--group=1000")) nil [73897 73954])
            ("$(ASAN_IN_SYSTEM_INSTALLED)" function (:arguments ("$(INSTALLED_USERDATAIMAGE_TARGET_DEPS)")) nil [74070 74278])
            ("userdata_tar" variable (:default-value ("$(PRODUCT_OUT)/userdata.tar")) nil [74599 74643])
            ("INSTALLED_USERDATATARBALL_TARGET" variable (:default-value ("$(userdata_tar).bz2")) nil [74643 74699])
            ("$(INSTALLED_USERDATATARBALL_TARGET)" function (:arguments ("PRIVATE_USERDATA_TAR" ":=" "$(userdata_tar)")) nil [74699 74776])
            ("$(INSTALLED_USERDATATARBALL_TARGET)" function (:arguments ("$(FS_GET_STATS)" "$(INTERNAL_USERDATAIMAGE_FILES)")) nil [74776 74894])
            (".PHONY" function (:arguments ("userdatatarball-nodeps")) nil [74971 75002])
            ("userdatatarball-nodeps" function (:arguments ("$(FS_GET_STATS)")) nil [75002 75075])
            ("BUILT_BPTIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/partition-table.img")) nil [75198 75258])
            ("BUILT_BPTJSON_TARGET" variable (:default-value ("$(PRODUCT_OUT)/partition-table.bpt")) nil [75258 75317])
            ("INTERNAL_BVBTOOL_MAKE_TABLE_ARGS" variable (:default-value ("--output_gpt" "$(BUILT_BPTIMAGE_TARGET)" "--output_json" "$(BUILT_BPTJSON_TARGET)" "$(foreach file, $(BOARD_BPT_INPUT_FILES), --input $(file))")) nil [75318 75498])
            ("INTERNAL_BVBTOOL_MAKE_TABLE_ARGS" variable (:default-value ("--disk_size" "$(BOARD_BPT_DISK_SIZE)")) nil [75525 75596])
            ("INSTALLED_BPTIMAGE_TARGET" variable (:default-value ("$(BUILT_BPTIMAGE_TARGET)")) nil [75814 75868])
            ("$(BUILT_BPTJSON_TARGET)" function (:arguments ("$(INSTALLED_BPTIMAGE_TARGET)")) nil [75868 75964])
            ("$(INSTALLED_BPTIMAGE_TARGET)" function (:arguments ("$(BPTTOOL)" "$(BOARD_BPT_INPUT_FILES)")) nil [75965 76057])
            (".PHONY" function (:arguments ("bptimage-nodeps")) nil [76058 76082])
            ("bptimage-nodeps" function nil nil [76082 76125])
            ("INTERNAL_CACHEIMAGE_FILES" variable (:default-value ("$(filter $(TARGET_OUT_CACHE)/%,$(ALL_DEFAULT_INSTALLED_MODULES))")) nil [76289 76389])
            ("cacheimage_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,cache)")) nil [76390 76470])
            ("BUILT_CACHEIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/cache.img")) nil [76470 76522])
            ("INSTALLED_CACHEIMAGE_TARGET" variable (:default-value ("$(BUILT_CACHEIMAGE_TARGET)")) nil [77285 77343])
            ("$(INSTALLED_CACHEIMAGE_TARGET)" function (:arguments ("$(INTERNAL_USERIMAGES_DEPS)" "$(INTERNAL_CACHEIMAGE_FILES)" "$(BUILD_IMAGE_SRCS)")) nil [77343 77480])
            (".PHONY" function (:arguments ("cacheimage-nodeps")) nil [77481 77507])
            ("cacheimage-nodeps" function (:arguments ("|" "$(INTERNAL_USERIMAGES_DEPS)")) nil [77507 77584])
            ("IGNORE_CACHE_LINK" variable (:default-value ("--exclude=cache")) nil [77689 77726])
            ("BOARD_USES_SYSTEM_OTHER" variable (:default-value ("true")) nil [77912 77944])
            ("INSTALLED_SYSTEM_OTHER_ODEX_MARKER" variable (:default-value ("$(TARGET_OUT_SYSTEM_OTHER)/system-other-odex-marker")) nil [78001 78091])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(INSTALLED_SYSTEM_OTHER_ODEX_MARKER)")) nil [78091 78162])
            ("$(INSTALLED_SYSTEM_OTHER_ODEX_MARKER)" function nil nil [78162 78219])
            ("INTERNAL_SYSTEMOTHERIMAGE_FILES" variable (:default-value ("$(filter $(TARGET_OUT_SYSTEM_OTHER)/%,\\
      $(ALL_DEFAULT_INSTALLED_MODULES)\\
      $(ALL_PDK_FUSION_FILES))")) nil [78256 78408])
            ("INSTALLED_FILES_FILE_SYSTEMOTHER" variable (:default-value ("$(PRODUCT_OUT)/installed-files-system-other.txt")) nil [78409 78493])
            ("$(INSTALLED_FILES_FILE_SYSTEMOTHER)" function (:arguments ("$(INTERNAL_SYSTEMOTHERIMAGE_FILES)" "$(FILESLIST)")) nil [78493 78772])
            ("systemotherimage_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,system_other)")) nil [78773 78866])
            ("BUILT_SYSTEMOTHERIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/system_other.img")) nil [78866 78931])
            ("INSTALLED_SYSTEMOTHERIMAGE_TARGET" variable (:default-value ("$(BUILT_SYSTEMOTHERIMAGE_TARGET)")) nil [79882 79952])
            ("$(INSTALLED_SYSTEMOTHERIMAGE_TARGET)" function (:arguments ("$(INTERNAL_USERIMAGES_DEPS)" "$(INTERNAL_SYSTEMOTHERIMAGE_FILES)" "$(INSTALLED_FILES_FILE_SYSTEMOTHER)")) nil [79952 80123])
            (".PHONY" function (:arguments ("systemotherimage-nodeps")) nil [80124 80156])
            ("systemotherimage-nodeps" function (:arguments ("|" "$(INTERNAL_USERIMAGES_DEPS)")) nil [80156 80245])
            ("INTERNAL_VENDORIMAGE_FILES" variable (:default-value ("$(filter $(TARGET_OUT_VENDOR)/%,\\
      $(ALL_DEFAULT_INSTALLED_MODULES)\\
      $(ALL_PDK_FUSION_FILES))")) nil [80414 80555])
            ("$(INSTALLED_PLATFORM_ZIP)" function (:arguments ("$(INTERNAL_VENDORIMAGE_FILES)")) nil [80613 80671])
            ("INSTALLED_FILES_FILE_VENDOR" variable (:default-value ("$(PRODUCT_OUT)/installed-files-vendor.txt")) nil [80672 80745])
            ("$(INSTALLED_FILES_FILE_VENDOR)" function (:arguments ("$(INTERNAL_VENDORIMAGE_FILES)" "$(FILESLIST)")) nil [80745 81008])
            ("vendorimage_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,vendor)")) nil [81009 81091])
            ("BUILT_VENDORIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/vendor.img")) nil [81091 81145])
            ("INSTALLED_VENDORIMAGE_TARGET" variable (:default-value ("$(BUILT_VENDORIMAGE_TARGET)")) nil [82117 82177])
            ("$(INSTALLED_VENDORIMAGE_TARGET)" function (:arguments ("$(INTERNAL_USERIMAGES_DEPS)" "$(INTERNAL_VENDORIMAGE_FILES)" "$(INSTALLED_FILES_FILE_VENDOR)" "$(BUILD_IMAGE_SRCS)" "$(DEPMOD)" "$(BOARD_VENDOR_KERNEL_MODULES)")) nil [82177 82389])
            (".PHONY" function (:arguments ("vendorimage-nodeps" "vnod")) nil [82390 82422])
            ("vnod" function (:arguments ("|" "$(INTERNAL_USERIMAGES_DEPS)" "$(DEPMOD)")) nil [82422 82516])
            ("vendorimage-nodeps" function (:arguments ("|" "$(INTERNAL_USERIMAGES_DEPS)" "$(DEPMOD)")) nil [82422 82516])
            ("INSTALLED_VENDORIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/vendor.img")) nil [82555 82613])
            ("BUILT_VBMETAIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/vbmeta.img")) nil [82828 82882])
            ("INTERNAL_AVB_MAKE_VBMETA_IMAGE_ARGS" variable (:default-value ("--include_descriptors_from_image" "$(INSTALLED_BOOTIMAGE_TARGET)" "--include_descriptors_from_image" "$(INSTALLED_SYSTEMIMAGE)")) nil [82883 83058])
            ("INTERNAL_AVB_MAKE_VBMETA_IMAGE_ARGS" variable (:default-value ("--include_descriptors_from_image" "$(INSTALLED_VENDORIMAGE_TARGET)")) nil [83093 83203])
            ("INTERNAL_AVB_MAKE_VBMETA_IMAGE_ARGS" variable (:default-value ("--setup_rootfs_from_kernel" "$(BUILT_SYSTEMIMAGE)")) nil [83255 83342])
            ("INTERNAL_AVB_MAKE_VBMETA_IMAGE_ARGS" variable (:default-value ("--rollback_index" "$(BOARD_AVB_ROLLBACK_INDEX)")) nil [83380 83464])
            ("INTERNAL_AVB_SIGNING_ARGS" variable (:default-value ("--algorithm" "SHA256_RSA4096" "--key" "external/avb/test/data/testkey_rsa4096.pem")) nil [83555 83672])
            ("INTERNAL_AVB_SIGNING_ARGS" variable (:default-value ("--algorithm" "$(BOARD_AVB_ALGORITHM)" "--key" "$(BOARD_AVB_KEY_PATH)")) nil [83677 83775])
            ("INSTALLED_VBMETAIMAGE_TARGET" variable (:default-value ("$(BUILT_VBMETAIMAGE_TARGET)")) nil [84316 84376])
            ("$(INSTALLED_VBMETAIMAGE_TARGET)" function (:arguments ("$(AVBTOOL)" "$(INSTALLED_BOOTIMAGE_TARGET)" "$(INSTALLED_SYSTEMIMAGE)" "$(INSTALLED_VENDORIMAGE_TARGET)")) nil [84376 84536])
            (".PHONY" function (:arguments ("vbmetaimage-nodeps")) nil [84537 84564])
            ("vbmetaimage-nodeps" function nil nil [84564 84613])
            ("FULL_SYSTEMIMAGE_DEPS" variable (:default-value ("$(AVBTOOL)")) nil [84662 84698])
            ("bootable/diskinstaller/config.mk" include nil nil [84896 84937])
            ("build_ota_package" variable (:default-value ("true")) nil [85064 85090])
            ("build_ota_package" variable (:default-value ("false")) nil [85129 85156])
            ("build_ota_package" variable (:default-value ("false")) nil [85188 85215])
            ("build_ota_package" variable (:default-value ("false")) nil [85258 85285])
            ("build_ota_package" variable (:default-value ("false")) nil [85320 85347])
            ("build_ota_package" variable (:default-value ("false")) nil [85398 85425])
            ("build_ota_package" variable (:default-value ("false")) nil [85463 85490])
            ("build_ota_package" variable (:default-value ("false")) nil [85522 85549])
            ("build_ota_package" variable (:default-value ("false")) nil [85587 85614])
            ("OTATOOLS" variable (:default-value ("$(HOST_OUT_EXECUTABLES)/minigzip" "$(HOST_OUT_EXECUTABLES)/aapt" "$(HOST_OUT_EXECUTABLES)/mkbootfs" "$(HOST_OUT_EXECUTABLES)/mkbootimg" "$(HOST_OUT_EXECUTABLES)/fs_config" "$(HOST_OUT_EXECUTABLES)/zipalign" "$(HOST_OUT_EXECUTABLES)/bsdiff" "$(HOST_OUT_EXECUTABLES)/imgdiff" "$(HOST_OUT_JAVA_LIBRARIES)/dumpkey.jar" "$(HOST_OUT_JAVA_LIBRARIES)/signapk.jar" "$(HOST_OUT_JAVA_LIBRARIES)/BootSignature.jar" "$(HOST_OUT_EXECUTABLES)/make_ext4fs" "$(HOST_OUT_EXECUTABLES)/mkuserimg.sh" "$(HOST_OUT_EXECUTABLES)/mke2fs" "$(HOST_OUT_EXECUTABLES)/mkuserimg_mke2fs.sh" "$(HOST_OUT_EXECUTABLES)/e2fsdroid" "$(HOST_OUT_EXECUTABLES)/mksquashfsimage.sh" "$(HOST_OUT_EXECUTABLES)/mksquashfs" "$(HOST_OUT_EXECUTABLES)/mkf2fsuserimg.sh" "$(HOST_OUT_EXECUTABLES)/make_f2fs" "$(HOST_OUT_EXECUTABLES)/simg2img" "$(HOST_OUT_EXECUTABLES)/e2fsck" "$(HOST_OUT_EXECUTABLES)/build_verity_tree" "$(HOST_OUT_EXECUTABLES)/verity_signer" "$(HOST_OUT_EXECUTABLES)/verity_verifier" "$(HOST_OUT_EXECUTABLES)/append2simg" "$(HOST_OUT_EXECUTABLES)/img2simg" "$(HOST_OUT_EXECUTABLES)/boot_signer" "$(HOST_OUT_EXECUTABLES)/fec" "$(HOST_OUT_EXECUTABLES)/brillo_update_payload" "$(HOST_OUT_EXECUTABLES)/lib/shflags/shflags" "$(HOST_OUT_EXECUTABLES)/delta_generator" "$(BLK_ALLOC_TO_BASE_FS)")) nil [85654 86983])
            ("OTATOOLS" variable (:default-value ("$(FUTILITY)" "$(VBOOT_SIGNER)")) nil [87051 87099])
            ("OTATOOLS" variable (:default-value ("$(FUTILITY)" "$(VBOOT_SIGNER)")) nil [87173 87221])
            ("OTATOOLS" variable (:default-value ("$(HOST_LIBRARY_PATH)/libc++$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/liblog$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libcutils$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libselinux$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libcrypto-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2fs-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_blkid-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_com_err-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_e2p-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_misc$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_profile-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_quota-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libext2_uuid-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libconscrypt_openjdk_jni$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libbrillo$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libbrillo-stream$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libchrome$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libcurl-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libevent-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libprotobuf-cpp-lite$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libssl-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libz-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libsparse-host$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libbase$(HOST_SHLIB_SUFFIX)" "$(HOST_LIBRARY_PATH)/libpcre2$(HOST_SHLIB_SUFFIX)")) nil [87248 88742])
            (".PHONY" function (:arguments ("otatools")) nil [88743 88760])
            ("otatools" function (:arguments ("$(OTATOOLS)")) nil [88760 88782])
            ("BUILT_OTATOOLS_PACKAGE" variable (:default-value ("$(PRODUCT_OUT)/otatools.zip")) nil [88783 88837])
            ("$(BUILT_OTATOOLS_PACKAGE)" function (:arguments ("zip_root" ":=" "$(call intermediates-dir-for,PACKAGING,otatools)/otatools")) nil [88837 88934])
            ("$(BUILT_OTATOOLS_PACKAGE)" function (:arguments ("$(OTATOOLS)" "|" "$(ACP)")) nil [88935 89631])
            (".PHONY" function (:arguments ("otatools-package")) nil [90216 90241])
            ("otatools-package" function (:arguments ("$(BUILT_OTATOOLS_PACKAGE)")) nil [90241 90285])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [90537 90563])
            ("name" variable (:default-value ("$(name)-target_files-$(FILE_NAME_TAG)")) nil [90627 90673])
            ("intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,target_files)")) nil [90674 90744])
            ("BUILT_TARGET_FILES_PACKAGE" variable (:default-value ("$(intermediates)/$(name).zip")) nil [90744 90803])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("intermediates" ":=" "$(intermediates)")) nil [90803 90868])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("zip_root" ":=" "$(intermediates)/$(name)")) nil [90868 90940])
            ("built_ota_tools" variable nil nil [91227 91246])
            ("built_ota_tools" variable (:default-value ("$(call intermediates-dir-for,EXECUTABLES,updater,,,$(TARGET_PREFER_32_BIT))/updater")) nil [91348 91457])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_OTA_TOOLS" ":=" "$(built_ota_tools)")) nil [91464 91535])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_RECOVERY_API_VERSION" ":=" "$(RECOVERY_API_VERSION)")) nil [91536 91623])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_RECOVERY_FSTAB_VERSION" ":=" "$(RECOVERY_FSTAB_VERSION)")) nil [91623 91714])
            ("tool_extensions" variable (:default-value ("$(TARGET_DEVICE_DIR)/../common")) nil [91799 91849])
            ("tool_extensions" variable (:default-value ("$(TARGET_RELEASETOOLS_EXTENSIONS)")) nil [91854 91907])
            ("tool_extension" variable (:default-value ("$(wildcard $(tool_extensions)/releasetools.py)")) nil [91913 91978])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_TOOL_EXTENSIONS" ":=" "$(tool_extensions)")) nil [91978 92055])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_TOOL_EXTENSION" ":=" "$(tool_extension)")) nil [92055 92130])
            ("updater_dep" variable (:default-value ("$(TARGET_OUT_COMMON_GEN)/zlib_fingerprint")) nil [92211 92268])
            ("updater_dep" variable (:default-value ("system/update_engine/update_engine.conf")) nil [92268 92323])
            ("updater_dep" variable (:default-value ("$(built_ota_tools)")) nil [92375 92409])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("$(updater_dep)")) nil [92415 92461])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_RECOVERY_OUT" ":=" "BOOT")) nil [92573 92633])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("PRIVATE_RECOVERY_OUT" ":=" "RECOVERY")) nil [92638 92702])
            ("$(BUILT_TARGET_FILES_PACKAGE)" function (:arguments ("$(INSTALLED_BOOTIMAGE_TARGET)" "$(INSTALLED_RADIOIMAGE_TARGET)" "$(INSTALLED_RECOVERYIMAGE_TARGET)" "$(FULL_SYSTEMIMAGE_DEPS)" "$(INSTALLED_USERDATAIMAGE_TARGET)" "$(INSTALLED_CACHEIMAGE_TARGET)" "$(INSTALLED_VENDORIMAGE_TARGET)" "$(INTERNAL_SYSTEMOTHERIMAGE_FILES)" "$(INSTALLED_ANDROID_INFO_TXT_TARGET)" "$(INSTALLED_KERNEL_TARGET)" "$(INSTALLED_2NDBOOTLOADER_TARGET)" "$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH)" "$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH)" "$(SELINUX_FC)" "$(APKCERTS_FILE)" "$(SOONG_ZIP)" "$(HOST_OUT_EXECUTABLES)/fs_config" "$(HOST_OUT_EXECUTABLES)/imgdiff" "$(HOST_OUT_EXECUTABLES)/bsdiff" "$(BUILD_IMAGE_SRCS)" "$(INSTALLED_VENDOR_MANIFEST)" "$(INSTALLED_VENDOR_MATRIX)" "|" "$(ACP)")) nil [93648 94618])
            (".PHONY" function (:arguments ("target-files-package")) nil [106441 106470])
            ("target-files-package" function (:arguments ("$(BUILT_TARGET_FILES_PACKAGE)")) nil [106470 106522])
            ("NDK_SYSROOT_TARGET" variable (:default-value ("$(PRODUCT_OUT)/ndk_sysroot.tar.bz2")) nil [106752 106809])
            ("$(NDK_SYSROOT_TARGET)" function (:arguments ("ndk")) nil [106809 106910])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [107084 107110])
            ("name" variable (:default-value ("$(name)-ota-$(FILE_NAME_TAG)")) nil [107174 107211])
            ("INTERNAL_OTA_PACKAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/$(name).zip")) nil [107212 107270])
            ("$(INTERNAL_OTA_PACKAGE_TARGET)" function (:arguments ("KEY_CERT_PAIR" ":=" "$(DEFAULT_KEY_CERT_PAIR)")) nil [107271 107345])
            ("$(INTERNAL_OTA_PACKAGE_TARGET)" function (:arguments ("$(BUILT_TARGET_FILES_PACKAGE)" "build/tools/releasetools/ota_from_target_files")) nil [107346 107879])
            (".PHONY" function (:arguments ("otapackage")) nil [107880 107899])
            ("otapackage" function (:arguments ("$(INTERNAL_OTA_PACKAGE_TARGET)")) nil [107899 107942])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [108063 108089])
            ("name" variable (:default-value ("$(name)-img-$(FILE_NAME_TAG)")) nil [108153 108190])
            ("INTERNAL_UPDATE_PACKAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/$(name).zip")) nil [108191 108252])
            ("$(INTERNAL_UPDATE_PACKAGE_TARGET)" function (:arguments ("$(BUILT_TARGET_FILES_PACKAGE)" "$(ZIP2ZIP)")) nil [108253 108470])
            (".PHONY" function (:arguments ("updatepackage")) nil [108471 108493])
            ("updatepackage" function (:arguments ("$(INTERNAL_UPDATE_PACKAGE_TARGET)")) nil [108493 108542])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [108723 108749])
            ("name" variable (:default-value ("$(name)-symbols-$(FILE_NAME_TAG)")) nil [108813 108854])
            ("SYMBOLS_ZIP" variable (:default-value ("$(PRODUCT_OUT)/$(name).zip")) nil [108855 108897])
            ("$(SYMBOLS_ZIP)" function (:arguments ("$(INSTALLED_SYSTEMIMAGE)" "$(INSTALLED_BOOTIMAGE_TARGET)" "$(INSTALLED_USERDATAIMAGE_TARGET)" "$(INSTALLED_VENDORIMAGE_TARGET)" "$(updater_dep)")) nil [109004 109172])
            ("$(SYMBOLS_ZIP)" function (:arguments ("PRIVATE_LIST_FILE" ":=" "$(call intermediates-dir-for,PACKAGING,symbols)/filelist")) nil [109178 109272])
            ("$(SYMBOLS_ZIP)" function (:arguments ("$(SOONG_ZIP)")) nil [109272 109591])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [109696 109722])
            ("name" variable (:default-value ("$(name)_debug")) nil [109756 109778])
            ("name" variable (:default-value ("$(name)-coverage-$(FILE_NAME_TAG)")) nil [109784 109826])
            ("COVERAGE_ZIP" variable (:default-value ("$(PRODUCT_OUT)/$(name).zip")) nil [109826 109869])
            ("$(COVERAGE_ZIP)" function (:arguments ("$(INSTALLED_SYSTEMIMAGE)" "$(INSTALLED_BOOTIMAGE_TARGET)" "$(INSTALLED_USERDATAIMAGE_TARGET)" "$(INSTALLED_VENDORIMAGE_TARGET)")) nil [109894 110044])
            ("$(COVERAGE_ZIP)" function (:arguments ("PRIVATE_LIST_FILE" ":=" "$(call intermediates-dir-for,PACKAGING,coverage)/filelist")) nil [110050 110146])
            ("$(COVERAGE_ZIP)" function (:arguments ("$(SOONG_ZIP)")) nil [110146 110472])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)")) nil [110653 110679])
            ("name" variable (:default-value ("$(name)-apps-$(FILE_NAME_TAG)")) nil [110743 110781])
            ("APPS_ZIP" variable (:default-value ("$(PRODUCT_OUT)/$(name).zip")) nil [110782 110821])
            ("$(APPS_ZIP)" function (:arguments ("$(INSTALLED_SYSTEMIMAGE)")) nil [110821 111266])
            ("EMMA_META_ZIP" variable (:default-value ("$(PRODUCT_OUT)/emma_meta.zip")) nil [111457 111503])
            ("$(EMMA_META_ZIP)" function nil nil [111564 111733])
            ("PROGUARD_DICT_ZIP" variable (:default-value ("$(PRODUCT_OUT)/$(TARGET_PRODUCT)-proguard-dict-$(FILE_NAME_TAG).zip")) nil [111936 112025])
            ("$(PROGUARD_DICT_ZIP)" function nil nil [112086 112603])
            (".PHONY" function (:arguments ("dalvikfiles")) nil [112718 112738])
            ("dalvikfiles" function (:arguments ("$(INTERNAL_DALVIK_MODULES)")) nil [112738 112778])
            ("INTERNAL_EMULATOR_PACKAGE_FILES" variable (:default-value ("$(HOST_OUT_EXECUTABLES)/emulator$(HOST_EXECUTABLE_SUFFIX)" "prebuilts/qemu-kernel/$(TARGET_ARCH)/kernel-qemu" "$(INSTALLED_RAMDISK_TARGET)" "$(INSTALLED_SYSTEMIMAGE)" "$(INSTALLED_USERDATAIMAGE_TARGET)")) nil [112900 113167])
            ("name" variable (:default-value ("$(TARGET_PRODUCT)-emulator-$(FILE_NAME_TAG)")) nil [113168 113220])
            ("INTERNAL_EMULATOR_PACKAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/$(name).zip")) nil [113221 113284])
            ("$(INTERNAL_EMULATOR_PACKAGE_TARGET)" function (:arguments ("$(INTERNAL_EMULATOR_PACKAGE_FILES)")) nil [113285 113434])
            ("sdk_dir" variable (:default-value ("$(HOST_OUT)/sdk/$(TARGET_PRODUCT)")) nil [113818 113863])
            ("sdk_name" variable (:default-value ("android-sdk_$(FILE_NAME_TAG)")) nil [114046 114087])
            ("sdk_name" variable (:default-value ("$(sdk_name)_$(INTERNAL_SDK_HOST_OS_NAME)")) nil [114310 114363])
            ("sdk_dep_file" variable (:default-value ("$(sdk_dir)/sdk_deps.mk")) nil [114364 114403])
            ("ATREE_FILES" variable nil nil [114404 114419])
            ("ATREE_FILES" variable (:default-value ("$(ALL_DEFAULT_INSTALLED_MODULES)" "$(INSTALLED_RAMDISK_TARGET)" "$(ALL_DOCS)" "$(ALL_SDK_FILES)")) nil [114531 114648])
            ("atree_dir" variable (:default-value ("development/build")) nil [114655 114686])
            ("sdk_atree_files" variable (:default-value ("$(atree_dir)/sdk.exclude.atree" "$(atree_dir)/sdk-$(HOST_OS)-$(SDK_HOST_ARCH).atree")) nil [114688 114795])
            ("sdk_atree_files" variable (:default-value ("$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SDK_ATREE_FILES)")) nil [115282 115357])
            ("sdk_atree_files" variable (:default-value ("$(atree_dir)/sdk.atree")) nil [115362 115404])
            ("$(BUILD_SYSTEM)/sdk_font.mk" include nil nil [115411 115447])
            ("deps" variable (:default-value ("$(target_notice_file_txt)" "$(tools_notice_file_txt)" "$(OUT_DOCS)/offline-sdk-timestamp" "$(SYMBOLS_ZIP)" "$(COVERAGE_ZIP)" "$(INSTALLED_SYSTEMIMAGE)" "$(INSTALLED_USERDATAIMAGE_TARGET)" "$(INSTALLED_RAMDISK_TARGET)" "$(INSTALLED_SDK_BUILD_PROP_TARGET)" "$(INSTALLED_BUILD_PROP_TARGET)" "$(ATREE_FILES)" "$(sdk_atree_files)" "$(HOST_OUT_EXECUTABLES)/atree" "$(HOST_OUT_EXECUTABLES)/line_endings" "$(SDK_FONT_DEPS)")) nil [115448 115888])
            ("INTERNAL_SDK_TARGET" variable (:default-value ("$(sdk_dir)/$(sdk_name).zip")) nil [115889 115939])
            ("$(INTERNAL_SDK_TARGET)" function (:arguments ("PRIVATE_NAME" ":=" "$(sdk_name)")) nil [115939 115991])
            ("$(INTERNAL_SDK_TARGET)" function (:arguments ("PRIVATE_DIR" ":=" "$(sdk_dir)/$(sdk_name)")) nil [115991 116053])
            ("$(INTERNAL_SDK_TARGET)" function (:arguments ("PRIVATE_DEP_FILE" ":=" "$(sdk_dep_file)")) nil [116053 116113])
            ("$(INTERNAL_SDK_TARGET)" function (:arguments ("PRIVATE_INPUT_FILES" ":=" "$(sdk_atree_files)")) nil [116113 116179])
            ("$(INTERNAL_SDK_TARGET)" function (:arguments ("$(deps)")) nil [116275 117771])
            ("MAIN_SDK_NAME" variable (:default-value ("$(sdk_name)")) nil [117910 117939])
            ("MAIN_SDK_DIR" variable (:default-value ("$(sdk_dir)")) nil [117939 117967])
            ("MAIN_SDK_ZIP" variable (:default-value ("$(INTERNAL_SDK_TARGET)")) nil [117967 118007])
            ("$(TOPDIR)development/build/tools/windows_sdk.mk" include nil nil [118063 118119])
            ("INTERNAL_FINDBUGS_XML_TARGET" variable (:default-value ("$(PRODUCT_OUT)/findbugs.xml")) nil [118205 118265])
            ("INTERNAL_FINDBUGS_HTML_TARGET" variable (:default-value ("$(PRODUCT_OUT)/findbugs.html")) nil [118265 118327])
            ("$(INTERNAL_FINDBUGS_XML_TARGET)" function (:arguments ("$(ALL_FINDBUGS_FILES)")) nil [118327 118468])
            ("$(INTERNAL_FINDBUGS_HTML_TARGET)" function (:arguments ("$(INTERNAL_FINDBUGS_XML_TARGET)")) nil [118468 118660])
            ("$(sort $(wildcard $(BUILD_SYSTEM)/tasks/*.mk))" include nil nil [118898 118953])
            ("$(sort $(wildcard platform_testing/build/tasks/*.mk))" include nil nil [119355 119417])
            ("$(sort $(wildcard test/vts/tools/build/tasks/*.mk))" include nil nil [119417 119477])
            ("$(BUILD_SYSTEM)/product-graph.mk" include nil nil [119484 119525])
            ("$(TOPDIR)development/build/tools/sdk_repo.mk" include nil nil [119722 119775]))          
      :file "Makefile"
      :pointmax 119781
      :fsize 119780
      :lastmodtime '(22846 29530 29536 711000)
      :unmatched-syntax '((semantic-list 119277 . 119324) (punctuation 119276 . 119277) (symbol 119267 . 119275) (bol 119267 . 119267) (semantic-list 119220 . 119266) (punctuation 119219 . 119220) (symbol 119210 . 119218) (bol 119210 . 119210) (semantic-list 119163 . 119209) (punctuation 119162 . 119163) (symbol 119153 . 119161) (bol 119153 . 119153) (semantic-list 119073 . 119118) (punctuation 119072 . 119073) (symbol 119063 . 119071) (bol 119063 . 119063) (semantic-list 119018 . 119062) (punctuation 119017 . 119018) (symbol 119008 . 119016) (bol 119008 . 119008) (semantic-list 118963 . 119007) (punctuation 118962 . 118963) (symbol 118953 . 118961) (bol 118953 . 118953) (symbol 115203 . 115209) (semantic-list 115187 . 115203) (punctuation 115186 . 115187) (symbol 115173 . 115186) (semantic-list 115162 . 115173) (punctuation 115161 . 115162) (punctuation 115159 . 115160) (punctuation 115158 . 115159) (symbol 115142 . 115157) (bol 115140 . 115140) (semantic-list 114429 . 114443) (punctuation 114428 . 114429) (symbol 114419 . 114427) (bol 114419 . 114419) (semantic-list 114288 . 114303) (punctuation 114287 . 114288) (symbol 114286 . 114287) (semantic-list 114259 . 114286) (punctuation 114258 . 114259) (punctuation 114256 . 114257) (punctuation 114255 . 114256) (symbol 114229 . 114254) (bol 114227 . 114227) (semantic-list 114184 . 114193) (punctuation 114183 . 114184) (punctuation 114181 . 114182) (punctuation 114180 . 114181) (symbol 114154 . 114179) (bol 114152 . 114152) (symbol 114143 . 114146) (punctuation 114141 . 114142) (punctuation 114140 . 114141) (symbol 114114 . 114139) (bol 114112 . 114112) (ENDIF 112604 . 112609) (bol 112604 . 112604) (ENDIF 111734 . 111739) (bol 111734 . 111734) (symbol 110730 . 110736) (semantic-list 110724 . 110730) (punctuation 110723 . 110724) (punctuation 110721 . 110722) (punctuation 110720 . 110721) (symbol 110715 . 110719) (bol 110713 . 110713) (symbol 108800 . 108806) (semantic-list 108794 . 108800) (punctuation 108793 . 108794) (punctuation 108791 . 108792) (punctuation 108790 . 108791) (symbol 108785 . 108789) (bol 108783 . 108783) (symbol 108140 . 108146) (semantic-list 108134 . 108140) (punctuation 108133 . 108134) (punctuation 108131 . 108132) (punctuation 108130 . 108131) (symbol 108125 . 108129) (bol 108123 . 108123) (ENDIF 107943 . 107948) (bol 107943 . 107943) (symbol 107161 . 107167) (semantic-list 107155 . 107161) (punctuation 107154 . 107155) (punctuation 107152 . 107153) (punctuation 107151 . 107152) (symbol 107146 . 107150) (bol 107144 . 107144) (semantic-list 106912 . 106959) (punctuation 106911 . 106912) (bol 106911 . 106911) (semantic-list 106580 . 106654) (punctuation 106579 . 106580) (bol 106579 . 106579) (shell-command 106384 . 106439) (bol 106383 . 106383) (shell-command 106301 . 106382) (bol 106300 . 106300) (shell-command 106254 . 106299) (bol 106253 . 106253) (shell-command 106191 . 106252) (bol 106190 . 106190) (shell-command 106115 . 106189) (bol 106114 . 106114) (shell-command 105926 . 106113) (bol 105925 . 105925) (shell-command 105849 . 105917) (bol 105848 . 105848) (shell-command 105743 . 105815) (bol 105742 . 105742) (shell-command 105617 . 105713) (bol 105616 . 105616) (shell-command 105543 . 105615) (bol 105542 . 105542) (shell-command 105498 . 105541) (bol 105497 . 105497) (shell-command 105378 . 105490) (bol 105377 . 105377) (shell-command 105225 . 105330) (bol 105224 . 105224) (shell-command 105083 . 105180) (bol 105082 . 105082) (shell-command 104986 . 105075) (bol 104985 . 104985) (shell-command 104833 . 104933) (bol 104832 . 104832) (shell-command 104697 . 104790) (bol 104696 . 104696) (shell-command 104634 . 104695) (bol 104633 . 104633) (shell-command 104575 . 104632) (bol 104574 . 104574) (shell-command 104505 . 104567) (bol 104504 . 104504) (shell-command 104468 . 104503) (bol 104467 . 104467) (shell-command 104366 . 104427) (bol 104365 . 104365) (shell-command 104300 . 104364) (bol 104299 . 104299) (shell-command 104142 . 104245) (bol 104141 . 104141) (shell-command 104035 . 104140) (bol 104034 . 104034) (shell-command 103938 . 104033) (bol 103937 . 103937) (shell-command 103599 . 103903) (bol 103598 . 103598) (shell-command 103555 . 103597) (bol 103554 . 103554) (shell-command 103459 . 103522) (bol 103458 . 103458) (shell-command 103374 . 103457) (bol 103373 . 103373) (shell-command 103267 . 103372) (bol 103266 . 103266) (shell-command 103140 . 103265) (bol 103139 . 103139) (shell-command 103026 . 103138) (bol 103025 . 103025) (shell-command 102934 . 103024) (bol 102933 . 102933) (shell-command 102831 . 102932) (bol 102830 . 102830) (shell-command 102754 . 102829) (bol 102753 . 102753) (shell-command 102542 . 102716) (bol 102541 . 102541) (shell-command 102423 . 102497) (bol 102422 . 102422) (shell-command 102324 . 102415) (bol 102323 . 102323) (shell-command 102195 . 102290) (bol 102194 . 102194) (shell-command 102090 . 102193) (bol 102089 . 102089) (shell-command 102018 . 102088) (bol 102017 . 102017) (shell-command 101865 . 101982) (bol 101864 . 101864) (shell-command 101728 . 101863) (bol 101727 . 101727) (shell-command 101603 . 101726) (bol 101602 . 101602) (shell-command 101510 . 101601) (bol 101509 . 101509) (shell-command 101419 . 101508) (bol 101418 . 101418) (shell-command 101316 . 101417) (bol 101315 . 101315) (shell-command 101244 . 101314) (bol 101243 . 101243) (shell-command 101131 . 101204) (bol 101130 . 101130) (shell-command 101001 . 101077) (bol 101000 . 101000) (shell-command 100896 . 100999) (bol 100895 . 100895) (shell-command 100689 . 100851) (bol 100688 . 100688) (shell-command 100450 . 100612) (bol 100449 . 100449) (shell-command 100269 . 100373) (bol 100268 . 100268) (shell-command 100200 . 100267) (bol 100199 . 100199) (shell-command 100086 . 100160) (bol 100085 . 100085) (shell-command 100015 . 100084) (bol 100014 . 100014) (shell-command 99907 . 100013) (bol 99906 . 99906) (shell-command 99818 . 99905) (bol 99817 . 99817) (shell-command 99711 . 99810) (bol 99710 . 99710) (shell-command 99562 . 99675) (bol 99561 . 99561) (shell-command 99469 . 99560) (bol 99468 . 99468) (shell-command 99342 . 99461) (bol 99341 . 99341) (shell-command 99224 . 99335) (bol 99223 . 99223) (shell-command 99116 . 99222) (bol 99115 . 99115) (shell-command 98958 . 99065) (bol 98957 . 98957) (shell-command 98813 . 98913) (bol 98812 . 98812) (shell-command 98699 . 98764) (bol 98698 . 98698) (shell-command 98553 . 98649) (bol 98552 . 98552) (shell-command 98414 . 98506) (bol 98413 . 98413) (shell-command 98285 . 98369) (bol 98284 . 98284) (shell-command 98158 . 98254) (bol 98157 . 98157) (shell-command 98056 . 98156) (bol 98055 . 98055) (shell-command 97995 . 98054) (bol 97994 . 97994) (shell-command 97921 . 97993) (bol 97920 . 97920) (shell-command 97859 . 97913) (bol 97858 . 97858) (shell-command 97773 . 97830) (bol 97772 . 97772) (shell-command 97738 . 97771) (bol 97737 . 97737) (shell-command 97722 . 97736) (bol 97721 . 97721) (shell-command 97657 . 97720) (bol 97656 . 97656) (shell-command 97591 . 97643) (bol 97590 . 97590) (shell-command 97553 . 97589) (bol 97552 . 97552) (shell-command 97428 . 97492) (bol 97427 . 97427) (shell-command 97394 . 97426) (bol 97393 . 97393) (shell-command 97356 . 97392) (bol 97355 . 97355) (shell-command 97252 . 97348) (bol 97251 . 97251) (shell-command 97213 . 97250) (bol 97212 . 97212) (shell-command 97081 . 97165) (bol 97080 . 97080) (shell-command 97048 . 97079) (bol 97047 . 97047) (shell-command 96925 . 97005) (bol 96924 . 96924) (shell-command 96894 . 96923) (bol 96893 . 96893) (shell-command 96803 . 96892) (bol 96802 . 96802) (shell-command 96770 . 96801) (bol 96769 . 96769) (shell-command 96617 . 96768) (bol 96616 . 96616) (ENDIF 96580 . 96585) (bol 96580 . 96580) (shell-command 96506 . 96573) (bol 96505 . 96505) (shell-command 96411 . 96470) (bol 96410 . 96410) (shell-command 96311 . 96379) (bol 96310 . 96310) (shell-command 96205 . 96273) (bol 96204 . 96204) (shell-command 96099 . 96160) (bol 96098 . 96098) (shell-command 95940 . 96023) (bol 95939 . 95939) (shell-command 95844 . 95932) (bol 95843 . 95843) (shell-command 95757 . 95837) (bol 95756 . 95756) (shell-command 95722 . 95755) (bol 95721 . 95721) (shell-command 95642 . 95675) (bol 95641 . 95641) (shell-command 95609 . 95640) (bol 95608 . 95608) (ENDIF 95522 . 95527) (bol 95522 . 95522) (shell-command 95429 . 95515) (bol 95428 . 95428) (shell-command 95315 . 95393) (bol 95314 . 95314) (shell-command 95196 . 95283) (bol 95195 . 95195) (shell-command 95071 . 95158) (bol 95070 . 95070) (shell-command 94946 . 95026) (bol 94945 . 94945) (shell-command 94798 . 94914) (bol 94797 . 94797) (shell-command 94744 . 94796) (bol 94743 . 94743) (shell-command 94707 . 94742) (bol 94706 . 94706) (symbol 93546 . 93551) (bol 93546 . 93546) (semantic-list 93533 . 93545) (punctuation 93532 . 93533) (symbol 93529 . 93531) (semantic-list 93516 . 93528) (punctuation 93515 . 93516) (symbol 93512 . 93514) (symbol 93509 . 93511) (symbol 93498 . 93508) (semantic-list 93476 . 93498) (punctuation 93475 . 93476) (symbol 93473 . 93474) (string 93461 . 93472) (symbol 93457 . 93460) (symbol 93455 . 93456) (symbol 93450 . 93454) (symbol 93448 . 93449) (symbol 93445 . 93447) (symbol 93442 . 93444) (symbol 93438 . 93441) (symbol 93436 . 93437) (semantic-list 93375 . 93435) (bol 93375 . 93375) (symbol 93365 . 93374) (symbol 93358 . 93364) (bol 93358 . 93358) (ENDIF 93251 . 93256) (bol 93249 . 93249) (symbol 93233 . 93248) (semantic-list 93211 . 93233) (punctuation 93210 . 93211) (symbol 93209 . 93210) (semantic-list 93193 . 93209) (punctuation 93192 . 93193) (punctuation 93190 . 93191) (semantic-list 93162 . 93190) (punctuation 93161 . 93162) (bol 93157 . 93157) (symbol 93140 . 93156) (semantic-list 93118 . 93140) (punctuation 93117 . 93118) (symbol 93116 . 93117) (semantic-list 93100 . 93116) (punctuation 93099 . 93100) (punctuation 93097 . 93098) (semantic-list 93069 . 93097) (punctuation 93068 . 93069) (bol 93064 . 93064) (symbol 93052 . 93063) (semantic-list 93030 . 93052) (punctuation 93029 . 93030) (symbol 93028 . 93029) (semantic-list 93012 . 93028) (punctuation 93011 . 93012) (punctuation 93009 . 93010) (semantic-list 92981 . 93009) (punctuation 92980 . 92981) (bol 92976 . 92976) (symbol 92955 . 92975) (IFDEF 92949 . 92954) (bol 92947 . 92947) (ENDIF 92941 . 92946) (bol 92939 . 92939) (semantic-list 92808 . 92938) (punctuation 92807 . 92808) (punctuation 92805 . 92806) (semantic-list 92777 . 92805) (punctuation 92776 . 92777) (bol 92772 . 92772) (symbol 92747 . 92771) (IFDEF 92741 . 92746) (bol 92739 . 92739) (symbol 91220 . 91225) (bol 91220 . 91220) (symbol 91217 . 91219) (punctuation 91211 . 91212) (semantic-list 91208 . 91211) (punctuation 91207 . 91208) (symbol 91204 . 91206) (semantic-list 91192 . 91204) (punctuation 91191 . 91192) (symbol 91187 . 91190) (semantic-list 91181 . 91186) (punctuation 91180 . 91181) (symbol 91171 . 91173) (semantic-list 91167 . 91170) (punctuation 91166 . 91167) (symbol 91163 . 91165) (symbol 91157 . 91162) (symbol 91146 . 91150) (punctuation 91144 . 91145) (semantic-list 91102 . 91144) (IF 91099 . 91101) (bol 91097 . 91097) (symbol 91073 . 91096) (symbol 91066 . 91072) (bol 91066 . 91066) (symbol 90614 . 90620) (semantic-list 90608 . 90614) (punctuation 90607 . 90608) (punctuation 90605 . 90606) (punctuation 90604 . 90605) (symbol 90599 . 90603) (bol 90597 . 90597) (ENDIF 90286 . 90291) (bol 90286 . 90286) (shell-command 90060 . 90214) (bol 90059 . 90059) (shell-command 89996 . 90058) (bol 89995 . 89995) (shell-command 89941 . 89994) (bol 89940 . 89940) (shell-command 89891 . 89939) (bol 89890 . 89890) (shell-command 89768 . 89883) (bol 89767 . 89767) (shell-command 89699 . 89766) (bol 89698 . 89698) (ENDIF 84699 . 84704) (bol 84699 . 84699) (symbol 84309 . 84314) (bol 84309 . 84309) (punctuation 84307 . 84308) (punctuation 84306 . 84307) (symbol 84297 . 84305) (semantic-list 84256 . 84290) (punctuation 84255 . 84256) (semantic-list 84221 . 84248) (punctuation 84220 . 84221) (semantic-list 84176 . 84213) (punctuation 84175 . 84176) (symbol 84151 . 84168) (semantic-list 84141 . 84150) (punctuation 84140 . 84141) (semantic-list 84133 . 84139) (punctuation 84132 . 84133) (bol 84130 . 84130) (semantic-list 84061 . 84129) (punctuation 84060 . 84061) (bol 84058 . 84058) (symbol 84033 . 84057) (symbol 84026 . 84032) (bol 84026 . 84026) (semantic-list 83945 . 84018) (punctuation 83944 . 83945) (bol 83942 . 83942) (semantic-list 83823 . 83894) (punctuation 83822 . 83823) (bol 83820 . 83820) (semantic-list 82614 . 82704) (punctuation 82613 . 82614) (bol 82613 . 82613) (symbol 82528 . 82554) (IFDEF 82522 . 82527) (ELSE 82517 . 82521) (bol 82517 . 82517) (symbol 82055 . 82060) (bol 82055 . 82055) (semantic-list 81958 . 82054) (punctuation 81957 . 81958) (semantic-list 81950 . 81956) (punctuation 81949 . 81950) (bol 81947 . 81947) (semantic-list 81934 . 81946) (punctuation 81933 . 81934) (semantic-list 81902 . 81932) (punctuation 81901 . 81902) (symbol 81878 . 81900) (semantic-list 81851 . 81878) (punctuation 81850 . 81851) (semantic-list 81830 . 81849) (punctuation 81829 . 81830) (symbol 81779 . 81820) (symbol 81766 . 81770) (punctuation 81765 . 81766) (punctuation 81764 . 81765) (semantic-list 81711 . 81764) (punctuation 81710 . 81711) (punctuation 81709 . 81710) (symbol 81705 . 81709) (semantic-list 81698 . 81704) (punctuation 81697 . 81698) (bol 81695 . 81695) (semantic-list 81503 . 81694) (punctuation 81502 . 81503) (bol 81500 . 81500) (semantic-list 81390 . 81499) (punctuation 81389 . 81390) (bol 81387 . 81387) (symbol 81364 . 81386) (semantic-list 81337 . 81364) (punctuation 81336 . 81337) (symbol 81332 . 81335) (symbol 81329 . 81331) (symbol 81326 . 81328) (semantic-list 81298 . 81325) (punctuation 81297 . 81298) (symbol 81294 . 81296) (symbol 81288 . 81293) (punctuation 81287 . 81288) (bol 81285 . 81285) (semantic-list 81265 . 81284) (punctuation 81264 . 81265) (symbol 81261 . 81263) (symbol 81255 . 81260) (punctuation 81254 . 81255) (bol 81252 . 81252) (semantic-list 81180 . 81251) (punctuation 81179 . 81180) (bol 81177 . 81177) (symbol 81152 . 81176) (symbol 81145 . 81151) (bol 81145 . 81145) (ENDIF 80246 . 80251) (bol 80246 . 80246) (symbol 79820 . 79825) (bol 79820 . 79820) (semantic-list 79718 . 79819) (punctuation 79717 . 79718) (semantic-list 79710 . 79716) (punctuation 79709 . 79710) (bol 79707 . 79707) (semantic-list 79694 . 79706) (punctuation 79693 . 79694) (semantic-list 79657 . 79692) (punctuation 79656 . 79657) (symbol 79627 . 79655) (semantic-list 79595 . 79627) (punctuation 79594 . 79595) (semantic-list 79568 . 79593) (punctuation 79567 . 79568) (symbol 79517 . 79558) (symbol 79504 . 79508) (punctuation 79503 . 79504) (punctuation 79502 . 79503) (semantic-list 79449 . 79502) (punctuation 79448 . 79449) (punctuation 79447 . 79448) (symbol 79443 . 79447) (semantic-list 79436 . 79442) (punctuation 79435 . 79436) (bol 79433 . 79433) (semantic-list 79312 . 79432) (punctuation 79311 . 79312) (bol 79309 . 79309) (symbol 79280 . 79308) (semantic-list 79248 . 79280) (punctuation 79247 . 79248) (symbol 79243 . 79246) (symbol 79240 . 79242) (symbol 79237 . 79239) (semantic-list 79204 . 79236) (punctuation 79203 . 79204) (symbol 79200 . 79202) (symbol 79194 . 79199) (punctuation 79193 . 79194) (bol 79191 . 79191) (semantic-list 79165 . 79190) (punctuation 79164 . 79165) (symbol 79161 . 79163) (symbol 79155 . 79160) (punctuation 79154 . 79155) (bol 79152 . 79152) (semantic-list 79069 . 79151) (punctuation 79068 . 79069) (bol 79066 . 79066) (symbol 79036 . 79065) (symbol 79029 . 79035) (bol 79029 . 79029) (ENDIF 77726 . 77731) (bol 77726 . 77726) (ELSE 77585 . 77589) (bol 77585 . 77585) (symbol 77223 . 77228) (bol 77223 . 77223) (semantic-list 77128 . 77222) (punctuation 77127 . 77128) (semantic-list 77120 . 77126) (punctuation 77119 . 77120) (bol 77117 . 77117) (semantic-list 77104 . 77116) (punctuation 77103 . 77104) (semantic-list 77073 . 77102) (punctuation 77072 . 77073) (symbol 77050 . 77071) (semantic-list 77024 . 77050) (punctuation 77023 . 77024) (semantic-list 77004 . 77022) (punctuation 77003 . 77004) (symbol 76953 . 76994) (symbol 76940 . 76944) (punctuation 76939 . 76940) (punctuation 76938 . 76939) (semantic-list 76885 . 76938) (punctuation 76884 . 76885) (punctuation 76883 . 76884) (symbol 76879 . 76883) (semantic-list 76872 . 76878) (punctuation 76871 . 76872) (bol 76869 . 76869) (semantic-list 76761 . 76868) (punctuation 76760 . 76761) (bol 76758 . 76758) (symbol 76736 . 76757) (semantic-list 76710 . 76736) (punctuation 76709 . 76710) (symbol 76705 . 76708) (symbol 76702 . 76704) (symbol 76699 . 76701) (semantic-list 76672 . 76698) (punctuation 76671 . 76672) (symbol 76668 . 76670) (symbol 76662 . 76667) (punctuation 76661 . 76662) (bol 76659 . 76659) (semantic-list 76640 . 76658) (punctuation 76639 . 76640) (symbol 76636 . 76638) (symbol 76630 . 76635) (punctuation 76629 . 76630) (bol 76627 . 76627) (semantic-list 76557 . 76626) (punctuation 76556 . 76557) (bol 76554 . 76554) (symbol 76530 . 76553) (symbol 76523 . 76529) (bol 76523 . 76523) (ENDIF 76126 . 76131) (bol 76126 . 76126) (symbol 75807 . 75812) (bol 75807 . 75807) (semantic-list 75779 . 75806) (punctuation 75778 . 75779) (semantic-list 75743 . 75777) (punctuation 75742 . 75743) (symbol 75731 . 75741) (semantic-list 75721 . 75730) (punctuation 75720 . 75721) (semantic-list 75713 . 75719) (punctuation 75712 . 75713) (bol 75710 . 75710) (semantic-list 75635 . 75709) (punctuation 75634 . 75635) (bol 75632 . 75632) (symbol 75610 . 75631) (symbol 75603 . 75609) (bol 75603 . 75603) (semantic-list 74896 . 74969) (punctuation 74895 . 74896) (bol 74895 . 74895) (symbol 74592 . 74597) (bol 74592 . 74592) (semantic-list 74579 . 74591) (punctuation 74578 . 74579) (semantic-list 74543 . 74577) (punctuation 74542 . 74543) (semantic-list 74515 . 74537) (punctuation 74514 . 74515) (symbol 74509 . 74513) (semantic-list 74495 . 74508) (punctuation 74494 . 74495) (semantic-list 74475 . 74489) (punctuation 74474 . 74475) (semantic-list 74462 . 74473) (punctuation 74461 . 74462) (bol 74457 . 74457) (semantic-list 74354 . 74456) (punctuation 74353 . 74354) (bol 74349 . 74349) (symbol 74320 . 74348) (symbol 74313 . 74319) (bol 74313 . 74313) (ENDIF 73465 . 73470) (bol 73465 . 73465) (symbol 72983 . 72988) (bol 72983 . 72983) (semantic-list 72882 . 72982) (punctuation 72881 . 72882) (semantic-list 72874 . 72880) (punctuation 72873 . 72874) (bol 72871 . 72871) (semantic-list 72858 . 72870) (punctuation 72857 . 72858) (semantic-list 72824 . 72856) (punctuation 72823 . 72824) (symbol 72798 . 72822) (semantic-list 72769 . 72798) (punctuation 72768 . 72769) (semantic-list 72750 . 72767) (punctuation 72749 . 72750) (symbol 72699 . 72740) (symbol 72686 . 72690) (punctuation 72685 . 72686) (punctuation 72684 . 72685) (semantic-list 72631 . 72684) (punctuation 72630 . 72631) (punctuation 72629 . 72630) (symbol 72625 . 72629) (semantic-list 72618 . 72624) (punctuation 72617 . 72618) (bol 72615 . 72615) (semantic-list 72501 . 72614) (punctuation 72500 . 72501) (bol 72498 . 72498) (symbol 72473 . 72497) (semantic-list 72444 . 72473) (punctuation 72443 . 72444) (symbol 72439 . 72442) (symbol 72436 . 72438) (symbol 72433 . 72435) (semantic-list 72403 . 72432) (punctuation 72402 . 72403) (symbol 72399 . 72401) (symbol 72393 . 72398) (punctuation 72392 . 72393) (bol 72390 . 72390) (semantic-list 72372 . 72389) (punctuation 72371 . 72372) (symbol 72368 . 72370) (symbol 72362 . 72367) (punctuation 72361 . 72362) (bol 72359 . 72359) (semantic-list 72283 . 72358) (punctuation 72282 . 72283) (bol 72280 . 72280) (symbol 72253 . 72279) (symbol 72246 . 72252) (bol 72246 . 72246) (symbol 71199 . 71202) (punctuation 71197 . 71198) (punctuation 71196 . 71197) (symbol 71176 . 71195) (bol 71172 . 71172) (symbol 71138 . 71143) (bol 71138 . 71138) (semantic-list 71125 . 71137) (punctuation 71124 . 71125) (semantic-list 71093 . 71123) (punctuation 71092 . 71093) (semantic-list 71054 . 71072) (punctuation 71053 . 71054) (symbol 71048 . 71052) (semantic-list 71034 . 71047) (punctuation 71033 . 71034) (semantic-list 70999 . 71013) (punctuation 70998 . 70999) (semantic-list 70986 . 70997) (punctuation 70985 . 70986) (semantic-list 70978 . 70984) (punctuation 70977 . 70978) (bol 70973 . 70973) (symbol 70959 . 70972) (semantic-list 70946 . 70959) (punctuation 70945 . 70946) (symbol 70943 . 70944) (semantic-list 70917 . 70942) (punctuation 70916 . 70917) (symbol 70911 . 70915) (semantic-list 70904 . 70910) (punctuation 70903 . 70904) (bol 70899 . 70899) (symbol 70891 . 70898) (semantic-list 70878 . 70891) (punctuation 70877 . 70878) (semantic-list 70850 . 70876) (punctuation 70849 . 70850) (symbol 70846 . 70848) (symbol 70843 . 70845) (semantic-list 70836 . 70842) (punctuation 70835 . 70836) (bol 70831 . 70831) (symbol 70825 . 70830) (semantic-list 70812 . 70825) (punctuation 70811 . 70812) (symbol 70808 . 70810) (symbol 70802 . 70807) (semantic-list 70795 . 70801) (punctuation 70794 . 70795) (bol 70790 . 70790) (string 70732 . 70789) (symbol 70727 . 70731) (semantic-list 70720 . 70726) (punctuation 70719 . 70720) (bol 70715 . 70715) (symbol 70690 . 70714) (symbol 70683 . 70689) (bol 70683 . 70683) (semantic-list 70519 . 70591) (punctuation 70518 . 70519) (bol 70518 . 70518) (shell-command 70288 . 70332) (bol 70287 . 70287) (shell-command 70174 . 70286) (bol 70173 . 70173) (shell-command 70137 . 70172) (bol 70136 . 70136) (shell-command 70072 . 70129) (bol 70071 . 70071) (shell-command 69920 . 70018) (bol 69919 . 69919) (shell-command 69793 . 69869) (bol 69792 . 69792) (symbol 65752 . 65755) (punctuation 65750 . 65751) (punctuation 65749 . 65750) (symbol 65727 . 65748) (bol 65723 . 65723) (symbol 65687 . 65692) (bol 65687 . 65687) (semantic-list 65674 . 65686) (punctuation 65673 . 65674) (semantic-list 65640 . 65672) (punctuation 65639 . 65640) (semantic-list 65612 . 65632) (punctuation 65611 . 65612) (symbol 65604 . 65610) (semantic-list 65590 . 65603) (punctuation 65589 . 65590) (semantic-list 65568 . 65582) (punctuation 65567 . 65568) (semantic-list 65555 . 65566) (punctuation 65554 . 65555) (bol 65552 . 65552) (semantic-list 65516 . 65551) (punctuation 65515 . 65516) (bol 65513 . 65513) (semantic-list 65437 . 65512) (punctuation 65436 . 65437) (bol 65434 . 65434) (symbol 65407 . 65433) (symbol 65400 . 65406) (bol 65400 . 65400) (semantic-list 65289 . 65360) (punctuation 65288 . 65289) (bol 65288 . 65288) (ELSE 64435 . 64439) (bol 64435 . 64435) (symbol 63252 . 63257) (bol 63252 . 63252) (semantic-list 62523 . 63251) (symbol 62520 . 62522) (semantic-list 62499 . 62511) (punctuation 62498 . 62499) (semantic-list 62494 . 62497) (punctuation 62493 . 62494) (symbol 62470 . 62492) (semantic-list 62443 . 62470) (punctuation 62442 . 62443) (semantic-list 62429 . 62441) (punctuation 62428 . 62429) (symbol 62378 . 62419) (symbol 62365 . 62369) (punctuation 62364 . 62365) (punctuation 62363 . 62364) (semantic-list 62310 . 62363) (punctuation 62309 . 62310) (punctuation 62308 . 62309) (symbol 62304 . 62308) (semantic-list 62297 . 62303) (punctuation 62296 . 62297) (bol 62294 . 62294) (semantic-list 62176 . 62293) (punctuation 62175 . 62176) (bol 62173 . 62173) (symbol 62150 . 62172) (semantic-list 62123 . 62150) (punctuation 62122 . 62123) (symbol 62118 . 62121) (symbol 62115 . 62117) (symbol 62112 . 62114) (semantic-list 62084 . 62111) (punctuation 62083 . 62084) (semantic-list 62072 . 62082) (punctuation 62071 . 62072) (symbol 62068 . 62070) (symbol 62062 . 62067) (punctuation 62061 . 62062) (bol 62059 . 62059) (semantic-list 62023 . 62058) (punctuation 62022 . 62023) (bol 62020 . 62020) (string 61989 . 62019) (symbol 61984 . 61988) (punctuation 61983 . 61984) (bol 61981 . 61981) (symbol 61956 . 61980) (symbol 61949 . 61955) (bol 61949 . 61949) (symbol 61916 . 61921) (bol 61916 . 61916) (symbol 61887 . 61915) (symbol 61880 . 61886) (bol 61880 . 61880) (symbol 61869 . 61874) (bol 61869 . 61869) (symbol 61861 . 61868) (semantic-list 61849 . 61861) (punctuation 61848 . 61849) (symbol 61840 . 61847) (symbol 61836 . 61839) (symbol 61833 . 61835) (semantic-list 61826 . 61832) (punctuation 61825 . 61826) (bol 61825 . 61825) (symbol 61822 . 61824) (punctuation 61818 . 61819) (symbol 61817 . 61818) (symbol 61812 . 61816) (punctuation 61806 . 61807) (symbol 61802 . 61806) (string 61713 . 61801) (symbol 61708 . 61712) (punctuation 61702 . 61703) (symbol 61698 . 61702) (string 61653 . 61697) (symbol 61648 . 61652) (symbol 61639 . 61643) (punctuation 61637 . 61638) (semantic-list 61608 . 61637) (symbol 61605 . 61607) (semantic-list 61577 . 61604) (IF 61574 . 61576) (semantic-list 61567 . 61573) (punctuation 61566 . 61567) (bol 61566 . 61566) (symbol 61537 . 61565) (symbol 61530 . 61536) (bol 61530 . 61530) (semantic-list 61224 . 61293) (punctuation 61223 . 61224) (bol 61223 . 61223) (ENDIF 60514 . 60519) (bol 60512 . 60512) (semantic-list 60485 . 60511) (punctuation 60484 . 60485) (punctuation 60482 . 60483) (punctuation 60481 . 60482) (symbol 60459 . 60480) (bol 60455 . 60455) (semantic-list 60422 . 60454) (IFEQ 60417 . 60421) (bol 60415 . 60415) (ELSE 59407 . 59411) (bol 59407 . 59407) (symbol 57631 . 57636) (bol 57631 . 57631) (symbol 57622 . 57630) (semantic-list 57618 . 57621) (punctuation 57617 . 57618) (punctuation 57615 . 57616) (symbol 57610 . 57615) (symbol 57601 . 57609) (symbol 57596 . 57600) (symbol 57590 . 57595) (symbol 57585 . 57589) (punctuation 57584 . 57585) (bol 57582 . 57582) (semantic-list 57359 . 57581) (punctuation 57358 . 57359) (bol 57356 . 57356) (semantic-list 57025 . 57355) (punctuation 57024 . 57025) (bol 57022 . 57022) (semantic-list 56679 . 57021) (punctuation 56678 . 56679) (bol 56676 . 56676) (semantic-list 56183 . 56675) (punctuation 56182 . 56183) (bol 56180 . 56180) (semantic-list 55800 . 56179) (punctuation 55799 . 55800) (bol 55797 . 55797) (semantic-list 55778 . 55796) (punctuation 55777 . 55778) (symbol 55775 . 55776) (semantic-list 55764 . 55774) (punctuation 55763 . 55764) (symbol 55761 . 55762) (semantic-list 55734 . 55760) (punctuation 55733 . 55734) (semantic-list 55720 . 55732) (punctuation 55719 . 55720) (symbol 55716 . 55718) (semantic-list 55705 . 55715) (punctuation 55704 . 55705) (semantic-list 55697 . 55703) (punctuation 55696 . 55697) (bol 55694 . 55694) (semantic-list 55376 . 55626) (punctuation 55375 . 55376) (bol 55373 . 55373) (semantic-list 55342 . 55372) (punctuation 55341 . 55342) (bol 55339 . 55339) (symbol 55325 . 55338) (semantic-list 55299 . 55325) (punctuation 55298 . 55299) (symbol 55295 . 55297) (semantic-list 55260 . 55282) (punctuation 55259 . 55260) (symbol 55255 . 55258) (semantic-list 55248 . 55254) (punctuation 55247 . 55248) (bol 55245 . 55245) (semantic-list 55083 . 55244) (punctuation 55082 . 55083) (bol 55080 . 55080) (symbol 55066 . 55079) (semantic-list 55040 . 55066) (punctuation 55039 . 55040) (symbol 55037 . 55038) (semantic-list 54993 . 55024) (punctuation 54992 . 54993) (symbol 54988 . 54991) (semantic-list 54981 . 54987) (punctuation 54980 . 54981) (bol 54978 . 54978) (symbol 54968 . 54977) (semantic-list 54942 . 54968) (punctuation 54941 . 54942) (semantic-list 54913 . 54940) (punctuation 54912 . 54913) (symbol 54909 . 54911) (semantic-list 54902 . 54908) (punctuation 54901 . 54902) (bol 54899 . 54899) (semantic-list 54784 . 54898) (punctuation 54783 . 54784) (bol 54781 . 54781) (semantic-list 54680 . 54780) (punctuation 54679 . 54680) (semantic-list 54672 . 54678) (punctuation 54671 . 54672) (bol 54669 . 54669) (semantic-list 54566 . 54668) (punctuation 54565 . 54566) (semantic-list 54558 . 54564) (punctuation 54557 . 54558) (bol 54555 . 54555) (symbol 54534 . 54554) (semantic-list 54508 . 54534) (punctuation 54507 . 54508) (semantic-list 54491 . 54506) (punctuation 54490 . 54491) (symbol 54487 . 54489) (symbol 54484 . 54486) (semantic-list 54477 . 54483) (punctuation 54476 . 54477) (bol 54474 . 54474) (symbol 54469 . 54473) (semantic-list 54443 . 54469) (punctuation 54442 . 54443) (symbol 54439 . 54441) (semantic-list 54412 . 54439) (punctuation 54411 . 54412) (symbol 54407 . 54410) (symbol 54404 . 54406) (semantic-list 54397 . 54403) (punctuation 54396 . 54397) (bol 54394 . 54394) (symbol 54387 . 54393) (semantic-list 54361 . 54387) (punctuation 54360 . 54361) (symbol 54356 . 54359) (symbol 54353 . 54355) (semantic-list 54346 . 54352) (punctuation 54345 . 54346) (bol 54343 . 54343) (symbol 54338 . 54342) (semantic-list 54312 . 54338) (punctuation 54311 . 54312) (symbol 54308 . 54310) (symbol 54302 . 54307) (semantic-list 54295 . 54301) (punctuation 54294 . 54295) (bol 54292 . 54292) (symbol 54239 . 54243) (symbol 54236 . 54238) (symbol 54234 . 54235) (semantic-list 54208 . 54234) (punctuation 54207 . 54208) (symbol 54187 . 54206) (semantic-list 54170 . 54187) (punctuation 54169 . 54170) (symbol 54166 . 54168) (semantic-list 54159 . 54165) (punctuation 54158 . 54159) (bol 54156 . 54156) (symbol 54154 . 54155) (semantic-list 54128 . 54154) (punctuation 54127 . 54128) (semantic-list 54109 . 54126) (punctuation 54108 . 54109) (symbol 54105 . 54107) (symbol 54102 . 54104) (semantic-list 54095 . 54101) (punctuation 54094 . 54095) (bol 54092 . 54092) (symbol 54082 . 54091) (semantic-list 54056 . 54082) (punctuation 54055 . 54056) (symbol 54052 . 54054) (symbol 54049 . 54051) (semantic-list 54042 . 54048) (punctuation 54041 . 54042) (bol 54039 . 54039) (semantic-list 53841 . 54038) (punctuation 53840 . 53841) (bol 53838 . 53838) (symbol 53826 . 53837) (symbol 53818 . 53825) (symbol 53808 . 53817) (symbol 53803 . 53807) (punctuation 53802 . 53803) (bol 53800 . 53800) (semantic-list 53778 . 53799) (punctuation 53777 . 53778) (semantic-list 53759 . 53776) (punctuation 53758 . 53759) (semantic-list 53738 . 53757) (punctuation 53737 . 53738) (semantic-list 53710 . 53736) (punctuation 53709 . 53710) (symbol 53702 . 53708) (punctuation 53701 . 53702) (symbol 53692 . 53701) (symbol 53688 . 53691) (punctuation 53687 . 53688) (symbol 53678 . 53687) (symbol 53675 . 53677) (symbol 53669 . 53674) (semantic-list 53662 . 53668) (punctuation 53661 . 53662) (bol 53659 . 53659) (bol 53585 . 53585) (symbol 53574 . 53584) (symbol 53565 . 53573) (symbol 53557 . 53564) (symbol 53552 . 53556) (punctuation 53551 . 53552) (bol 53549 . 53549) (symbol 53544 . 53548) (semantic-list 53518 . 53544) (punctuation 53517 . 53518) (symbol 53509 . 53516) (semantic-list 53483 . 53509) (punctuation 53482 . 53483) (symbol 53477 . 53481) (semantic-list 53451 . 53477) (punctuation 53450 . 53451) (symbol 53447 . 53449) (symbol 53441 . 53446) (semantic-list 53434 . 53440) (punctuation 53433 . 53434) (bol 53431 . 53431) (semantic-list 53409 . 53430) (punctuation 53408 . 53409) (symbol 53405 . 53407) (symbol 53399 . 53404) (semantic-list 53392 . 53398) (punctuation 53391 . 53392) (bol 53389 . 53389) (symbol 53382 . 53388) (symbol 53376 . 53381) (symbol 53367 . 53375) (symbol 53360 . 53366) (symbol 53354 . 53359) (symbol 53349 . 53353) (punctuation 53348 . 53349) (bol 53346 . 53346) (symbol 53319 . 53345) (symbol 53312 . 53318) (bol 53312 . 53312) (symbol 53285 . 53290) (bol 53285 . 53285) (symbol 53272 . 53284) (semantic-list 53269 . 53272) (punctuation 53268 . 53269) (symbol 53239 . 53267) (semantic-list 53236 . 53239) (punctuation 53235 . 53236) (symbol 53232 . 53234) (semantic-list 53225 . 53231) (punctuation 53224 . 53225) (bol 53220 . 53220) (symbol 53191 . 53219) (semantic-list 53188 . 53191) (punctuation 53187 . 53188) (symbol 53184 . 53186) (string 53149 . 53183) (symbol 53146 . 53148) (string 53117 . 53145) (symbol 53114 . 53116) (symbol 53110 . 53113) (semantic-list 53103 . 53109) (punctuation 53102 . 53103) (bol 53098 . 53098) (symbol 53094 . 53097) (semantic-list 53090 . 53093) (punctuation 53089 . 53090) (symbol 53086 . 53088) (semantic-list 53077 . 53085) (punctuation 53076 . 53077) (semantic-list 53069 . 53075) (punctuation 53068 . 53069) (bol 53064 . 53064) (symbol 53052 . 53063) (semantic-list 53049 . 53052) (punctuation 53048 . 53049) (symbol 53031 . 53048) (semantic-list 53028 . 53031) (punctuation 53027 . 53028) (semantic-list 53023 . 53026) (punctuation 53022 . 53023) (symbol 53019 . 53021) (semantic-list 53012 . 53018) (punctuation 53011 . 53012) (bol 53007 . 53007) (symbol 52995 . 53006) (semantic-list 52992 . 52995) (punctuation 52991 . 52992) (symbol 52974 . 52991) (semantic-list 52971 . 52974) (punctuation 52970 . 52971) (symbol 52967 . 52969) (symbol 52961 . 52966) (semantic-list 52954 . 52960) (punctuation 52953 . 52954) (bol 52949 . 52949) (semantic-list 52945 . 52948) (punctuation 52944 . 52945) (symbol 52940 . 52943) (symbol 52937 . 52939) (semantic-list 52930 . 52936) (punctuation 52929 . 52930) (bol 52925 . 52925) (symbol 52911 . 52924) (semantic-list 52908 . 52911) (punctuation 52907 . 52908) (semantic-list 52903 . 52906) (punctuation 52902 . 52903) (symbol 52899 . 52901) (semantic-list 52892 . 52898) (punctuation 52891 . 52892) (bol 52887 . 52887) (symbol 52874 . 52886) (semantic-list 52871 . 52874) (punctuation 52870 . 52871) (symbol 52867 . 52869) (symbol 52861 . 52866) (semantic-list 52854 . 52860) (punctuation 52853 . 52854) (bol 52849 . 52849) (symbol 52836 . 52848) (semantic-list 52833 . 52836) (punctuation 52832 . 52833) (symbol 52828 . 52831) (symbol 52825 . 52827) (semantic-list 52818 . 52824) (punctuation 52817 . 52818) (bol 52813 . 52813) (symbol 52786 . 52812) (symbol 52779 . 52785) (bol 52779 . 52779) (semantic-list 51645 . 51668) (punctuation 51644 . 51645) (symbol 51633 . 51643) (punctuation 51631 . 51632) (punctuation 51630 . 51631) (symbol 51602 . 51629) (bol 51600 . 51600) (semantic-list 51546 . 51565) (punctuation 51545 . 51546) (symbol 51538 . 51544) (punctuation 51536 . 51537) (punctuation 51535 . 51536) (symbol 51507 . 51534) (bol 51505 . 51505) (string 51446 . 51474) (symbol 51436 . 51445) (punctuation 51434 . 51435) (punctuation 51433 . 51434) (symbol 51405 . 51432) (bol 51403 . 51403) (semantic-list 51109 . 51168) (punctuation 51108 . 51109) (bol 51106 . 51106) (semantic-list 51001 . 51072) (punctuation 51000 . 51001) (bol 50998 . 50998) (symbol 47383 . 47388) (bol 47383 . 47383) (semantic-list 47324 . 47382) (punctuation 47323 . 47324) (bol 47323 . 47323) (semantic-list 47166 . 47322) (punctuation 47165 . 47166) (bol 47165 . 47165) (semantic-list 47063 . 47164) (punctuation 47062 . 47063) (bol 47062 . 47062) (semantic-list 46933 . 47061) (punctuation 46932 . 46933) (bol 46932 . 46932) (semantic-list 46846 . 46931) (punctuation 46845 . 46846) (bol 46845 . 46845) (semantic-list 46716 . 46844) (punctuation 46715 . 46716) (bol 46715 . 46715) (semantic-list 46629 . 46714) (punctuation 46628 . 46629) (bol 46628 . 46628) (semantic-list 46557 . 46627) (punctuation 46556 . 46557) (bol 46556 . 46556) (semantic-list 46462 . 46555) (punctuation 46461 . 46462) (bol 46461 . 46461) (semantic-list 46345 . 46460) (punctuation 46344 . 46345) (bol 46344 . 46344) (semantic-list 46230 . 46343) (punctuation 46229 . 46230) (bol 46229 . 46229) (semantic-list 46072 . 46228) (punctuation 46071 . 46072) (bol 46071 . 46071) (semantic-list 45920 . 46070) (punctuation 45919 . 45920) (bol 45919 . 45919) (semantic-list 45775 . 45918) (punctuation 45774 . 45775) (bol 45774 . 45774) (semantic-list 45591 . 45773) (punctuation 45590 . 45591) (bol 45590 . 45590) (semantic-list 45407 . 45589) (punctuation 45406 . 45407) (bol 45406 . 45406) (semantic-list 45247 . 45405) (punctuation 45246 . 45247) (bol 45246 . 45246) (semantic-list 45117 . 45245) (punctuation 45116 . 45117) (bol 45116 . 45116) (semantic-list 44962 . 45115) (punctuation 44961 . 44962) (bol 44961 . 44961) (semantic-list 44814 . 44960) (punctuation 44813 . 44814) (bol 44813 . 44813) (semantic-list 44651 . 44812) (punctuation 44650 . 44651) (bol 44650 . 44650) (semantic-list 44646 . 44649) (punctuation 44645 . 44646) (symbol 44642 . 44644) (string 44615 . 44641) (symbol 44610 . 44614) (semantic-list 44603 . 44609) (punctuation 44602 . 44603) (bol 44602 . 44602) (semantic-list 44465 . 44601) (punctuation 44464 . 44465) (bol 44464 . 44464) (semantic-list 44340 . 44463) (punctuation 44339 . 44340) (bol 44339 . 44339) (semantic-list 44217 . 44338) (punctuation 44216 . 44217) (bol 44216 . 44216) (semantic-list 44109 . 44215) (punctuation 44108 . 44109) (bol 44108 . 44108) (semantic-list 44005 . 44107) (punctuation 44004 . 44005) (bol 44004 . 44004) (semantic-list 43836 . 44003) (punctuation 43835 . 43836) (bol 43835 . 43835) (semantic-list 43680 . 43834) (punctuation 43679 . 43680) (bol 43679 . 43679) (semantic-list 43542 . 43678) (punctuation 43541 . 43542) (bol 43541 . 43541) (semantic-list 43392 . 43540) (punctuation 43391 . 43392) (bol 43391 . 43391) (semantic-list 43254 . 43390) (punctuation 43253 . 43254) (bol 43253 . 43253) (semantic-list 43137 . 43252) (punctuation 43136 . 43137) (bol 43136 . 43136) (semantic-list 43024 . 43135) (punctuation 43023 . 43024) (bol 43023 . 43023) (semantic-list 42892 . 43022) (punctuation 42891 . 42892) (bol 42891 . 42891) (semantic-list 42772 . 42890) (punctuation 42771 . 42772) (bol 42771 . 42771) (semantic-list 42662 . 42770) (punctuation 42661 . 42662) (bol 42661 . 42661) (semantic-list 42545 . 42660) (punctuation 42544 . 42545) (bol 42544 . 42544) (semantic-list 42428 . 42543) (punctuation 42427 . 42428) (bol 42427 . 42427) (semantic-list 42305 . 42426) (punctuation 42304 . 42305) (bol 42304 . 42304) (semantic-list 42186 . 42303) (punctuation 42185 . 42186) (bol 42185 . 42185) (semantic-list 42060 . 42184) (punctuation 42059 . 42060) (bol 42059 . 42059) (semantic-list 41891 . 42058) (punctuation 41890 . 41891) (bol 41890 . 41890) (semantic-list 41735 . 41889) (punctuation 41734 . 41735) (bol 41734 . 41734) (semantic-list 41597 . 41733) (punctuation 41596 . 41597) (bol 41596 . 41596) (semantic-list 41447 . 41595) (punctuation 41446 . 41447) (bol 41446 . 41446) (semantic-list 41309 . 41445) (punctuation 41308 . 41309) (bol 41308 . 41308) (semantic-list 41187 . 41307) (punctuation 41186 . 41187) (bol 41186 . 41186) (semantic-list 41070 . 41185) (punctuation 41069 . 41070) (bol 41069 . 41069) (semantic-list 40938 . 41068) (punctuation 40937 . 40938) (bol 40937 . 40937) (semantic-list 40818 . 40936) (punctuation 40817 . 40818) (bol 40817 . 40817) (semantic-list 40705 . 40816) (punctuation 40704 . 40705) (bol 40704 . 40704) (semantic-list 40598 . 40703) (punctuation 40597 . 40598) (bol 40597 . 40597) (semantic-list 40593 . 40596) (punctuation 40592 . 40593) (symbol 40589 . 40591) (string 40547 . 40588) (symbol 40542 . 40546) (semantic-list 40535 . 40541) (punctuation 40534 . 40535) (bol 40534 . 40534) (symbol 40499 . 40533) (symbol 40492 . 40498) (bol 40492 . 40492) (symbol 39430 . 39432) (punctuation 39428 . 39429) (punctuation 39427 . 39428) (symbol 39386 . 39426) (bol 39384 . 39384) (symbol 39050 . 39052) (punctuation 39048 . 39049) (punctuation 39047 . 39048) (symbol 39011 . 39046) (bol 39009 . 39009) (ENDIF 35880 . 35885) (bol 35880 . 35880) (ENDIF 35868 . 35873) (bol 35866 . 35866) (semantic-list 35833 . 35865) (punctuation 35832 . 35833) (punctuation 35830 . 35831) (punctuation 35829 . 35830) (symbol 35799 . 35828) (bol 35795 . 35795) (symbol 35762 . 35794) (IFDEF 35756 . 35761) (bol 35754 . 35754) (semantic-list 35720 . 35753) (punctuation 35719 . 35720) (punctuation 35717 . 35718) (punctuation 35716 . 35717) (symbol 35686 . 35715) (bol 35684 . 35684) (semantic-list 34489 . 34755) (punctuation 34488 . 34489) (bol 34488 . 34488) (semantic-list 34166 . 34480) (punctuation 34165 . 34166) (bol 34165 . 34165) (semantic-list 33875 . 34159) (punctuation 33874 . 33875) (bol 33874 . 33874) (semantic-list 33544 . 33873) (punctuation 33543 . 33544) (bol 33543 . 33543) (symbol 32085 . 32090) (bol 32085 . 32085) (symbol 31623 . 31643) (symbol 31616 . 31622) (bol 31616 . 31616) (ELSE 29749 . 29753) (bol 29749 . 29749) (ENDIF 29712 . 29717) (bol 29712 . 29712) (ENDIF 29678 . 29683) (bol 29678 . 29678) (ELSE 28983 . 28987) (bol 28983 . 28983) (semantic-list 27558 . 27619) (IFEQ 27553 . 27557) (ELSE 27548 . 27552) (bol 27548 . 27548) (semantic-list 26394 . 26461) (IFEQ 26389 . 26393) (ELSE 26384 . 26388) (bol 26384 . 26384) (semantic-list 25226 . 25252) (IFEQ 25221 . 25225) (ELSE 25216 . 25220) (bol 25216 . 25216) (semantic-list 25156 . 25214) (punctuation 25155 . 25156) (bol 25155 . 25155) (semantic-list 24896 . 24982) (punctuation 24895 . 24896) (bol 24893 . 24893) (semantic-list 23928 . 23951) (punctuation 23927 . 23928) (symbol 23916 . 23926) (punctuation 23914 . 23915) (punctuation 23913 . 23914) (symbol 23889 . 23912) (bol 23887 . 23887) (semantic-list 23832 . 23851) (punctuation 23831 . 23832) (symbol 23824 . 23830) (punctuation 23822 . 23823) (punctuation 23821 . 23822) (symbol 23797 . 23820) (bol 23795 . 23795) (punctuation 22508 . 22509) (punctuation 22507 . 22508) (symbol 22483 . 22506) (bol 22481 . 22481) (symbol 22468 . 22475) (semantic-list 22455 . 22468) (punctuation 22454 . 22455) (punctuation 22452 . 22453) (punctuation 22451 . 22452) (symbol 22427 . 22450) (bol 22425 . 22425) (ENDIF 22354 . 22359) (bol 22354 . 22354) (punctuation 22352 . 22353) (punctuation 22351 . 22352) (symbol 22320 . 22350) (bol 22318 . 22318) (punctuation 22316 . 22317) (punctuation 22315 . 22316) (symbol 22287 . 22314) (bol 22285 . 22285) (ENDIF 22274 . 22279) (bol 22272 . 22272) (punctuation 22270 . 22271) (punctuation 22269 . 22270) (symbol 22238 . 22268) (bol 22234 . 22234) (ELSE 22229 . 22233) (bol 22227 . 22227) (symbol 22212 . 22226) (semantic-list 22199 . 22212) (punctuation 22198 . 22199) (punctuation 22196 . 22197) (punctuation 22195 . 22196) (symbol 22164 . 22194) (bol 22160 . 22160) (semantic-list 22116 . 22159) (IFEQ 22111 . 22115) (bol 22109 . 22109) (symbol 22097 . 22108) (semantic-list 22084 . 22097) (punctuation 22083 . 22084) (punctuation 22081 . 22082) (punctuation 22080 . 22081) (symbol 22052 . 22079) (bol 22050 . 22050) (semantic-list 19218 . 19269) (punctuation 19217 . 19218) (bol 19217 . 19217) (semantic-list 18459 . 18512) (punctuation 18458 . 18459) (bol 18458 . 18458) (semantic-list 17986 . 18049) (punctuation 17985 . 17986) (bol 17983 . 17983) (symbol 17126 . 17132) (semantic-list 17120 . 17126) (punctuation 17119 . 17120) (punctuation 17117 . 17118) (punctuation 17116 . 17117) (symbol 17111 . 17115) (bol 17109 . 17109) (symbol 17042 . 17047) (bol 17042 . 17042) (semantic-list 17037 . 17040) (punctuation 17036 . 17037) (symbol 17031 . 17035) (semantic-list 17024 . 17030) (punctuation 17023 . 17024) (bol 17023 . 17023) (symbol 16995 . 17022) (symbol 16988 . 16994) (bol 16988 . 16988) (shell-command 16690 . 16736) (bol 16689 . 16689) (shell-command 16667 . 16683) (bol 16666 . 16666) (ENDIF 15168 . 15173) (bol 15168 . 15168) (ENDIF 15126 . 15131) (bol 15126 . 15126) (shell-command 15081 . 15125) (bol 15080 . 15080) (shell-command 14996 . 15079) (bol 14995 . 14995) (shell-command 14882 . 14994) (bol 14881 . 14881) (shell-command 14711 . 14880) (bol 14710 . 14710) (ENDIF 14286 . 14291) (bol 14286 . 14286) (shell-command 13628 . 13699) (bol 13627 . 13627) (shell-command 13106 . 13216) (bol 13105 . 13105) (shell-command 12975 . 13104) (bol 12974 . 12974) (shell-command 12897 . 12973) (bol 12896 . 12896) (shell-command 12726 . 12895) (bol 12725 . 12725) (shell-command 12498 . 12724) (bol 12497 . 12497) (shell-command 12321 . 12490) (bol 12320 . 12320) (shell-command 10567 . 12279) (bol 10566 . 10566) (shell-command 10433 . 10559) (bol 10432 . 10432) (shell-command 10331 . 10431) (bol 10330 . 10330) (symbol 9510 . 9515) (bol 9510 . 9510) (semantic-list 9470 . 9509) (punctuation 9469 . 9470) (bol 9469 . 9469) (symbol 9442 . 9468) (symbol 9435 . 9441) (bol 9435 . 9435) (semantic-list 9192 . 9204) (punctuation 9191 . 9192) (punctuation 9189 . 9190) (punctuation 9188 . 9189) (symbol 9171 . 9187) (bol 9169 . 9169) (bol 9110 . 9110) (ENDIF 9099 . 9104) (bol 9097 . 9097) (semantic-list 9084 . 9096) (punctuation 9083 . 9084) (semantic-list 9072 . 9082) (punctuation 9071 . 9072) (punctuation 9069 . 9070) (punctuation 9068 . 9069) (symbol 9051 . 9067) (bol 9047 . 9047) (ELSE 9042 . 9046) (bol 9040 . 9040) (semantic-list 9027 . 9039) (punctuation 9026 . 9027) (semantic-list 9001 . 9025) (punctuation 9000 . 9001) (symbol 8999 . 9000) (semantic-list 8989 . 8999) (punctuation 8988 . 8989) (punctuation 8986 . 8987) (punctuation 8985 . 8986) (symbol 8968 . 8984) (bol 8964 . 8964) (semantic-list 8933 . 8963) (IFEQ 8928 . 8932) (bol 8926 . 8926) (bol 8871 . 8871) (bol 8804 . 8804) (bol 8775 . 8775) (semantic-list 8365 . 8434) (punctuation 8364 . 8365) (bol 8362 . 8362) (semantic-list 8296 . 8316) (punctuation 8295 . 8296) (symbol 8294 . 8295) (semantic-list 8272 . 8294) (punctuation 8271 . 8272) (punctuation 8270 . 8271) (semantic-list 8256 . 8270) (punctuation 8255 . 8256) (symbol 8254 . 8255) (semantic-list 8244 . 8254) (punctuation 8243 . 8244) (symbol 8242 . 8243) (semantic-list 8224 . 8242) (punctuation 8223 . 8224) (punctuation 8221 . 8222) (punctuation 8220 . 8221) (symbol 8203 . 8219) (bol 8201 . 8201) (semantic-list 7845 . 7944) (punctuation 7844 . 7845) (bol 7844 . 7844) (semantic-list 7765 . 7836) (punctuation 7764 . 7765) (bol 7762 . 7762) (semantic-list 7695 . 7715) (punctuation 7694 . 7695) (symbol 7693 . 7694) (semantic-list 7671 . 7693) (punctuation 7670 . 7671) (punctuation 7669 . 7670) (semantic-list 7652 . 7669) (punctuation 7651 . 7652) (symbol 7650 . 7651) (semantic-list 7640 . 7650) (punctuation 7639 . 7640) (symbol 7638 . 7639) (semantic-list 7620 . 7638) (punctuation 7619 . 7620) (punctuation 7618 . 7619) (semantic-list 7603 . 7618) (punctuation 7602 . 7603) (symbol 7601 . 7602) (semantic-list 7585 . 7601) (punctuation 7584 . 7585) (symbol 7583 . 7584) (semantic-list 7568 . 7583) (punctuation 7567 . 7568) (punctuation 7565 . 7566) (punctuation 7564 . 7565) (symbol 7546 . 7563) (bol 7544 . 7544) (ENDIF 7538 . 7543) (bol 7536 . 7536) (semantic-list 7521 . 7535) (punctuation 7520 . 7521) (punctuation 7518 . 7519) (punctuation 7517 . 7518) (symbol 7501 . 7516) (bol 7497 . 7497) (ELSE 7492 . 7496) (bol 7490 . 7490) (semantic-list 7464 . 7489) (punctuation 7463 . 7464) (semantic-list 7438 . 7463) (punctuation 7437 . 7438) (punctuation 7435 . 7436) (punctuation 7434 . 7435) (symbol 7418 . 7433) (bol 7414 . 7414) (bol 7342 . 7342) (bol 7259 . 7259) (semantic-list 7224 . 7258) (IFNEQ 7218 . 7223) (bol 7216 . 7216) (symbol 6214 . 6219) (punctuation 6212 . 6213) (punctuation 6211 . 6212) (symbol 6192 . 6210) (bol 6190 . 6190) (ENDIF 5588 . 5593) (bol 5588 . 5588) (semantic-list 3737 . 3797) (punctuation 3736 . 3737) (punctuation 3726 . 3727) (punctuation 3725 . 3726) (symbol 3700 . 3724) (bol 3698 . 3698) (symbol 3341 . 3345) (punctuation 3339 . 3340) (punctuation 3338 . 3339) (symbol 3305 . 3337) (bol 3303 . 3303) (semantic-list 2438 . 2805) (punctuation 2437 . 2438) (bol 2437 . 2437) (semantic-list 1385 . 2091) (punctuation 1384 . 1385) (bol 1384 . 1384) (semantic-list 1183 . 1341) (punctuation 1182 . 1183) (bol 1182 . 1182) (symbol 1081 . 1086) (bol 1081 . 1081) (semantic-list 940 . 1080) (punctuation 939 . 940) (bol 939 . 939) (symbol 914 . 938) (symbol 907 . 913) (bol 907 . 907) (semantic-list 425 . 439) (punctuation 424 . 425) (punctuation 422 . 423) (punctuation 421 . 422) (symbol 407 . 420) (bol 405 . 405) (semantic-list 393 . 399) (punctuation 392 . 393) (symbol 388 . 392) (punctuation 386 . 387) (punctuation 385 . 386) (symbol 371 . 384) (bol 369 . 369) (bol 316 . 316) (bol 259 . 259)))
    (semanticdb-table "semanticdb-table"
      :file "config.mk"
      :fsize 33924
      :lastmodtime '(22846 29530 33536 711000))
    (semanticdb-table "semanticdb-table"
      :file "sdk_font.mk"
      :fsize 2790
      :lastmodtime '(22846 29530 37536 711000))
    (semanticdb-table "semanticdb-table"
      :file "product-graph.mk"
      :fsize 6303
      :lastmodtime '(22846 29530 37536 711000))
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags nil
      :file "definitions.mk"
      :pointmax 123642
      :fsize 123641
      :lastmodtime '(22846 29530 33536 711000)
      :unmatched-syntax nil))
  :file "!home!chenqi!work!ivio!build!make!core!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
