;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("TARGET_KERNEL_ARCH" variable (:default-value ("x86_64")) nil [746 775])
            ("KERNEL_CONFIG_DIR" variable (:default-value ("device/intel/android_ia/kernel_config")) nil [820 879])
            ("KERNEL_NAME" variable (:default-value ("bzImage")) nil [880 903])
            ("KERNEL_OUT" variable (:default-value ("$(abspath $(TARGET_OUT_INTERMEDIATES)/kernel)")) nil [952 1012])
            ("KERNEL_BIN" variable (:default-value ("$(KERNEL_OUT)/arch/$(TARGET_KERNEL_ARCH)/boot/$(KERNEL_NAME)")) nil [1012 1087])
            ("KERNEL_MODULES_INSTALL" variable (:default-value ("$(PRODUCT_OUT)/$(TARGET_COPY_OUT_VENDOR)/lib/modules")) nil [1087 1166])
            ("KERNELRELEASE" variable (:default-value ("$(shell cat $(KERNEL_OUT)/include/config/kernel.release)")) nil [1167 1240])
            ("build_kernel" variable (:default-value ("$(MAKE)" "-C" "$(TARGET_KERNEL_SRC)" "O=$(KERNEL_OUT)" "ARCH=$(TARGET_KERNEL_ARCH)" "CROSS_COMPILE=\"$(KERNEL_CROSS_COMPILE_WRAPPER)\"" "KCFLAGS=\"$(KERNEL_CFLAGS)\"" "KAFLAGS=\"$(KERNEL_AFLAGS)\"" "$(if $(SHOW_COMMANDS),V=1)" "INSTALL_MOD_PATH=$(abspath \"$(PRODUCT_OUT)/$(TARGET_COPY_OUT_VENDOR)\")")) nil [1241 1560])
            ("KERNEL_CONFIG_FILE" variable (:default-value ("device/intel/android_ia/kernel_config/$(TARGET_KERNEL_CONFIG)")) nil [1561 1645])
            ("KERNEL_CONFIG" variable (:default-value ("$(KERNEL_OUT)/.config")) nil [1646 1685])
            ("$(KERNEL_CONFIG)" function (:arguments ("$(KERNEL_CONFIG_FILE)")) nil [1685 1805])
            ("$(PRODUCT_OUT)" function (:arguments ("$(KERNEL_CONFIG)" "|" "$(ACP)")) nil [1842 1968])
            ("EXTMOD_SRC" variable (:default-value ("../../../../../..")) nil [1969 2001])
            ("TARGET_EXTRA_KERNEL_MODULES" variable (:default-value ("$(EXTMOD_SRC)/kernel/modules/perftools-external/socperfdk/src" "$(EXTMOD_SRC)/kernel/modules/perftools-external/socwatchdk/src")) nil [2001 2157])
            ("ALL_EXTRA_MODULES" variable (:default-value ("$(patsubst %,$(TARGET_OUT_INTERMEDIATES)/kmodule/%,$(TARGET_EXTRA_KERNEL_MODULES))")) nil [2158 2262])
            ("$(ALL_EXTRA_MODULES)" function (:arguments ("$(TARGET_OUT_INTERMEDIATES)/kmodule/%:" "$(PRODUCT_OUT)/kernel")) nil [2262 2430])
            ("$(KERNEL_MODULES_INSTALL)" function (:arguments ("$(PRODUCT_OUT)/kernel" "$(ALL_EXTRA_MODULES)")) nil [2648 3392])
            ("ALL_DEFAULT_INSTALLED_MODULES" variable (:default-value ("$(KERNEL_MODULES_INSTALL)")) nil [3468 3527])
            ("installclean" function (:arguments ("FILES" "+=" "$(KERNEL_OUT)" "$(PRODUCT_OUT)/kernel")) nil [3528 3587])
            (".PHONY" function (:arguments ("kernel")) nil [3588 3603])
            ("kernel" function (:arguments ("$(PRODUCT_OUT)/kernel")) nil [3603 3633])
            ("src_loader_file" variable (:default-value ("$(PRODUCT_OUT)/efi/kernelflinger.efi")) nil [3833 3889])
            ("tgt_loader_file" variable (:default-value ("$(PRODUCT_OUT)/loader.efi")) nil [3889 3934])
            ("out_flashfiles" variable (:default-value ("$(PRODUCT_OUT)/$(TARGET_PRODUCT)-flashfiles-$(BUILD_NUMBER).zip")) nil [4081 4163])
            ("out_flashfiles" variable (:default-value ("$(PRODUCT_OUT)/$(TARGET_PRODUCT).flashfiles.$(TARGET_BUILD_VARIANT).$(USER).zip")) nil [4168 4266])
            ("$(PRODUCT_OUT)" function nil nil [4273 4363])
            ("$(PRODUCT_OUT)" function nil nil [4364 4452])
            ("$(out_flashfiles)" function (:arguments ("$(BOARD_FLASHFILES)" "|" "$(ACP)")) nil [4453 4537])
            (".PHONY" function (:arguments ("flashfiles")) nil [4538 4557])
            ("flashfiles" function (:arguments ("$(out_flashfiles)")) nil [4557 4587])
            ("efi_default_name" variable (:default-value ("bootia32.efi")) nil [4833 4866])
            ("LOADER_TYPE" variable (:default-value ("linux-x86")) nil [4866 4891])
            ("efi_default_name" variable (:default-value ("bootx64.efi")) nil [4896 4928])
            ("LOADER_TYPE" variable (:default-value ("linux-x86_64")) nil [4928 4956])
            ("FILE_NAME_TAG" variable (:default-value ("eng.$(USER)")) nil [5233 5262])
            ("FILE_NAME_TAG" variable (:default-value ("$(BUILD_NUMBER)")) nil [5267 5300])
            ("BOARD_FIRST_STAGE_LOADER" variable (:default-value ("$(PRODUCT_OUT)/efi/kernelflinger.efi")) nil [5307 5372])
            ("BOARD_EXTRA_EFI_MODULES" variable nil nil [5372 5399])
            ("intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,bootloader_zip)")) nil [5728 5800])
            ("bootloader_zip" variable (:default-value ("$(intermediates)/bootloader.zip")) nil [5800 5850])
            ("$(bootloader_zip)" function (:arguments ("intermediates" ":=" "$(intermediates)")) nil [5850 5903])
            ("$(bootloader_zip)" function (:arguments ("efi_root" ":=" "$(intermediates)/root")) nil [5903 5956])
            ("$(bootloader_zip)" function (:arguments ("$(TARGET_DEVICE_DIR)/AndroidBoard.mk" "$(BOARD_FIRST_STAGE_LOADER)" "$(BOARD_EXTRA_EFI_MODULES)" "$(BOARD_SFU_UPDATE)" "|" "$(ACP)")) nil [5956 6330])
            ("bootloader_info" variable (:default-value ("$(intermediates)/bootloader_image_info.txt")) nil [6893 6955])
            ("$(bootloader_info)" function nil nil [6955 7128])
            ("INSTALLED_RADIOIMAGE_TARGET" variable (:default-value ("$(bootloader_zip)" "$(bootloader_info)")) nil [7129 7197])
            ("BOOTLOADER_FROM_ZIP" variable (:default-value ("device/intel/build/bootloader_from_zip")) nil [7288 7349])
            ("bootloader_bin" variable (:default-value ("$(PRODUCT_OUT)/bootloader")) nil [7350 7394])
            ("$(bootloader_bin)" function (:arguments ("$(bootloader_zip)" "$(IMG2SIMG)" "$(BOOTLOADER_ADDITIONAL_DEPS)" "$(BOOTLOADER_FROM_ZIP)")) nil [7394 7715])
            ("droidcore" function (:arguments ("$(bootloader_bin)")) nil [7716 7745])
            (".PHONY" function (:arguments ("bootloader")) nil [7746 7765])
            ("bootloader" function (:arguments ("$(bootloader_bin)")) nil [7765 7795])
            ("fastboot_usb_bin" variable (:default-value ("$(PRODUCT_OUT)/fastboot-usb.img")) nil [7893 7945])
            ("$(fastboot_usb_bin)" function (:arguments ("$(bootloader_zip)" "$(BOOTLOADER_ADDITIONAL_DEPS)" "$(BOOTLOADER_FROM_ZIP)")) nil [7945 8198])
            ("droidcore" function (:arguments ("$(fastboot_usb_bin)")) nil [8239 8270])
            (".PHONY" function (:arguments ("fastboot-usb")) nil [8271 8292])
            ("fastboot-usb" function (:arguments ("$(fastboot_usb_bin)")) nil [8292 8326])
            ("GEN_BLPOLICY_OEMVARS" variable (:default-value ("device/intel/build/generate_blpolicy_oemvars")) nil [9010 9079])
            ("TARGET_ODM_KEY_PAIR" variable (:default-value ("device/intel/build/testkeys/odm")) nil [9079 9134])
            ("TARGET_OAK_KEY_PAIR" variable (:default-value ("device/intel/build/testkeys/OAK")) nil [9134 9189])
            ("$(BOOTLOADER_POLICY_OEMVARS)" function (:arguments ("sign-efi-sig-list")) nil [9190 9392])
            ("device/intel/android_ia/common/audio/AndroidBoard.mk" include nil nil [9639 9700])
            ("INSTALLED_CONFIGIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/config.img")) nil [9904 9962])
            ("$(INSTALLED_CONFIGIMAGE_TARGET)" function (:arguments ("$(MKEXTUSERIMG)" "$(MAKE_EXT4FS)" "$(E2FSCK)")) nil [9963 10293])
            ("INSTALLED_RADIOIMAGE_TARGET" variable (:default-value ("$(INSTALLED_CONFIGIMAGE_TARGET)")) nil [10294 10357])
            ("$(PRODUCT_OUT)" function (:arguments ("$(KERNEL_MODULES_INSTALL)")) nil [10647 10701])
            ("INSTALLED_FACTORYIMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/factory.img")) nil [10903 10963])
            ("$(INSTALLED_FACTORYIMAGE_TARGET)" function (:arguments ("$(MKEXTUSERIMG)" "$(MAKE_EXT4FS)" "$(E2FSCK)")) nil [11175 11509])
            (".PHONY" function (:arguments ("factoryimage")) nil [11617 11638])
            ("factoryimage" function (:arguments ("$(INSTALLED_FACTORYIMAGE_TARGET)")) nil [11638 11685])
            ("ff_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,flashfiles)")) nil [12620 12691])
            ("ff_config" variable (:default-value ("$(ff_intermediates)/flashfiles.ini")) nil [12775 12823])
            ("$(ff_config)" function (:arguments ("$(FLASHFILES_CONFIG)" "|" "$(ACP)")) nil [12823 12891])
            ("INSTALLED_RADIOIMAGE_TARGET" variable (:default-value ("$(ff_config)")) nil [12944 12988])
            ("ff_intermediates" variable (:default-value ("$(call intermediates-dir-for,PACKAGING,flashfiles)")) nil [13211 13282])
            ("provdata_zip" variable (:default-value ("$(ff_intermediates)/provdata.zip")) nil [13282 13331])
            ("provdata_zip_deps" variable (:default-value ("$(foreach pair,$(BOARD_FLASHFILES),$(call word-colon,1,$(pair)))")) nil [13331 13417])
            ("ff_root" variable (:default-value ("$(ff_intermediates)/root")) nil [13417 13453])
            ("provdata_zip" variable nil nil [13978 13994])
            ("$(provdata_zip)" function (:arguments ("$(provdata_zip_deps)" "|" "$(ACP)")) nil [14516 14591])
            ("INSTALLED_RADIOIMAGE_TARGET" variable (:default-value ("$(provdata_zip)")) nil [14593 14640])
            ("TOS_IMAGE_TARGET" variable (:default-value ("$(TRUSTY_BUILDROOT)/ikgt_pkg.bin")) nil [14832 14885])
            ("INTERNAL_PLATFORM" variable (:default-value ("glv")) nil [14886 14911])
            ("LOCAL_MAKE" variable (:default-value ("make")) nil [14911 14930])
            (".PHONY" function (:arguments ("$(TOS_IMAGE_TARGET)")) nil [14967 14995])
            ("$(TOS_IMAGE_TARGET)" function nil nil [14995 15246])
            ("INSTALLED_TOS_IMAGE_TARGET" variable (:default-value ("$(PRODUCT_OUT)/tos.img")) nil [15285 15338])
            ("TOS_SIGNING_KEY" variable (:default-value ("$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).pk8")) nil [15338 15420])
            ("TOS_SIGNING_CERT" variable (:default-value ("$(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VERITY_SIGNING_KEY).x509.pem")) nil [15420 15508])
            (".PHONY" function (:arguments ("tosimage")) nil [15509 15526])
            ("tosimage" function (:arguments ("$(INSTALLED_TOS_IMAGE_TARGET)")) nil [15526 15566])
            ("$(INSTALLED_TOS_IMAGE_TARGET)" function (:arguments ("$(TOS_IMAGE_TARGET)" "$(MKBOOTIMG)" "$(BOOT_SIGNER)")) nil [15566 15958])
            ("INSTALLED_RADIOIMAGE_TARGET" variable (:default-value ("$(INSTALLED_TOS_IMAGE_TARGET)")) nil [15959 16020]))          
      :file "AndroidBoard.mk"
      :pointmax 16083
      :fsize 16078
      :lastmodtime '(22855 11528 548271 878000)
      :unmatched-syntax '((semantic-list 14407 . 14508) (punctuation 14406 . 14407) (bol 14406 . 14406) (semantic-list 14350 . 14405) (punctuation 14349 . 14350) (bol 14349 . 14349) (semantic-list 13995 . 14343) (punctuation 13994 . 13995) (bol 13994 . 13994) (symbol 13940 . 13945) (bol 13940 . 13940) (symbol 13937 . 13939) (semantic-list 13929 . 13937) (punctuation 13928 . 13929) (symbol 13923 . 13928) (semantic-list 13905 . 13923) (punctuation 13904 . 13905) (semantic-list 13900 . 13903) (punctuation 13899 . 13900) (symbol 13895 . 13898) (symbol 13891 . 13894) (semantic-list 13884 . 13890) (punctuation 13883 . 13884) (bol 13883 . 13883) (semantic-list 13720 . 13882) (punctuation 13719 . 13720) (bol 13719 . 13719) (semantic-list 13710 . 13718) (punctuation 13709 . 13710) (symbol 13704 . 13709) (semantic-list 13686 . 13704) (punctuation 13685 . 13686) (symbol 13682 . 13684) (symbol 13676 . 13681) (semantic-list 13669 . 13675) (punctuation 13668 . 13669) (bol 13668 . 13668) (semantic-list 13659 . 13667) (punctuation 13658 . 13659) (symbol 13653 . 13658) (semantic-list 13635 . 13653) (punctuation 13634 . 13635) (symbol 13630 . 13633) (symbol 13627 . 13629) (semantic-list 13620 . 13626) (punctuation 13619 . 13620) (bol 13619 . 13619) (semantic-list 13615 . 13618) (punctuation 13614 . 13615) (symbol 13611 . 13613) (symbol 13608 . 13610) (semantic-list 13601 . 13607) (punctuation 13600 . 13601) (bol 13600 . 13600) (semantic-list 13537 . 13599) (punctuation 13536 . 13537) (bol 13536 . 13536) (symbol 13520 . 13535) (symbol 13513 . 13519) (bol 13513 . 13513) (symbol 13506 . 13511) (bol 13506 . 13506) (semantic-list 13501 . 13504) (punctuation 13500 . 13501) (semantic-list 13496 . 13499) (punctuation 13495 . 13496) (symbol 13491 . 13494) (semantic-list 13485 . 13490) (punctuation 13484 . 13485) (semantic-list 13477 . 13483) (punctuation 13476 . 13477) (bol 13476 . 13476) (symbol 13461 . 13475) (symbol 13454 . 13460) (bol 13454 . 13454) (semantic-list 12991 . 13098) (punctuation 12990 . 12991) (bol 12990 . 12990) (semantic-list 12893 . 12942) (punctuation 12892 . 12893) (bol 12892 . 12892) (symbol 12419 . 12424) (bol 12419 . 12419) (semantic-list 12237 . 12418) (punctuation 12236 . 12237) (semantic-list 12192 . 12233) (punctuation 12191 . 12192) (bol 12191 . 12191) (symbol 12172 . 12190) (symbol 12165 . 12171) (bol 12165 . 12165) (semantic-list 8543 . 8628) (punctuation 8542 . 8543) (bol 8542 . 8542) (semantic-list 8433 . 8541) (punctuation 8432 . 8433) (bol 8432 . 8432) (semantic-list 8328 . 8431) (punctuation 8327 . 8328) (bol 8327 . 8327) (semantic-list 7796 . 7891) (punctuation 7795 . 7796) (bol 7795 . 7795) (shell-command 6837 . 6891) (bol 6836 . 6836) (shell-command 6749 . 6835) (bol 6748 . 6748) (shell-command 6662 . 6747) (bol 6661 . 6661) (shell-command 6577 . 6660) (bol 6576 . 6576) (shell-command 6510 . 6575) (bol 6509 . 6509) (symbol 6482 . 6502) (semantic-list 6472 . 6482) (punctuation 6471 . 6472) (semantic-list 6452 . 6470) (punctuation 6451 . 6452) (semantic-list 6445 . 6450) (punctuation 6444 . 6445) (semantic-list 6437 . 6443) (punctuation 6436 . 6437) (bol 6428 . 6428) (symbol 6413 . 6427) (semantic-list 6403 . 6413) (punctuation 6402 . 6403) (semantic-list 6383 . 6401) (punctuation 6382 . 6383) (semantic-list 6376 . 6381) (punctuation 6375 . 6376) (semantic-list 6368 . 6374) (punctuation 6367 . 6368) (bol 6359 . 6359) (string 5093 . 5126) (string 5090 . 5092) (IFNEQ 5084 . 5089) (bol 5084 . 5084) (symbol 4049 . 4054) (bol 4049 . 4049) (semantic-list 4031 . 4048) (punctuation 4030 . 4031) (semantic-list 4026 . 4029) (punctuation 4025 . 4026) (semantic-list 4021 . 4024) (punctuation 4020 . 4021) (symbol 4016 . 4019) (symbol 4012 . 4015) (bol 4012 . 4012) (semantic-list 3963 . 4011) (punctuation 3962 . 3963) (bol 3962 . 3962) (symbol 3942 . 3961) (symbol 3935 . 3941) (bol 3935 . 3935) (symbol 799 . 818) (punctuation 797 . 798) (punctuation 796 . 797) (symbol 775 . 795) (bol 775 . 775) (symbol 727 . 744) (punctuation 725 . 726) (punctuation 724 . 725) (symbol 706 . 723) (bol 706 . 706) (semantic-list 620 . 698) (punctuation 619 . 620) (bol 619 . 619) (shell-command 339 . 386) (bol 338 . 338) (shell-command 339 . 386) (bol 338 . 338) (semantic-list 14403 . 14504) (punctuation 14402 . 14403) (bol 14402 . 14402) (semantic-list 14346 . 14401) (punctuation 14345 . 14346) (bol 14345 . 14345) (semantic-list 13991 . 14339) (punctuation 13990 . 13991) (bol 13990 . 13990) (symbol 13936 . 13941) (bol 13936 . 13936) (symbol 13933 . 13935) (semantic-list 13925 . 13933) (punctuation 13924 . 13925) (symbol 13919 . 13924) (semantic-list 13901 . 13919) (punctuation 13900 . 13901) (semantic-list 13896 . 13899) (punctuation 13895 . 13896) (symbol 13891 . 13894) (symbol 13887 . 13890) (semantic-list 13880 . 13886) (punctuation 13879 . 13880) (bol 13879 . 13879) (semantic-list 13716 . 13878) (punctuation 13715 . 13716) (bol 13715 . 13715) (semantic-list 13706 . 13714) (punctuation 13705 . 13706) (symbol 13700 . 13705) (semantic-list 13682 . 13700) (punctuation 13681 . 13682) (symbol 13678 . 13680) (symbol 13672 . 13677) (semantic-list 13665 . 13671) (punctuation 13664 . 13665) (bol 13664 . 13664) (semantic-list 13655 . 13663) (punctuation 13654 . 13655) (symbol 13649 . 13654) (semantic-list 13631 . 13649) (punctuation 13630 . 13631) (symbol 13626 . 13629) (symbol 13623 . 13625) (semantic-list 13616 . 13622) (punctuation 13615 . 13616) (bol 13615 . 13615) (semantic-list 13611 . 13614) (punctuation 13610 . 13611) (symbol 13607 . 13609) (symbol 13604 . 13606) (semantic-list 13597 . 13603) (punctuation 13596 . 13597) (bol 13596 . 13596) (semantic-list 13533 . 13595) (punctuation 13532 . 13533) (bol 13532 . 13532) (symbol 13516 . 13531) (symbol 13509 . 13515) (bol 13509 . 13509) (symbol 13502 . 13507) (bol 13502 . 13502) (semantic-list 13497 . 13500) (punctuation 13496 . 13497) (semantic-list 13492 . 13495) (punctuation 13491 . 13492) (symbol 13487 . 13490) (semantic-list 13481 . 13486) (punctuation 13480 . 13481) (semantic-list 13473 . 13479) (punctuation 13472 . 13473) (bol 13472 . 13472) (symbol 13457 . 13471) (symbol 13450 . 13456) (bol 13450 . 13450) (semantic-list 12987 . 13094) (punctuation 12986 . 12987) (bol 12986 . 12986) (semantic-list 12889 . 12938) (punctuation 12888 . 12889) (bol 12888 . 12888) (symbol 12415 . 12420) (bol 12415 . 12415) (semantic-list 12233 . 12414) (punctuation 12232 . 12233) (semantic-list 12188 . 12229) (punctuation 12187 . 12188) (bol 12187 . 12187) (symbol 12168 . 12186) (symbol 12161 . 12167) (bol 12161 . 12161) (semantic-list 8539 . 8624) (punctuation 8538 . 8539) (bol 8538 . 8538) (semantic-list 8429 . 8537) (punctuation 8428 . 8429) (bol 8428 . 8428) (semantic-list 8324 . 8427) (punctuation 8323 . 8324) (bol 8323 . 8323) (semantic-list 7792 . 7887) (punctuation 7791 . 7792) (bol 7791 . 7791) (shell-command 6833 . 6887) (bol 6832 . 6832) (shell-command 6745 . 6831) (bol 6744 . 6744) (shell-command 6658 . 6743) (bol 6657 . 6657) (shell-command 6573 . 6656) (bol 6572 . 6572) (shell-command 6506 . 6571) (bol 6505 . 6505) (symbol 6478 . 6498) (semantic-list 6468 . 6478) (punctuation 6467 . 6468) (semantic-list 6448 . 6466) (punctuation 6447 . 6448) (semantic-list 6441 . 6446) (punctuation 6440 . 6441) (semantic-list 6433 . 6439) (punctuation 6432 . 6433) (bol 6424 . 6424) (symbol 6409 . 6423) (semantic-list 6399 . 6409) (punctuation 6398 . 6399) (semantic-list 6379 . 6397) (punctuation 6378 . 6379) (semantic-list 6372 . 6377) (punctuation 6371 . 6372) (semantic-list 6364 . 6370) (punctuation 6363 . 6364) (bol 6355 . 6355) (string 5089 . 5122) (string 5086 . 5088) (IFNEQ 5080 . 5085) (bol 5080 . 5080) (symbol 4045 . 4050) (bol 4045 . 4045) (semantic-list 4027 . 4044) (punctuation 4026 . 4027) (semantic-list 4022 . 4025) (punctuation 4021 . 4022) (semantic-list 4017 . 4020) (punctuation 4016 . 4017) (symbol 4012 . 4015) (symbol 4008 . 4011) (bol 4008 . 4008) (semantic-list 3959 . 4007) (punctuation 3958 . 3959) (bol 3958 . 3958) (symbol 3938 . 3957) (symbol 3931 . 3937) (bol 3931 . 3931) (symbol 795 . 814) (punctuation 793 . 794) (punctuation 792 . 793) (symbol 771 . 791) (bol 771 . 771) (symbol 723 . 740) (punctuation 721 . 722) (punctuation 720 . 721) (symbol 702 . 719) (bol 702 . 702) (semantic-list 616 . 694) (punctuation 615 . 616) (bol 615 . 615))))
  :file "!home!chenqi!work!aia_internal!device!intel!android_ia!androidia_64!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
