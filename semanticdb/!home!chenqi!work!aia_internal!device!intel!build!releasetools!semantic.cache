;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("tempfile" include nil nil [606 621])
            ("errno" include nil nil [622 638])
            ("os" include nil nil [622 638])
            ("sys" include nil nil [639 649])
            ("subprocess" include nil nil [650 667])
            ("shlex" include nil nil [668 680])
            ("shutil" include nil nil [681 694])
            ("imp" include nil nil [695 705])
            ("time" include nil nil [706 717])
            ("collections" include nil nil [718 736])
            ("fnmatch" include nil nil [737 751])
            ("time" include nil nil [752 763])
            ("json" include nil nil [764 775])
            ("zipfile" include nil nil [776 790])
            ("re" include nil nil [791 800])
            ("random" include nil nil [801 814])
            ("cStringIO" include nil nil [815 845])
            ("sys" code nil nil [847 890])
            ("common" include nil nil [891 904])
            ("load_device_mapping" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [931 935]))              ) nil [907 1183])
            ("load_device_mapping_from_tfp" function (:arguments 
              ( ("tfp_path" variable nil (reparse-symbol function_parameters) [1218 1226]))              ) nil [1185 1358])
            ("der_pub_from_pem_cert" function (:arguments 
              ( ("cert_path" variable nil (reparse-symbol function_parameters) [1386 1395]))              ) nil [1360 2013])
            ("pem_cert_to_der_cert" function (:arguments 
              ( ("pem_cert_path" variable nil (reparse-symbol function_parameters) [2040 2053]))              ) nil [2015 2435])
            ("pk8_to_pem" function (:arguments 
              ( ("der_key_path" variable nil (reparse-symbol function_parameters) [2452 2464])
                ("password" variable nil (reparse-symbol function_parameters) [2466 2474])
                ("none_on_fail_convert" variable nil (reparse-symbol function_parameters) [2481 2501]))              ) nil [2437 3670])
            ("WriteFileToDest" function
               (:documentation "Write common.File to destination"
                :arguments 
                  ( ("img" variable nil (reparse-symbol function_parameters) [3692 3695])
                    ("dest" variable nil (reparse-symbol function_parameters) [3697 3701]))                  )
                nil [3672 3829])
            ("patch_or_verbatim_exists" function (:arguments 
              ( ("filepath" variable nil (reparse-symbol function_parameters) [3860 3868])
                ("ota_zip" variable nil (reparse-symbol function_parameters) [3870 3877]))              ) nil [3831 4012])
            ("AddFWImageFile" function (:arguments 
              ( ("input_dir" variable nil (reparse-symbol function_parameters) [4033 4042])
                ("output_zip" variable nil (reparse-symbol function_parameters) [4044 4054])
                ("variant" variable nil (reparse-symbol function_parameters) [4056 4063]))              ) nil [4014 4491])
            ("readfile_from_provdata" function (:arguments 
              ( ("tmpdir" variable nil (reparse-symbol function_parameters) [4519 4525])
                ("path" variable nil (reparse-symbol function_parameters) [4527 4531])
                ("variant" variable nil (reparse-symbol function_parameters) [4533 4540]))              ) nil [4492 4937])
            ("ComputeFWUpdatePatches" function (:arguments 
              ( ("source_tfp_dir" variable nil (reparse-symbol function_parameters) [4966 4980])
                ("target_tfp_dir" variable nil (reparse-symbol function_parameters) [4982 4996])
                ("variant" variable nil (reparse-symbol function_parameters) [4998 5005])
                ("existing_ota_zip" variable nil (reparse-symbol function_parameters) [5041 5057]))              ) nil [4939 6334])
            ("ComputeBootloaderPatch" function (:arguments 
              ( ("source_tfp_dir" variable nil (reparse-symbol function_parameters) [6363 6377])
                ("target_tfp_dir" variable nil (reparse-symbol function_parameters) [6379 6393])
                ("variant" variable nil (reparse-symbol function_parameters) [6395 6402])
                ("base_variant" variable nil (reparse-symbol function_parameters) [6436 6448])
                ("existing_ota_zip" variable nil (reparse-symbol function_parameters) [6455 6471]))              ) nil [6336 8392])
            ("LoadBootloaderFiles" function (:arguments 
              ( ("tfpdir" variable nil (reparse-symbol function_parameters) [8418 8424])
                ("extra_files" variable nil (reparse-symbol function_parameters) [8426 8437])
                ("variant" variable nil (reparse-symbol function_parameters) [8444 8451])
                ("base_variant" variable nil (reparse-symbol function_parameters) [8458 8470]))              ) nil [8394 9555])
            ("GetBootloaderImageFromTFP" function (:arguments 
              ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [9587 9597])
                ("autosize" variable nil (reparse-symbol function_parameters) [9599 9607])
                ("extra_files" variable nil (reparse-symbol function_parameters) [9615 9626])
                ("variant" variable nil (reparse-symbol function_parameters) [9633 9640])
                ("base_variant" variable nil (reparse-symbol function_parameters) [9647 9659]))              ) nil [9557 12278])
            ("GetBootloaderInfo" function (:arguments 
              ( ("info_dir" variable nil (reparse-symbol function_parameters) [12301 12309])
                ("autosize" variable nil (reparse-symbol function_parameters) [12311 12319]))              ) nil [12279 12827])
            ("GetBootloaderImageFromOut" function (:arguments 
              ( ("product_out" variable nil (reparse-symbol function_parameters) [12858 12869])
                ("intermediate_dir" variable nil (reparse-symbol function_parameters) [12871 12887])
                ("filename" variable nil (reparse-symbol function_parameters) [12889 12897])
                ("autosize" variable nil (reparse-symbol function_parameters) [12899 12907])
                ("extra_files" variable nil (reparse-symbol function_parameters) [12915 12926]))              ) nil [12828 13644])
            ("MakeVFATFilesystem" function
               (:documentation "Create a VFAT filesystem image with all the files in the provided
    root zipfile. The size of the filesystem, if not provided by the
    caller, will be 101% the size of the containing files"
                :arguments 
                  ( ("root_zip" variable nil (reparse-symbol function_parameters) [13668 13676])
                    ("filename" variable nil (reparse-symbol function_parameters) [13678 13686])
                    ("title" variable nil (reparse-symbol function_parameters) [13688 13693])
                    ("size" variable nil (reparse-symbol function_parameters) [13707 13711])
                    ("block_size" variable nil (reparse-symbol function_parameters) [13715 13725])
                    ("extra_size" variable nil (reparse-symbol function_parameters) [13732 13742])
                    ("extra_files" variable nil (reparse-symbol function_parameters) [13754 13765])
                    ("zipped" variable nil (reparse-symbol function_parameters) [13770 13776]))                  )
                nil [13645 15532])
            ("GetTdosImage" function (:arguments 
              ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [15551 15561])
                ("info_dict" variable nil (reparse-symbol function_parameters) [15563 15572]))              ) nil [15534 18140])
            ("GetFastbootImage" function
               (:documentation "Return a File object 'fastboot.img' with the Fastboot boot image.
    It will either be fetched from RADIO/fastboot.img or built
    using RADIO/ufb_ramdisk.zip, RADIO/ufb_cmdline, and BOOT/kernel"
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [18163 18173])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [18175 18184]))                  )
                nil [18142 21859])
            ("PutFatFile" function (:arguments 
              ( ("fat_img" variable nil (reparse-symbol function_parameters) [21876 21883])
                ("in_path" variable nil (reparse-symbol function_parameters) [21885 21892])
                ("out_path" variable nil (reparse-symbol function_parameters) [21894 21902]))              ) nil [21861 22240])
            ("add_dir_to_path" function
               (:documentation "
    I add a directory to the PATH environment variable, if not already in the
    path.  By default it gets added to the end of the PATH
    "
                :arguments 
                  ( ("dir_name" variable nil (reparse-symbol function_parameters) [22262 22270])
                    ("end" variable nil (reparse-symbol function_parameters) [22272 22275]))                  )
                nil [22242 22824])
            ("init_t2f_dict" function (:arguments 
              ( ("t2f_list" variable nil (reparse-symbol function_parameters) [22906 22914]))              ) nil [22888 23035])
            ("get_tag" function (:arguments 
              ( ("target" variable nil (reparse-symbol function_parameters) [23049 23055]))              ) nil [23037 23259])
            ("get_psi" function (:arguments 
              ( ("dir" variable nil (reparse-symbol function_parameters) [23273 23276])
                ("t2f" variable nil (reparse-symbol function_parameters) [23278 23281]))              ) nil [23261 23512])
            ("check_signed_fls" function (:arguments 
              ( ("target" variable nil (reparse-symbol function_parameters) [23535 23541]))              ) nil [23514 23732])
            ("run_cmd" function (:arguments 
              ( ("cmd" variable nil (reparse-symbol function_parameters) [23746 23749]))              ) nil [23734 24004])
            ("run_fls" function (:arguments 
              ( ("flstool" variable nil (reparse-symbol function_parameters) [24018 24025])
                ("prg" variable nil (reparse-symbol function_parameters) [24027 24030])
                ("output" variable nil (reparse-symbol function_parameters) [24032 24038])
                ("tag" variable nil (reparse-symbol function_parameters) [24040 24043])
                ("infile" variable nil (reparse-symbol function_parameters) [24045 24051])
                ("psi" variable nil (reparse-symbol function_parameters) [24053 24056])
                ("eblsec" variable nil (reparse-symbol function_parameters) [24058 24064]))              ) nil [24006 24362])
            ("sign_fls" function (:arguments 
              ( ("flstool" variable nil (reparse-symbol function_parameters) [24377 24384])
                ("sign" variable nil (reparse-symbol function_parameters) [24386 24390])
                ("script" variable nil (reparse-symbol function_parameters) [24392 24398])
                ("output" variable nil (reparse-symbol function_parameters) [24400 24406])
                ("psi" variable nil (reparse-symbol function_parameters) [24408 24411])
                ("eblsec" variable nil (reparse-symbol function_parameters) [24413 24419]))              ) nil [24364 24687])
            ("build_fls" function
               (:documentation "Build fls flash file out of tfp"
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [24703 24713])
                    ("target" variable nil (reparse-symbol function_parameters) [24715 24721])
                    ("variant" variable nil (reparse-symbol function_parameters) [24723 24730]))                  )
                nil [24689 26183])
            ("build_fls_out" function
               (:documentation "Build fls flash file from raw out folder"
                :arguments 
                  ( ("product_out" variable nil (reparse-symbol function_parameters) [26203 26214])
                    ("intermediate_dir" variable nil (reparse-symbol function_parameters) [26216 26232])
                    ("target" variable nil (reparse-symbol function_parameters) [26234 26240])
                    ("outfile" variable nil (reparse-symbol function_parameters) [26242 26249])
                    ("variant" variable nil (reparse-symbol function_parameters) [26251 26258]))                  )
                nil [26185 27003])
            ("escaped_value" function (:arguments 
              ( ("value" variable nil (reparse-symbol function_parameters) [27022 27027]))              ) nil [27004 27126])
            ("get_efi_sig_list" function (:arguments 
              ( ("pem_cert" variable nil (reparse-symbol function_parameters) [27149 27157])
                ("guid_str" variable nil (reparse-symbol function_parameters) [27159 27167])
                ("name" variable nil (reparse-symbol function_parameters) [27169 27173]))              ) nil [27128 27498])
            ("get_auth_data" function (:arguments 
              ( ("timestamp" variable nil (reparse-symbol function_parameters) [27518 27527])
                ("sign_pair" variable nil (reparse-symbol function_parameters) [27529 27538])
                ("password" variable nil (reparse-symbol function_parameters) [27540 27548])
                ("pem_cert" variable nil (reparse-symbol function_parameters) [27550 27558])
                ("guid_str" variable nil (reparse-symbol function_parameters) [27560 27568])
                ("name" variable nil (reparse-symbol function_parameters) [27570 27574])
                ("payload" variable nil (reparse-symbol function_parameters) [27576 27583]))              ) nil [27500 28382])
            ("get_bootloader_list" function
               (:documentation " Return an sorted list of the bootloader components by parsing the
        flashfiles_fls.json file. "
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [28408 28418]))                  )
                nil [28384 29101])
            ("get_partition_target_hash" function
               (:documentation " Return a hash comprising of the mapping of partition name
        to target name. "
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [29133 29143]))                  )
                nil [29103 29902])
            ("get_provdata_variants" function
               (:documentation " Return a list of variants for a TFP. "
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [29930 29940]))                  )
                nil [29904 30382])
            ("CheckIfSocEFI" function
               (:documentation " Non-EFI SOC (Sofia and its variants), have fftf_build.opt file
    in the provdata which is used to check if the DUT is efi or not.
    If the variant is not provided as an option, get the variant list
    and read the fftf_build.opt in the first variant in the list.
    For Sofia SOC also use SECPACK_IN_SLB = true to check if is sofialte "
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [30402 30412])
                    ("variant" variable nil (reparse-symbol function_parameters) [30414 30421]))                  )
                nil [30384 31703])
            ("GenerateBootloaderSecbin" function
               (:documentation " Generate bootloader with secpack for Non-EFI(example Sofialte); The partitions are
    obtained from get_bootloader_list() in GetBootloaderImagesfromFls.
    use tool binary_merge to generate Merged.secbin with SecureBlock.bin + LoadMap.bin
    "
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [31733 31743])
                    ("variant" variable nil (reparse-symbol function_parameters) [31745 31752]))                  )
                nil [31704 33085])
            ("GetBootloaderImagesfromFls" function
               (:documentation " Non-EFI bootloaders (example Sofia and its variants), comprise of
    various partitions. The partitions are obtained from get_bootloader_list().
    Extract and return the *LoadMap.bin files from the *.fls files. "
                :arguments 
                  ( ("unpack_dir" variable nil (reparse-symbol function_parameters) [33117 33127])
                    ("variant" variable nil (reparse-symbol function_parameters) [33129 33136]))                  )
                nil [33086 35915]))          
      :file "intel_common.py"
      :pointmax 35915
      :fsize 35914
      :lastmodtime '(22847 45166 59060 602000)
      :unmatched-syntax '((INDENT_BLOCK 34333 . 34434) (NEWLINE 34332 . 34333) (COLON 34331 . 34332) (TRY 34263 . 34266) (AS 34325 . 34327) (INDENT_BLOCK 32920 . 33013) (NEWLINE 32919 . 32920) (COLON 32918 . 32919) (TRY 32858 . 32861) (AS 32912 . 32914) (INDENT_BLOCK 25893 . 26025) (NEWLINE 25892 . 25893) (COLON 25891 . 25892) (TRY 25802 . 25805) (AS 25885 . 25887) (NAME 24863 . 24875) (IF 24907 . 24909) (ELSE 24918 . 24922) (INDENT_BLOCK 23818 . 23911) (NEWLINE 23817 . 23818) (COLON 23816 . 23817) (TRY 23756 . 23759) (AS 23810 . 23812) (INDENT_BLOCK 22055 . 22148) (NEWLINE 22054 . 22055) (COLON 22053 . 22054) (TRY 21993 . 21996) (AS 22047 . 22049) (INDENT_BLOCK 21497 . 21614) (NEWLINE 21496 . 21497) (COLON 21495 . 21496) (TRY 21372 . 21375) (AS 21489 . 21491) (INDENT_BLOCK 20726 . 20819) (NEWLINE 20725 . 20726) (COLON 20724 . 20725) (TRY 20617 . 20620) (AS 20718 . 20720) (INDENT_BLOCK 19525 . 19654) (NEWLINE 19524 . 19525) (COLON 19523 . 19524) (TRY 19397 . 19400) (AS 19517 . 19519) (INDENT_BLOCK 19239 . 19368) (NEWLINE 19238 . 19239) (COLON 19237 . 19238) (TRY 19151 . 19154) (AS 19231 . 19233) (INDENT_BLOCK 17810 . 17927) (NEWLINE 17809 . 17810) (COLON 17808 . 17809) (TRY 17685 . 17688) (AS 17802 . 17804) (INDENT_BLOCK 17043 . 17136) (NEWLINE 17042 . 17043) (COLON 17041 . 17042) (TRY 16934 . 16937) (AS 17035 . 17037) (INDENT_BLOCK 15225 . 15318) (NEWLINE 15224 . 15225) (COLON 15223 . 15224) (TRY 15163 . 15166) (AS 15217 . 15219))))
  :file "!home!chenqi!work!aia_internal!device!intel!build!releasetools!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
