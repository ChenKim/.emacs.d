;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("stdint.h" include (:system-flag t) nil [2 21])
            ("UINT64" type
               (:typedef ("uint64_t" type (:type "class") nil nil)
                :type "typedef")
                nil [128 154])
            ("INT64" type
               (:typedef ("int64_t" type (:type "class") nil nil)
                :type "typedef")
                nil [155 180])
            ("UINT32" type
               (:typedef ("uint32_t" type (:type "class") nil nil)
                :type "typedef")
                nil [182 208])
            ("INT32" type
               (:typedef ("int32_t" type (:type "class") nil nil)
                :type "typedef")
                nil [209 234])
            ("UINT16" type
               (:typedef ("uint16_t" type (:type "class") nil nil)
                :type "typedef")
                nil [236 262])
            ("INT16" type
               (:typedef ("int16_t" type (:type "class") nil nil)
                :type "typedef")
                nil [263 288])
            ("UINT8" type
               (:typedef ("uint8_t" type (:type "class") nil nil)
                :type "typedef")
                nil [289 314])
            ("INT8" type
               (:typedef ("int8_t" type (:type "class") nil nil)
                :type "typedef")
                nil [315 339])
            ("WCHAR" type
               (:typedef ("int")
                :type "typedef")
                nil [340 369])
            ("VOID" variable (:constant-flag t) nil [391 395])
            ("INTN" type
               (:typedef ("int64_t" type (:type "class") nil nil)
                :type "typedef")
                nil [405 429])
            ("UINTN" type
               (:typedef ("uint64_t" type (:type "class") nil nil)
                :type "typedef")
                nil [430 455])
            ("EFIERR" variable (:constant-flag t) nil [465 471])
            ("EFI_ERROR_MASK" variable (:constant-flag t) nil [518 532])
            ("EFIERR_OEM" variable (:constant-flag t) nil [565 575])
            ("BAD_POINTER" variable (:constant-flag t) nil [619 630])
            ("MAX_ADDRESS" variable (:constant-flag t) nil [666 677])
            ("BREAKPOINT" variable (:constant-flag t) nil [714 724])
            ("MIN_ALIGNMENT_SIZE" variable (:constant-flag t) nil [855 873])
            ("ALIGN_VARIABLE" variable (:constant-flag t) nil [886 900])
            ("EFI_SIGNATURE_16" variable (:constant-flag t) nil [1246 1262])
            ("EFI_SIGNATURE_32" variable (:constant-flag t) nil [1303 1319])
            ("EFI_SIGNATURE_64" variable (:constant-flag t) nil [1409 1425])
            ("EFIAPI" variable (:constant-flag t) nil [1996 2002])
            ("BOOTSERVICE" variable (:constant-flag t) nil [2082 2093])
            ("RUNTIMESERVICE" variable (:constant-flag t) nil [2102 2116])
            ("RUNTIMEFUNCTION" variable (:constant-flag t) nil [2125 2140])
            ("RUNTIME_CODE" variable (:constant-flag t) nil [2151 2163])
            ("BEGIN_RUNTIME_DATA" variable (:constant-flag t) nil [2207 2225])
            ("END_RUNTIME_DATA" variable (:constant-flag t) nil [2258 2274])
            ("VOLATILE" variable (:constant-flag t) nil [2304 2312])
            ("MEMORY_FENCE" variable (:constant-flag t) nil [2346 2358])
            ("EFI_DRIVER_ENTRY_POINT" variable (:constant-flag t) nil [2487 2509])
            ("LOAD_INTERNAL_DRIVER" variable (:constant-flag t) nil [3284 3304])
            ("INTERFACE_DECL" variable (:constant-flag t) nil [3548 3562])
            ("uefi_call_wrapper" variable (:constant-flag t) nil [3584 3601])
            ("EFI_FUNCTION" variable (:constant-flag t) nil [3647 3659]))          
      :file "efibind.h"
      :pointmax 3660
      :fsize 3659
      :lastmodtime '(22781 19620 90155 229000)
      :unmatched-syntax nil
      :lexical-table 
        '(("MAX_ADDRESS" . ((number "0xFFFFFFFFFFFFFFFF" 686 . 704)))
          ("EFI_SIGNATURE_32" (spp-arg-list ("A" "B" "C" "D") 1319 . 1328) . ((semantic-list "(EFI_SIGNATURE_16(A,B)     | (EFI_SIGNATURE_16(C,D)     << 16))" 1337 . 1400)))
          ("EFI_DRIVER_ENTRY_POINT" (spp-arg-list ("InitFunction") 2509 . 2523) . 
              ((symbol "UINTN" 2533 . 2538) (symbol "InitializeDriver" 2583 . 2599) (semantic-list "(                          \\
        VOID    *ImageHandle,                   \\
        VOID    *SystemTable                    \\
        )" 2600 . 2738) (semantic-list "{                                           \\
        return InitFunction(ImageHandle,        \\
                SystemTable);                   \\
    }" 2783 . 2934) (symbol "EFI_STATUS" 3033 . 3043) (symbol "efi_main" 3044 . 3052) (semantic-list "(                        \\
        EFI_HANDLE image,                       \\
        EFI_SYSTEM_TABLE *systab                \\
        )" 3052 . 3188) (symbol "__attribute__" 3189 . 3202) (semantic-list "((weak,                  \\
                alias (\"InitializeDriver\")))" 3202 . 3273) (punctuation ";" 3273 . 3274)))
          ("LOAD_INTERNAL_DRIVER" (spp-arg-list ("_if" "type" "name" "entry") 3304 . 3328) . 
              ((semantic-list "(_if)" 3342 . 3347) (punctuation "-" 3347 . 3348) (punctuation ">" 3348 . 3349) (symbol "LoadInternal" 3349 . 3361) (semantic-list "(type, name, entry)" 3361 . 3380)))
          ("BREAKPOINT" (spp-arg-list nil 724 . 726) . 
              ((WHILE "while" 734 . 739) (semantic-list "(TRUE)" 740 . 746) (punctuation ";" 746 . 747)))
          ("BAD_POINTER" . ((number "0xFBFBFBFBFBFBFBFB" 639 . 657)))
          ("END_RUNTIME_DATA" (spp-arg-list nil 2274 . 2276) . ((symbol "data_seg" 2282 . 2290) (semantic-list "(\"\")" 2290 . 2294)))
          ("VOID" . ((VOID "void" 399 . 403)))
          ("EFI_ERROR_MASK" . ((number "0x8000000000000000" 538 . 556)))
          ("BOOTSERVICE")
          ("VOLATILE" . ((VOLATILE "volatile" 2328 . 2336)))
          ("EFIERR_OEM" (spp-arg-list ("a") 575 . 578) . ((semantic-list "(0xc000000000000000 | a)" 585 . 609)))
          ("MIN_ALIGNMENT_SIZE" . ((number "8" 875 . 876)))
          ("RUNTIMEFUNCTION")
          ("EFIERR" (spp-arg-list ("a") 471 . 474) . ((semantic-list "(0x8000000000000000 | a)" 485 . 509)))
          ("ALIGN_VARIABLE" (spp-arg-list ("Value" "Adjustment") 900 . 919) . 
              ((semantic-list "(UINTN)" 934 . 941) (symbol "Adjustment" 941 . 951) (punctuation "=" 952 . 953) (number "0" 954 . 955) (punctuation ";" 955 . 956) (IF "if" 971 . 973) (semantic-list "((UINTN)Value % MIN_ALIGNMENT_SIZE)" 973 . 1008) (semantic-list "(UINTN)" 1027 . 1034) (symbol "Adjustment" 1034 . 1044) (punctuation "=" 1045 . 1046) (symbol "MIN_ALIGNMENT_SIZE" 1047 . 1065) (punctuation "-" 1066 . 1067) (semantic-list "((UINTN)Value % MIN_ALIGNMENT_SIZE)" 1068 . 1103) (punctuation ";" 1103 . 1104) (symbol "Value" 1119 . 1124) (punctuation "=" 1125 . 1126) (semantic-list "(UINTN)" 1127 . 1134) (symbol "Value" 1134 . 1139) (punctuation "+" 1140 . 1141) (semantic-list "(UINTN)" 1142 . 1149) (symbol "Adjustment" 1149 . 1159)))
          ("EFIAPI")
          ("MEMORY_FENCE" . ((symbol "__sync_synchronize" 2370 . 2388)))
          ("uefi_call_wrapper" (spp-arg-list ("func" "va_num" "...") 3601 . 3620) . ((symbol "func" 3621 . 3625) (semantic-list "(__VA_ARGS__)" 3625 . 3638)))
          ("RUNTIMESERVICE")
          ("EFI_FUNCTION")
          ("EFI_SIGNATURE_16" (spp-arg-list ("A" "B") 1262 . 1267) . ((semantic-list "((A) | (B<<8))" 1280 . 1294)))
          ("EFI_SIGNATURE_64" (spp-arg-list ("A" "B" "C" "D" "E" "F" "G" "H") 1425 . 1442) . ((semantic-list "(EFI_SIGNATURE_32(A,B,C,D) | ((UINT64)(EFI_SIGNATURE_32(E,F,G,H)) << 32))" 1443 . 1516)))
          ("RUNTIME_CODE" (spp-arg-list ("a") 2163 . 2166) . ((symbol "alloc_text" 2175 . 2185) (semantic-list "(\"rtcode\", a)" 2185 . 2198)))
          ("BEGIN_RUNTIME_DATA" (spp-arg-list nil 2225 . 2227) . ((symbol "data_seg" 2231 . 2239) (semantic-list "(\"rtdata\")" 2239 . 2249)))
          ("INTERFACE_DECL" (spp-arg-list ("x") 3562 . 3565) . ((STRUCT "struct" 3566 . 3572) (symbol "x" 3573 . 3574)))
          )
))
  :file "!home!chenqi!work!androidia!external!gnu-efi!gnu-efi-3.0!inc!aarch64!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
