;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode makefile-gmake-mode
      :tags 
        '( ("publish_dest" variable (:default-value ("$(TOP)/pub/$(TARGET_PRODUCT)/$(TARGET_BUILD_VARIANT)")) nil [546 615])
            ("publish_tool_dest" variable (:default-value ("$(publish_dest)/../tools")) nil [615 662])
            ("publish_tool_destw" variable (:default-value ("$(publish_tool_dest)/windows-x86/")) nil [662 718])
            ("publish_tool_destl" variable (:default-value ("$(publish_tool_dest)/linux-x86/")) nil [718 772])
            ("publish_make_dir" variable (:default-value ("$(if $(wildcard $1),,mkdir -p $1)")) nil [772 825])
            (".PHONY" function (:arguments ("publish_mkdir_dest")) nil [826 853])
            ("publish_mkdir_dest" function nil nil [853 916])
            ("PUB_SYSTEM_SYMBOLS" variable (:default-value ("$(publish_dest)/symbols.tar.gz")) nil [942 995])
            ("$(PUB_SYSTEM_SYMBOLS)" function (:arguments ("systemtarball")) nil [996 1167])
            (".PHONY" function (:arguments ("publish_system_symbols")) nil [1168 1199])
            ("publish_system_symbols" function (:arguments ("$(PUB_SYSTEM_SYMBOLS)")) nil [1199 1245])
            (".PHONY" function (:arguments ("publish_kernel_debug")) nil [1246 1275])
            ("PUB_KERNEL_DBG" variable (:default-value ("vmlinux.bz2" "System.map.bz2")) nil [1426 1471])
            ("PUB_KERNEL_DBG_PATH" variable (:default-value ("$(publish_dest)/kernel")) nil [1471 1517])
            ("PUB_KERNEL_DBG" variable (:default-value ("$(addprefix $(PUB_KERNEL_DBG_PATH)/,$(PUB_KERNEL_DBG))")) nil [1517 1590])
            ("$(PUB_KERNEL_DBG)" function (:arguments ("$(LOCAL_KERNEL)")) nil [1591 1747])
            ("PUB_KERNEL_MODULES" variable (:default-value ("$(PUB_KERNEL_DBG_PATH)/kernel_modules-$(TARGET_BUILD_VARIANT).tar.bz2")) nil [1748 1839])
            ("$(PUB_KERNEL_MODULES)" function (:arguments ("$(LOCAL_KERNEL_PATH)/copy_modules")) nil [1840 2047])
            ("publish_kernel_debug" function (:arguments ("$(PUB_KERNEL_DBG)" "$(PUB_KERNEL_MODULES)")) nil [2048 2154])
            ("publish_kernel_debug" function nil nil [2188 2249])
            ("PUB_CMCC_ZIP" variable (:default-value ("$(publish_dest)/$(notdir $(CMCC_TARGET))")) nil [2320 2377])
            ("$(PUB_CMCC_ZIP)" function (:arguments ("publish_mkdir_dest" "$(CMCC_TARGET)")) nil [2377 2462])
            ("PUB_OSAGNOSTIC_TAG" variable (:default-value ("$(publish_dest)/$(notdir $(OS_AGNOSTIC_INFO))")) nil [2524 2592])
            ("$(PUB_OSAGNOSTIC_TAG)" function (:arguments ("publish_mkdir_dest" "$(OS_AGNOSTIC_INFO)")) nil [2592 2694])
            (".PHONY" function (:arguments ("publish_firmware_symbols")) nil [2728 2761])
            ("FIRMWARE_SYMBOLS_FILE" variable (:default-value ("$(TARGET_DEVICE)-symbols_firmware.zip")) nil [2761 2824])
            ("FIRMWARE_SYMBOLS_PATH" variable (:default-value ("$(wildcard hardware/intel/$(TARGET_BOARD_PLATFORM)-fls/$(PRODUCT_MODEL)/symbols/*.elf)")) nil [2824 2936])
            ("publish_firmware_symbols" function (:arguments ("publish_mkdir_dest" "publish_flashfiles")) nil [2937 3001])
            ("PUBLISH_SDK" variable (:default-value ("$(strip $(filter sdk sdk_x86,$(TARGET_PRODUCT)))")) nil [3636 3700])
            (".PHONY" function (:arguments ("publish_flashfiles")) nil [3721 3748])
            ("publish_flashfiles" function (:arguments ("publish_mkdir_dest" "$(INTEL_FACTORY_FLASHFILES_TARGET)")) nil [3786 3860])
            ("publish_flashfiles" function nil nil [3860 4022])
            ("publish_flashfiles" function nil nil [4027 4199])
            (".PHONY" function (:arguments ("publish_ifwi")) nil [4206 4226])
            ("publish_ifwi" function nil nil [4263 4343])
            (".PHONY" function (:arguments ("publish_liveimage")) nil [4350 4376])
            ("publish_liveimage" function (:arguments ("publish_mkdir_dest" "$(INTEL_LIVEIMAGE_TARGET)")) nil [4405 4520])
            ("publish_liveimage" function nil nil [4525 4615])
            (".PHONY" function (:arguments ("publish_gptimage")) nil [4622 4647])
            ("publish_gptimage" function (:arguments ("publish_mkdir_dest" "$(GPTIMAGE_BIN)")) nil [4666 4760])
            ("publish_gptimage" function nil nil [4906 4994])
            (".PHONY" function (:arguments ("publish_androidia_image")) nil [5002 5034])
            ("publish_androidia_image" function (:arguments ("publish_mkdir_dest" "$(ANDROID_IA_IMAGE)")) nil [5057 5166])
            ("publish_androidia_image" function nil nil [5171 5273])
            (".PHONY" function (:arguments ("publish_otapackage")) nil [5280 5307])
            ("publish_otapackage" function (:arguments ("publish_mkdir_dest" "$(INTERNAL_OTA_PACKAGE_TARGET)")) nil [5307 5433])
            (".PHONY" function (:arguments ("publish_ota_targetfiles")) nil [5434 5466])
            ("publish_ota_targetfiles" function (:arguments ("publish_mkdir_dest" "$(BUILT_TARGET_FILES_PACKAGE)")) nil [5466 5595])
            (".PHONY" function (:arguments ("publish_ota_flashfile")) nil [5596 5626])
            ("BUILDBOT_PUBLISH_DEPS" variable (:default-value ("$(shell python -c 'import json,os ; print \" \".join(json.loads(os.environ[\"PUBLISH_CONF\"]).get(\"$(TARGET_BUILD_VARIANT)\",[]))')")) nil [5651 5803])
            ("publish_ota_flashfile" function (:arguments ("$(BUILDBOT_PUBLISH_DEPS)")) nil [5851 5899])
            ("full_ota" function (:arguments ("publish_otapackage")) nil [5900 5929])
            ("full_ota_flashfile" function nil nil [5929 5949])
            ("ota_target_files" function (:arguments ("publish_ota_targetfiles")) nil [5949 5991])
            ("system_img" function nil nil [5991 6003])
            ("publish_ota_flashfile" function nil nil [6008 6069])
            ("PUBLISH_CI_FILES" variable (:default-value ("$(DIST_DIR)/fastboot" "$(DIST_DIR)/adb")) nil [6091 6148])
            (".PHONY" function (:arguments ("publish_ci")) nil [6148 6167])
            ("publish_ci" function (:arguments ("publish_liveimage" "publish_ota_flashfile" "publish_gptimage" "publish_ifwi" "publish_firmware_symbols" "$(PUB_OSAGNOSTIC_TAG)" "$(PUB_CMCC_ZIP)" "$(PLATFORM_RMA_TOOLS_ZIP)")) nil [6167 6580])
            (".PHONY" function (:arguments ("publish_windows_tools")) nil [6582 6612])
            ("publish_windows_tools" function (:arguments ("$(PLATFORM_RMA_TOOLS_CROSS_ZIP)")) nil [6612 6779])
            (".PHONY" function (:arguments ("publish_ci")) nil [6922 6941])
            ("publish_ci" function (:arguments ("publish_sdk_target")) nil [6941 6972])
            (".PHONY" function (:arguments ("publish_sdk_target")) nil [6974 7001])
            ("publish_sdk_target" function (:arguments ("publish_mkdir_dest" "$(INTERNAL_SDK_TARGET)")) nil [7001 7111])
            ("PUBLISH_GOALS" variable (:default-value ("$(strip $(filter-out publish publish_ci,$(MAKECMDGOALS)))")) nil [7289 7364])
            ("PUBLISH_GOALS" variable (:default-value ("$(strip $(filter-out $(INTERNAL_MODIFIER_TARGETS),$(PUBLISH_GOALS)))")) nil [7364 7450])
            ("PUBLISH_GOALS" variable (:default-value ("$(DEFAULT_GOAL)")) nil [7596 7629])
            (".PHONY" function (:arguments ("publish")) nil [7636 7652])
            ("publish" function (:arguments ("publish_mkdir_dest" "$(PUBLISH_GOALS)" "publish_ifwi" "publish_gptimage" "publish_firmware_symbols" "$(PUB_OSAGNOSTIC_TAG)" "$(PUB_CMCC_ZIP)" "publish_flashfiles")) nil [7652 7848]))          
      :file "publish.mk"
      :pointmax 7848
      :fsize 7847
      :lastmodtime '(22855 26455 776552 116000)
      :unmatched-syntax '((shell-command 7810 . 7847) (bol 7809 . 7809) (ENDIF 7113 . 7118) (bol 7113 . 7113) (ELSE 6780 . 6784) (bol 6780 . 6780) (ENDIF 6069 . 6074) (bol 6069 . 6069) (shell-command 4853 . 4894) (bol 4852 . 4852) (shell-command 4782 . 4851) (bol 4781 . 4781) (shell-command 3419 . 3586) (bol 3418 . 3418) (shell-command 3351 . 3417) (bol 3350 . 3350) (shell-command 3285 . 3349) (bol 3284 . 3284) (ELSE 3259 . 3263) (bol 3259 . 3259) (shell-command 3168 . 3252) (bol 3167 . 3167) (shell-command 3037 . 3132) (bol 3036 . 3036) (semantic-list 3007 . 3024) (IFNEQ 3001 . 3006) (bol 3001 . 3001) (ENDIF 2154 . 2159) (bol 2154 . 2154))))
  :file "!home!chenqi!work!aia_internal!device!intel!build!tasks!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
