;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("copy" include nil nil [602 613])
            ("errno" include nil nil [614 626])
            ("getopt" include nil nil [627 640])
            ("getpass" include nil nil [641 655])
            ("imp" include nil nil [656 666])
            ("os" include nil nil [667 676])
            ("platform" include nil nil [677 692])
            ("re" include nil nil [693 702])
            ("shlex" include nil nil [703 715])
            ("shutil" include nil nil [716 729])
            ("subprocess" include nil nil [730 747])
            ("sys" include nil nil [748 758])
            ("tempfile" include nil nil [759 774])
            ("threading" include nil nil [775 791])
            ("time" include nil nil [792 803])
            ("zipfile" include nil nil [804 818])
            ("blockimgdiff" include nil nil [820 839])
            ("hashlib" include nil nil [841 873])
            ("Options" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("platform_search_path" variable nil (reparse-symbol indented_block_body) [925 1036])
                            ("self" variable nil (reparse-symbol indented_block_body) [1042 1105])
                            ("self" variable nil (reparse-symbol indented_block_body) [1110 1153])
                            ("self" variable nil (reparse-symbol indented_block_body) [1185 1227])
                            ("self" variable nil (reparse-symbol indented_block_body) [1260 1288])
                            ("self" variable nil (reparse-symbol indented_block_body) [1293 1316])
                            ("self" variable nil (reparse-symbol indented_block_body) [1360 1388])
                            ("self" variable nil (reparse-symbol indented_block_body) [1404 1440])
                            ("self" variable nil (reparse-symbol indented_block_body) [1445 1477])
                            ("self" variable nil (reparse-symbol indented_block_body) [1530 1567])
                            ("self" variable nil (reparse-symbol indented_block_body) [1572 1598])
                            ("self" variable nil (reparse-symbol indented_block_body) [1603 1633])
                            ("self" variable nil (reparse-symbol indented_block_body) [1638 1666])
                            ("self" variable nil (reparse-symbol indented_block_body) [1671 1691])
                            ("self" variable nil (reparse-symbol indented_block_body) [1696 1715])
                            ("self" variable nil (reparse-symbol indented_block_body) [1720 1747])
                            ("self" variable nil (reparse-symbol indented_block_body) [1752 1768])
                            ("self" variable nil (reparse-symbol indented_block_body) [1773 1794])
                            ("self" variable nil (reparse-symbol indented_block_body) [1799 1827])
                            ("self" variable nil (reparse-symbol indented_block_body) [1832 1860])
                            ("self" variable nil (reparse-symbol indented_block_body) [1865 1891])
                            ("self" variable nil (reparse-symbol indented_block_body) [1951 1973])
                            ("self" variable nil (reparse-symbol indented_block_body) [1978 2004]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [914 918]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [901 2005]))                  
                :type "class")
                nil [876 2005])
            ("OPTIONS" variable nil nil [2007 2026])
            ("SPECIAL_CERT_STRINGS" variable nil nil [2094 2142])
            ("ErrorCode" type
               (:documentation "Define error_codes for failures that happen during the actual
  update package installation.

  Error codes 0-999 are reserved for failures before the package
  installation (i.e. low battery, package verification failure).
  Detailed code in 'bootable/recovery/error_code.h' "
                :superclasses ("object")
                :members 
                  ( ("SYSTEM_VERIFICATION_FAILURE" variable nil (reparse-symbol indented_block_body) [2457 2491])
                    ("SYSTEM_UPDATE_FAILURE" variable nil (reparse-symbol indented_block_body) [2494 2522])
                    ("SYSTEM_UNEXPECTED_CONTENTS" variable nil (reparse-symbol indented_block_body) [2525 2558])
                    ("SYSTEM_NONZERO_CONTENTS" variable nil (reparse-symbol indented_block_body) [2561 2591])
                    ("SYSTEM_RECOVER_FAILURE" variable nil (reparse-symbol indented_block_body) [2594 2623])
                    ("VENDOR_VERIFICATION_FAILURE" variable nil (reparse-symbol indented_block_body) [2626 2660])
                    ("VENDOR_UPDATE_FAILURE" variable nil (reparse-symbol indented_block_body) [2663 2691])
                    ("VENDOR_UNEXPECTED_CONTENTS" variable nil (reparse-symbol indented_block_body) [2694 2727])
                    ("VENDOR_NONZERO_CONTENTS" variable nil (reparse-symbol indented_block_body) [2730 2760])
                    ("VENDOR_RECOVER_FAILURE" variable nil (reparse-symbol indented_block_body) [2763 2792])
                    ("OEM_PROP_MISMATCH" variable nil (reparse-symbol indented_block_body) [2795 2819])
                    ("FINGERPRINT_MISMATCH" variable nil (reparse-symbol indented_block_body) [2822 2849])
                    ("THUMBPRINT_MISMATCH" variable nil (reparse-symbol indented_block_body) [2852 2878])
                    ("OLDER_BUILD" variable nil (reparse-symbol indented_block_body) [2881 2899])
                    ("DEVICE_MISMATCH" variable nil (reparse-symbol indented_block_body) [2902 2924])
                    ("BAD_PATCH_FILE" variable nil (reparse-symbol indented_block_body) [2927 2948])
                    ("INSUFFICIENT_CACHE_SPACE" variable nil (reparse-symbol indented_block_body) [2951 2982])
                    ("TUNE_PARTITION_FAILURE" variable nil (reparse-symbol indented_block_body) [2985 3014])
                    ("APPLY_PATCH_FAILURE" variable nil (reparse-symbol indented_block_body) [3017 3043]))                  
                :type "class")
                nil [2144 3044])
            ("ExternalError" type
               (:superclasses ("RuntimeError")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3082 3086]))                  
                :type "class")
                nil [3045 3087])
            ("Run" function
               (:documentation "Create and return a subprocess.Popen object, printing the command
  line on the terminal if -v was specified."
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [3097 3101])
                    ("kwargs" variable nil (reparse-symbol function_parameters) [3103 3111]))                  )
                nil [3089 3336])
            ("CloseInheritedPipes" function (:documentation " Gmake in MAC OS has file descriptor (PIPE) leak. We close those fds
  before doing other work.") nil [3338 3717])
            ("LoadInfoDict" function
               (:documentation "Read and parse the META/misc_info.txt key/value pairs from the
  input target files and return a dict."
                :arguments 
                  ( ("input_file" variable nil (reparse-symbol function_parameters) [3736 3746])
                    ("input_dir" variable nil (reparse-symbol function_parameters) [3748 3757]))                  )
                nil [3719 8763])
            ("LoadBuildProp" function (:arguments 
              ( ("read_helper" variable nil (reparse-symbol function_parameters) [8782 8793]))              ) nil [8764 8997])
            ("LoadDictionaryFromLines" function (:arguments 
              ( ("lines" variable nil (reparse-symbol function_parameters) [9026 9031]))              ) nil [8998 9236])
            ("LoadRecoveryFSTab" function (:arguments 
              ( ("read_helper" variable nil (reparse-symbol function_parameters) [9259 9270])
                ("fstab_version" variable nil (reparse-symbol function_parameters) [9272 9285])
                ("recovery_fstab_path" variable nil (reparse-symbol function_parameters) [9287 9306])
                ("system_root_image" variable nil (reparse-symbol function_parameters) [9330 9347]))              ) nil [9237 12409])
            ("DumpInfoDict" function (:arguments 
              ( ("d" variable nil (reparse-symbol function_parameters) [12428 12429]))              ) nil [12411 12520])
            ("_BuildBootableImage" function
               (:documentation "Build a bootable image from the specified sourcedir.

  Take a kernel, cmdline, and optionally a ramdisk directory from the input (in
  'sourcedir'), and turn them into a boot image.  Return the image data, or
  None if sourcedir does not appear to contains files for building the
  requested image."
                :arguments 
                  ( ("sourcedir" variable nil (reparse-symbol function_parameters) [12546 12555])
                    ("fs_config_file" variable nil (reparse-symbol function_parameters) [12557 12571])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [12573 12582])
                    ("has_ramdisk" variable nil (reparse-symbol function_parameters) [12613 12624]))                  )
                nil [12522 16576])
            ("GetBootableImage" function
               (:documentation "Return a File object with the desired bootable image.

  Look for it in 'unpack_dir'/BOOTABLE_IMAGES under the name 'prebuilt_name',
  otherwise look for it under 'unpack_dir'/IMAGES, otherwise construct it from
  the source files in 'unpack_dir'/'tree_subdir'."
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [16599 16603])
                    ("prebuilt_name" variable nil (reparse-symbol function_parameters) [16605 16618])
                    ("unpack_dir" variable nil (reparse-symbol function_parameters) [16620 16630])
                    ("tree_subdir" variable nil (reparse-symbol function_parameters) [16632 16643])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [16666 16675]))                  )
                nil [16578 18203])
            ("UnzipTemp" function
               (:documentation "Unzip the given archive into a temporary directory and return the name.

  If filename is of the form \"foo.zip+bar.zip\", unzip foo.zip into a
  temp dir, then unzip bar.zip into that_dir/BOOTABLE_IMAGES.

  Returns (tempdir, zipobj) where zipobj is a zipfile.ZipFile (of the
  main file), open for reading.
  "
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [18219 18227])
                    ("pattern" variable nil (reparse-symbol function_parameters) [18229 18236]))                  )
                nil [18205 19283])
            ("GetKeyPasswords" function
               (:documentation "Given a list of keys, prompt the user to enter passwords for
  those which require them.  Return a {key: password} dict.  password
  will be None if the key has no password."
                :arguments 
                  ( ("keylist" variable nil (reparse-symbol function_parameters) [19305 19312]))                  )
                nil [19285 21054])
            ("GetMinSdkVersion" function
               (:documentation "Get the minSdkVersion delared in the APK. This can be both a decimal number
  (API Level) or a codename.
  "
                :arguments 
                  ( ("apk_name" variable nil (reparse-symbol function_parameters) [21077 21085]))                  )
                nil [21056 21670])
            ("GetMinSdkVersionInt" function
               (:documentation "Get the minSdkVersion declared in the APK as a number (API Level). If
  minSdkVersion is set to a codename, it is translated to a number using the
  provided map.
  "
                :arguments 
                  ( ("apk_name" variable nil (reparse-symbol function_parameters) [21696 21704])
                    ("codename_to_api_level_map" variable nil (reparse-symbol function_parameters) [21706 21731]))                  )
                nil [21672 22284])
            ("SignFile" function
               (:documentation "Sign the input_name zip/jar/apk, producing output_name.  Use the
  given key and password (the latter may be None if the key does not
  have a password.

  If whole_file is true, use the \"-w\" option to SignApk to embed a
  signature that covers the whole file in the archive comment of the
  zip file.

  min_api_level is the API Level (int) of the oldest platform this file may end
  up on. If not specified for an APK, the API Level is obtained by interpreting
  the minSdkVersion attribute of the APK's AndroidManifest.xml.

  codename_to_api_level_map is needed to translate the codename which may be
  encountered as the APK's minSdkVersion.
  "
                :arguments 
                  ( ("input_name" variable nil (reparse-symbol function_parameters) [22299 22309])
                    ("output_name" variable nil (reparse-symbol function_parameters) [22311 22322])
                    ("key" variable nil (reparse-symbol function_parameters) [22324 22327])
                    ("password" variable nil (reparse-symbol function_parameters) [22329 22337])
                    ("min_api_level" variable nil (reparse-symbol function_parameters) [22339 22352])
                    ("codename_to_api_level_map" variable nil (reparse-symbol function_parameters) [22363 22388])
                    ("whole_file" variable nil (reparse-symbol function_parameters) [22401 22411]))                  )
                nil [22286 24095])
            ("CheckSize" function
               (:documentation "Check the data string passed against the max size limit, if
  any, for the given target.  Raise exception if the data is too big.
  Print a warning if the data is nearing the maximum size."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [24111 24115])
                    ("target" variable nil (reparse-symbol function_parameters) [24117 24123])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [24125 24134]))                  )
                nil [24097 25245])
            ("ReadApkCerts" function
               (:documentation "Given a target_files ZipFile, parse the META/apkcerts.txt file
  and return a {package: cert} dict."
                :arguments 
                  ( ("tf_zip" variable nil (reparse-symbol function_parameters) [25264 25270]))                  )
                nil [25247 26232])
            ("COMMON_DOCSTRING" variable nil nil [26234 26793])
            ("Usage" function (:arguments 
              ( ("docstring" variable nil (reparse-symbol function_parameters) [26805 26814]))              ) nil [26795 26873])
            ("ParseOptions" function
               (:documentation "Parse the options in argv and return any arguments that aren't
  flags.  docstring is the calling module's docstring, to be displayed
  for errors and -h.  extra_opts and extra_long_opts are for flags
  defined by the caller, which are processed by passing them to
  extra_option_handler."
                :arguments 
                  ( ("argv" variable nil (reparse-symbol function_parameters) [26892 26896])
                    ("docstring" variable nil (reparse-symbol function_parameters) [26915 26924])
                    ("extra_opts" variable nil (reparse-symbol function_parameters) [26943 26953])
                    ("extra_long_opts" variable nil (reparse-symbol function_parameters) [26958 26973])
                    ("extra_option_handler" variable nil (reparse-symbol function_parameters) [26995 27015]))                  )
                nil [26875 29440])
            ("MakeTempFile" function
               (:documentation "Make a temp file and add it to the list of things to be deleted
  when Cleanup() is called.  Return the filename."
                :arguments 
                  ( ("prefix" variable nil (reparse-symbol function_parameters) [29459 29465])
                    ("suffix" variable nil (reparse-symbol function_parameters) [29472 29478]))                  )
                nil [29442 29724])
            ("Cleanup" function nil nil [29726 29848])
            ("PasswordManager" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [29907 29946])
                            ("self" variable nil (reparse-symbol indented_block_body) [29951 29999]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29896 29900]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29883 30000])
                    ("GetPasswords" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30020 30024])
                            ("items" variable nil (reparse-symbol function_parameters) [30026 30031]))                          
                        :documentation "Get passwords corresponding to each string in 'items',
    returning a dict.  (The dict may have keys in addition to the
    values in 'items'.)

    Uses the passwords in $ANDROID_PW_FILE if available, letting the
    user edit that file to add more needed passwords.  If no editor is
    available, or $ANDROID_PW_FILE isn't define, prompts the user
    interactively in the ordinary way.
    ")
                        (reparse-symbol indented_block_body) [30003 31097])
                    ("PromptResult" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31117 31121])
                            ("current" variable nil (reparse-symbol function_parameters) [31123 31130]))                          
                        :documentation "Prompt the user to enter a value (password) for each key in
    'current' whose value is fales.  Returns a new dict with all the
    values.
    ")
                        (reparse-symbol indented_block_body) [31100 31602])
                    ("UpdateAndReadFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31627 31631])
                            ("current" variable nil (reparse-symbol function_parameters) [31633 31640]))                          )
                        (reparse-symbol indented_block_body) [31605 32363])
                    ("ReadFile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32379 32383]))                          )
                        (reparse-symbol indented_block_body) [32366 32941]))                  
                :type "class")
                nil [29850 32941])
            ("ZipWrite" function (:arguments 
              ( ("zip_file" variable nil (reparse-symbol function_parameters) [32956 32964])
                ("filename" variable nil (reparse-symbol function_parameters) [32966 32974])
                ("arcname" variable nil (reparse-symbol function_parameters) [32976 32983])
                ("perms" variable nil (reparse-symbol function_parameters) [32990 32995])
                ("compress_type" variable nil (reparse-symbol function_parameters) [33016 33029]))              ) nil [32943 34438])
            ("ZipWriteStr" function
               (:documentation "Wrap zipfile.writestr() function to work around the zip64 limit.

  Even with the ZIP64_LIMIT workaround, it won't allow writing a string
  longer than 2GiB. It gives 'OverflowError: size does not fit in an int'
  when calling crc32(bytes).

  But it still works fine to write a shorter string into a large zip file.
  We should use ZipWrite() whenever possible, and only use ZipWriteStr()
  when we know the string won't be too long.
  "
                :arguments 
                  ( ("zip_file" variable nil (reparse-symbol function_parameters) [34456 34464])
                    ("zinfo_or_arcname" variable nil (reparse-symbol function_parameters) [34466 34482])
                    ("data" variable nil (reparse-symbol function_parameters) [34484 34488])
                    ("perms" variable nil (reparse-symbol function_parameters) [34490 34495])
                    ("compress_type" variable nil (reparse-symbol function_parameters) [34518 34531]))                  )
                nil [34440 35846])
            ("ZipClose" function (:arguments 
              ( ("zip_file" variable nil (reparse-symbol function_parameters) [35861 35869]))              ) nil [35848 36137])
            ("DeviceSpecificParams" type
               (:superclasses ("object")
                :members 
                  ( ("module" variable nil (reparse-symbol indented_block_body) [36177 36190])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Keyword arguments to the constructor become attributes of this
    object, which is passed to all functions in the device-specific
    module.\"\"\"" code nil (reparse-symbol indented_block_body) [36227 36375])
                            ("for" code nil (reparse-symbol indented_block_body) [36380 36438])
                            ("self" variable nil (reparse-symbol indented_block_body) [36442 36470])
                            ("if" code nil (reparse-symbol indented_block_body) [36476 37063]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36206 36210])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [36212 36220]))                          
                        :documentation "Keyword arguments to the constructor become attributes of this
    object, which is passed to all functions in the device-specific
    module."
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36193 37063])
                    ("_DoCall" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37078 37082])
                            ("function_name" variable nil (reparse-symbol function_parameters) [37084 37097])
                            ("args" variable nil (reparse-symbol function_parameters) [37099 37104])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [37106 37114]))                          
                        :documentation "Call the named function in the device-specific module, passing
    the given args and kwargs.  The first argument to the call will be
    the DeviceSpecific object itself.  If there is no module, or the
    module does not define the function, return the value of the
    'default' kwarg (which itself defaults to None).")
                        (reparse-symbol indented_block_body) [37066 37636])
                    ("FullOTA_Assertions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37662 37666]))                          
                        :documentation "Called after emitting the block of assertions at the top of a
    full OTA package.  Implementations can add whatever additional
    assertions they like.")
                        (reparse-symbol indented_block_body) [37639 37880])
                    ("FullOTA_InstallBegin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37908 37912]))                          
                        :documentation "Called at the start of full OTA installation.")
                        (reparse-symbol indented_block_body) [37883 38019])
                    ("FullOTA_InstallEnd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38045 38049]))                          
                        :documentation "Called at the end of full OTA installation; typically this is
    used to install the image for the device's baseband processor.")
                        (reparse-symbol indented_block_body) [38022 38237])
                    ("IncrementalOTA_Assertions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38270 38274]))                          
                        :documentation "Called after emitting the block of assertions at the top of an
    incremental OTA package.  Implementations can add whatever
    additional assertions they like.")
                        (reparse-symbol indented_block_body) [38240 38503])
                    ("IncrementalOTA_VerifyBegin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38537 38541]))                          
                        :documentation "Called at the start of the verification phase of incremental
    OTA installation; additional checks can be placed here to abort
    the script before any changes are made.")
                        (reparse-symbol indented_block_body) [38506 38781])
                    ("IncrementalOTA_VerifyEnd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38813 38817]))                          
                        :documentation "Called at the end of the verification phase of incremental OTA
    installation; additional checks can be placed here to abort the
    script before any changes are made.")
                        (reparse-symbol indented_block_body) [38784 39053])
                    ("IncrementalOTA_InstallBegin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39088 39092]))                          
                        :documentation "Called at the start of incremental OTA installation (after
    verification is complete).")
                        (reparse-symbol indented_block_body) [39056 39250])
                    ("IncrementalOTA_InstallEnd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39283 39287]))                          
                        :documentation "Called at the end of incremental OTA installation; typically
    this is used to install the image for the device's baseband
    processor.")
                        (reparse-symbol indented_block_body) [39253 39493])
                    ("VerifyOTA_Assertions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39521 39525]))                          )
                        (reparse-symbol indented_block_body) [39496 39576]))                  
                :type "class")
                nil [36139 39576])
            ("File" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [39635 39651])
                            ("self" variable nil (reparse-symbol indented_block_body) [39656 39672])
                            ("self" variable nil (reparse-symbol indented_block_body) [39677 39698])
                            ("self" variable nil (reparse-symbol indented_block_body) [39703 39737]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39612 39616])
                            ("name" variable nil (reparse-symbol function_parameters) [39618 39622])
                            ("data" variable nil (reparse-symbol function_parameters) [39624 39628]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [39599 39738])
                    ("FromLocalFile" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [39774 39777])
                            ("name" variable nil (reparse-symbol function_parameters) [39779 39783])
                            ("diskname" variable nil (reparse-symbol function_parameters) [39785 39793]))                          )
                        (reparse-symbol indented_block_body) [39741 39887])
                    ("WriteToTemp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39906 39910]))                          )
                        (reparse-symbol indented_block_body) [39890 40001])
                    ("AddToZip" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40017 40021])
                            ("z" variable nil (reparse-symbol function_parameters) [40023 40024])
                            ("compression" variable nil (reparse-symbol function_parameters) [40026 40037]))                          )
                        (reparse-symbol indented_block_body) [40004 40113]))                  
                :type "class")
                nil [39577 40113])
            ("DIFF_PROGRAM_BY_EXT" variable nil nil [40114 40286])
            ("Difference" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [40367 40379])
                            ("self" variable nil (reparse-symbol indented_block_body) [40384 40396])
                            ("self" variable nil (reparse-symbol indented_block_body) [40401 40418])
                            ("self" variable nil (reparse-symbol indented_block_body) [40423 40455]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40329 40333])
                            ("tf" variable nil (reparse-symbol function_parameters) [40335 40337])
                            ("sf" variable nil (reparse-symbol function_parameters) [40339 40341])
                            ("diff_program" variable nil (reparse-symbol function_parameters) [40343 40355]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40316 40456])
                    ("ComputePatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40476 40480]))                          
                        :documentation "Compute the patch (as a string of data) needed to turn sf into
    tf.  Returns the same tuple as GetPatch().")
                        (reparse-symbol indented_block_body) [40459 41967])
                    ("GetPatch" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41984 41988]))                          
                        :documentation "Return a tuple (target_file, source_file, patch_data).
    patch_data may be None if ComputePatch hasn't been called, or if
    computing the patch failed.")
                        (reparse-symbol indented_block_body) [41971 42197]))                  
                :type "class")
                nil [40288 42197])
            ("ComputeDifferences" function
               (:documentation "Call ComputePatch on all the Difference objects in 'diffs'."
                :arguments 
                  ( ("diffs" variable nil (reparse-symbol function_parameters) [42222 42227]))                  )
                nil [42199 43524])
            ("BlockDifference" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [43686 43700])
                            ("self" variable nil (reparse-symbol indented_block_body) [43705 43719])
                            ("self" variable nil (reparse-symbol indented_block_body) [43724 43750])
                            ("self" variable nil (reparse-symbol indented_block_body) [43755 43797])
                            ("self" variable nil (reparse-symbol indented_block_body) [43802 43840])
                            ("if" code nil (reparse-symbol indented_block_body) [43846 44039])
                            ("self" variable nil (reparse-symbol indented_block_body) [44043 44065])
                            ("b" variable nil (reparse-symbol indented_block_body) [44071 44276])
                            ("tmpdir" variable nil (reparse-symbol indented_block_body) [44281 44308])
                            ("OPTIONS" code nil (reparse-symbol indented_block_body) [44313 44345])
                            ("self" variable nil (reparse-symbol indented_block_body) [44350 44393])
                            ("b" code nil (reparse-symbol indented_block_body) [44398 44418])
                            ("self" variable nil (reparse-symbol indented_block_body) [44423 44464])
                            ("self" variable nil (reparse-symbol indented_block_body) [44469 44515])
                            ("self" variable nil (reparse-symbol indented_block_body) [44520 44562])
                            ("if" code nil (reparse-symbol indented_block_body) [44568 44793]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43572 43576])
                            ("partition" variable nil (reparse-symbol function_parameters) [43578 43587])
                            ("tgt" variable nil (reparse-symbol function_parameters) [43589 43592])
                            ("src" variable nil (reparse-symbol function_parameters) [43594 43597])
                            ("check_first_block" variable nil (reparse-symbol function_parameters) [43604 43621])
                            ("version" variable nil (reparse-symbol function_parameters) [43644 43651])
                            ("disable_imgdiff" variable nil (reparse-symbol function_parameters) [43658 43673]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [43559 44793])
                    ("required_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44827 44831]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [44796 44866])
                    ("WriteScript" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [44885 44889])
                            ("script" variable nil (reparse-symbol function_parameters) [44891 44897])
                            ("output_zip" variable nil (reparse-symbol function_parameters) [44899 44909])
                            ("progress" variable nil (reparse-symbol function_parameters) [44911 44919]))                          )
                        (reparse-symbol indented_block_body) [44869 45329])
                    ("WriteStrictVerifyScript" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [45360 45364])
                            ("script" variable nil (reparse-symbol function_parameters) [45366 45372]))                          
                        :documentation "Verify all the blocks in the care_map, including clobbered blocks.

    This differs from the WriteVerifyScript() function: a) it prints different
    error messages; b) it doesn't allow half-way updated images to pass the
    verification.")
                        (reparse-symbol indented_block_body) [45332 46157])
                    ("WriteVerifyScript" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [46182 46186])
                            ("script" variable nil (reparse-symbol function_parameters) [46188 46194])
                            ("touched_blocks_only" variable nil (reparse-symbol function_parameters) [46196 46215]))                          )
                        (reparse-symbol indented_block_body) [46160 49866])
                    ("_WritePostInstallVerifyScript" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49903 49907])
                            ("script" variable nil (reparse-symbol function_parameters) [49909 49915]))                          )
                        (reparse-symbol indented_block_body) [49869 51505])
                    ("_WriteUpdate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [51525 51529])
                            ("script" variable nil (reparse-symbol function_parameters) [51531 51537])
                            ("output_zip" variable nil (reparse-symbol function_parameters) [51539 51549]))                          )
                        (reparse-symbol indented_block_body) [51508 52490])
                    ("_HashBlocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52509 52513])
                            ("source" variable nil (reparse-symbol function_parameters) [52515 52521])
                            ("ranges" variable nil (reparse-symbol function_parameters) [52523 52529]))                          )
                        (reparse-symbol indented_block_body) [52493 52686])
                    ("_HashZeroBlocks" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [52709 52713])
                            ("num_blocks" variable nil (reparse-symbol function_parameters) [52715 52725]))                          
                        :documentation "Return the hash value for all zero blocks.")
                        (reparse-symbol indented_block_body) [52689 52948]))                  
                :type "class")
                nil [43526 52948])
            ("DataImage" variable nil nil [52950 52984])
            ("PARTITION_TYPES" variable nil nil [53052 53195])
            ("GetTypeAndDevice" function (:arguments 
              ( ("mount_point" variable nil (reparse-symbol function_parameters) [53218 53229])
                ("info" variable nil (reparse-symbol function_parameters) [53231 53235]))              ) nil [53197 53397])
            ("ParseCertificate" function
               (:documentation "Parse a PEM-format certificate."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [53420 53424]))                  )
                nil [53399 53725])
            ("MakeRecoveryPatch" function
               (:documentation "Generate a binary patch that creates the recovery image starting
  with the boot image.  (Most of the space in these images is just the
  kernel, which is identical for the two, so the resulting patch
  should be efficient.)  Add it to the output zip, along with a shell
  script that is run from init.rc on first boot to actually do the
  patching and install the new recovery image.

  recovery_img and boot_img should be File objects for the
  corresponding images.  info should be the dictionary returned by
  common.LoadInfoDict() on the input target_files.
  "
                :arguments 
                  ( ("input_dir" variable nil (reparse-symbol function_parameters) [53748 53757])
                    ("output_sink" variable nil (reparse-symbol function_parameters) [53759 53770])
                    ("recovery_img" variable nil (reparse-symbol function_parameters) [53772 53784])
                    ("boot_img" variable nil (reparse-symbol function_parameters) [53786 53794])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [53818 53827]))                  )
                nil [53726 57745]))          
      :file "common.py"
      :pointmax 57745
      :fsize 57744
      :lastmodtime '(22847 45134 299060 6000)
      :unmatched-syntax '((INDENT_BLOCK 43266 . 43292) (NEWLINE 43265 . 43266) (COLON 43264 . 43265) (TRY 42619 . 42622) (AS 43260 . 43262) (INDENT_BLOCK 32835 . 32923) (NEWLINE 32834 . 32835) (COLON 32833 . 32834) (TRY 32454 . 32457) (AS 32829 . 32831) (INDENT_BLOCK 27813 . 27881) (NEWLINE 27812 . 27813) (COLON 27811 . 27812) (TRY 27323 . 27326) (AS 27805 . 27807) (INDENT_BLOCK 4139 . 4204) (NEWLINE 4138 . 4139) (COLON 4137 . 4138) (TRY 4051 . 4054) (AS 4133 . 4135)))
    (semanticdb-table "semanticdb-table"
      :file "blockimgdiff.py"
      :fsize 47262
      :lastmodtime '(22847 45134 299060 6000))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Given a target-files zipfile, produces an OTA package that installs
that build.  An incremental OTA is produced if -i is given, otherwise
a full OTA is produced.

Usage:  ota_from_target_files [flags] input_target_files output_ota_package

  --board_config  <file>
      Deprecated.

  -k (--package_key) <key> Key to use to sign the package (default is
      the value of default_system_dev_certificate from the input
      target-files's META/misc_info.txt, or
      \"build/target/product/security/testkey\" if that value is not
      specified).

      For incremental OTAs, the default value is based on the source
      target-file, not the target build.

  -i  (--incremental_from)  <file>
      Generate an incremental OTA using the given target-files zip as
      the starting build.

  --full_radio
      When generating an incremental OTA, always include a full copy of
      radio image. This option is only meaningful when -i is specified,
      because a full radio is always included in a full OTA if applicable.

  --full_bootloader
      Similar to --full_radio. When generating an incremental OTA, always
      include a full copy of bootloader image.

  -v  (--verify)
      Remount and verify the checksums of the files written to the
      system and vendor (if used) partitions.  Incremental builds only.

  -o  (--oem_settings)  <file>
      Use the file to specify the expected OEM-specific properties
      on the OEM partition of the intended device.

  --oem_no_mount
      For devices with OEM-specific properties but without an OEM partition,
      do not mount the OEM partition in the updater-script. This should be
      very rarely used, since it's expected to have a dedicated OEM partition
      for OEM-specific properties. Only meaningful when -o is specified.

  -w  (--wipe_user_data)
      Generate an OTA package that will wipe the user data partition
      when installed.

  -n  (--no_prereq)
      Omit the timestamp prereq check normally included at the top of
      the build scripts (used for developer OTA packages which
      legitimately need to go back and forth).

  --downgrade
      Intentionally generate an incremental OTA that updates from a newer
      build to an older one (based on timestamp comparison). \"post-timestamp\"
      will be replaced by \"ota-downgrade=yes\" in the metadata file. A data
      wipe will always be enforced, so \"ota-wipe=yes\" will also be included in
      the metadata file. The update-binary in the source build will be used in
      the OTA package, unless --binary flag is specified.

  -e  (--extra_script)  <file>
      Insert the contents of file at the end of the update script.

  -a  (--aslr_mode)  <on|off>
      Specify whether to turn on ASLR for the package (on by default).

  -2  (--two_step)
      Generate a 'two-step' OTA package, where recovery is updated
      first, so that any changes made to the system partition are done
      using the new recovery (new kernel, etc.).

  --block
      Generate a block-based OTA if possible.  Will fall back to a
      file-based OTA if the target_files is older and doesn't support
      block-based OTAs.

  -b  (--binary)  <file>
      Use the given binary as the update-binary in the output package,
      instead of the binary in the build's target_files.  Use for
      development only.

  -t  (--worker_threads) <int>
      Specifies the number of worker-threads that will be used when
      generating patches for incremental updates (defaults to 3).

  --stash_threshold <float>
      Specifies the threshold that will be used to compute the maximum
      allowed stash size (defaults to 0.8).

  --gen_verify
      Generate an OTA package that verifies the partitions.

  --log_diff <file>
      Generate a log file that shows the differences in the source and target
      builds for an incremental package. This option is only meaningful when
      -i is specified.

  --payload_signer <signer>
      Specify the signer when signing the payload and metadata for A/B OTAs.
      By default (i.e. without this flag), it calls 'openssl pkeyutl' to sign
      with the package private key. If the private key cannot be accessed
      directly, a payload signer that knows how to do that should be specified.
      The signer will be supplied with \"-inkey <path_to_key>\",
      \"-in <input_file>\" and \"-out <output_file>\" parameters.

  --payload_signer_args <args>
      Specify the arguments needed for payload signer.
\"\"\"" code nil nil [626 5107])
            ("sys" include nil nil [5109 5119])
            ("if" code nil nil [5121 5225])
            ("multiprocessing" include nil nil [5226 5248])
            ("os" include nil nil [5249 5258])
            ("subprocess" include nil nil [5259 5276])
            ("shlex" include nil nil [5277 5289])
            ("tempfile" include nil nil [5290 5305])
            ("zipfile" include nil nil [5306 5320])
            ("common" include nil nil [5322 5335])
            ("edify_generator" include nil nil [5336 5358])
            ("sparse_img" include nil nil [5359 5376])
            ("OPTIONS" variable nil nil [5378 5402])
            ("OPTIONS" variable nil nil [5403 5429])
            ("OPTIONS" variable nil nil [5430 5463])
            ("OPTIONS" variable nil nil [5464 5486])
            ("OPTIONS" variable nil nil [5487 5519])
            ("OPTIONS" variable nil nil [5520 5575])
            ("OPTIONS" variable nil nil [5576 5606])
            ("OPTIONS" variable nil nil [5607 5637])
            ("OPTIONS" variable nil nil [5638 5665])
            ("OPTIONS" variable nil nil [5666 5691])
            ("OPTIONS" variable nil nil [5692 5719])
            ("OPTIONS" variable nil nil [5720 5744])
            ("OPTIONS" code nil nil [5745 5802])
            ("if" code nil nil [5803 5864])
            ("OPTIONS" variable nil nil [5864 5888])
            ("OPTIONS" variable nil nil [5889 5915])
            ("OPTIONS" variable nil nil [5916 5943])
            ("OPTIONS" variable nil nil [5944 5973])
            ("OPTIONS" variable nil nil [5974 5999])
            ("OPTIONS" variable nil nil [6000 6028])
            ("OPTIONS" variable nil nil [6029 6060])
            ("OPTIONS" variable nil nil [6061 6087])
            ("OPTIONS" variable nil nil [6088 6119])
            ("OPTIONS" variable nil nil [6171 6196])
            ("OPTIONS" variable nil nil [6197 6226])
            ("OPTIONS" variable nil nil [6227 6253])
            ("OPTIONS" variable nil nil [6254 6277])
            ("OPTIONS" variable nil nil [6278 6307])
            ("OPTIONS" variable nil nil [6308 6340])
            ("MostPopularKey" function
               (:documentation "Given a dict, return the key corresponding to the largest
  value.  Returns 'default' if the dict is empty."
                :arguments 
                  ( ("d" variable nil (reparse-symbol function_parameters) [6361 6362])
                    ("default" variable nil (reparse-symbol function_parameters) [6364 6371]))                  )
                nil [6342 6593])
            ("IsSymlink" function
               (:documentation "Return true if the zipfile.ZipInfo object passed in represents a
  symlink."
                :arguments 
                  ( ("info" variable nil (reparse-symbol function_parameters) [6609 6613]))                  )
                nil [6595 6759])
            ("IsRegular" function
               (:documentation "Return true if the zipfile.ZipInfo object passed in represents a
  regular file."
                :arguments 
                  ( ("info" variable nil (reparse-symbol function_parameters) [6774 6778]))                  )
                nil [6760 6929])
            ("ClosestFileMatch" function
               (:documentation "Returns the closest file match between a source file and list
     of potential matches.  The exact filename match is preferred,
     then the sha1 is searched for, and finally a file with the same
     basename is evaluated.  Rename support in the updater-binary is
     required for the latter checks to be used."
                :arguments 
                  ( ("src" variable nil (reparse-symbol function_parameters) [6951 6954])
                    ("tgtfiles" variable nil (reparse-symbol function_parameters) [6956 6964])
                    ("existing" variable nil (reparse-symbol function_parameters) [6966 6974]))                  )
                nil [6930 7795])
            ("ItemSet" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [7867 7893])
                            ("self" variable nil (reparse-symbol indented_block_body) [7898 7924])
                            ("self" variable nil (reparse-symbol indented_block_body) [7929 7944]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7834 7838])
                            ("partition" variable nil (reparse-symbol function_parameters) [7840 7849])
                            ("fs_config" variable nil (reparse-symbol function_parameters) [7851 7860]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [7821 7945])
                    ("Get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7956 7960])
                            ("name" variable nil (reparse-symbol function_parameters) [7962 7966])
                            ("is_dir" variable nil (reparse-symbol function_parameters) [7968 7974]))                          )
                        (reparse-symbol indented_block_body) [7948 8099])
                    ("GetMetadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8118 8122])
                            ("input_zip" variable nil (reparse-symbol function_parameters) [8124 8133]))                          )
                        (reparse-symbol indented_block_body) [8102 9517]))                  
                :type "class")
                nil [7796 9517])
            ("Item" type
               (:documentation "Items represent the metadata (user, group, mode) of files and
  directories in the system image."
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9699 9721])
                            ("self" variable nil (reparse-symbol indented_block_body) [9726 9742])
                            ("self" variable nil (reparse-symbol indented_block_body) [9747 9762])
                            ("self" variable nil (reparse-symbol indented_block_body) [9767 9782])
                            ("self" variable nil (reparse-symbol indented_block_body) [9787 9803])
                            ("self" variable nil (reparse-symbol indented_block_body) [9808 9827])
                            ("self" variable nil (reparse-symbol indented_block_body) [9832 9856])
                            ("self" variable nil (reparse-symbol indented_block_body) [9861 9881])
                            ("self" variable nil (reparse-symbol indented_block_body) [9886 9909])
                            ("self" variable nil (reparse-symbol indented_block_body) [9914 9938])
                            ("if" code nil (reparse-symbol indented_block_body) [9944 10096])
                            ("if" code nil (reparse-symbol indented_block_body) [10100 10141]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9659 9663])
                            ("itemset" variable nil (reparse-symbol function_parameters) [9665 9672])
                            ("name" variable nil (reparse-symbol function_parameters) [9674 9678])
                            ("is_dir" variable nil (reparse-symbol function_parameters) [9680 9686]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9646 10141])
                    ("Dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10153 10157])
                            ("indent" variable nil (reparse-symbol function_parameters) [10159 10165]))                          )
                        (reparse-symbol indented_block_body) [10144 10596])
                    ("CountChildMetadata" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10622 10626]))                          
                        :documentation "Count up the (uid, gid, mode, selabel, capabilities) tuples for
    all children and determine the best strategy for using set_perm_recursive
    and set_perm to correctly chown/chmod all the files to their desired
    values.  Recursively calls itself for all descendants.

    Returns a dict of {(uid, gid, dmode, fmode, selabel, capabilities): count}
    counting up all descendants of this node.  (dmode or fmode may be None.)
    Also sets the best_subtree of each directory Item to the (uid, gid, dmode,
    fmode, selabel, capabilities) tuple that will match the most descendants of
    that Item.
    ")
                        (reparse-symbol indented_block_body) [10599 12844])
                    ("SetPermissions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12866 12870])
                            ("script" variable nil (reparse-symbol function_parameters) [12872 12878]))                          
                        :documentation "Append set_perm/set_perm_recursive commands to 'script' to
    set all permissions, users, and groups for the tree of files
    rooted at 'self'.")
                        (reparse-symbol indented_block_body) [12847 14331]))                  
                :type "class")
                nil [9519 14331])
            ("CopyPartitionFiles" function
               (:documentation "Copies files for the partition in the input zip to the output
  zip.  Populates the Item class with their metadata, and returns a
  list of symlinks.  output_zip may be None, in which case the copy is
  skipped (but the other side effects still happen).  substitute is an
  optional dict of {output filename: contents} to be output instead of
  certain input files.
  "
                :arguments 
                  ( ("itemset" variable nil (reparse-symbol function_parameters) [14356 14363])
                    ("input_zip" variable nil (reparse-symbol function_parameters) [14365 14374])
                    ("output_zip" variable nil (reparse-symbol function_parameters) [14376 14386])
                    ("substitute" variable nil (reparse-symbol function_parameters) [14393 14403]))                  )
                nil [14333 15747])
            ("SignOutput" function (:arguments 
              ( ("temp_zip_name" variable nil (reparse-symbol function_parameters) [15764 15777])
                ("output_zip_name" variable nil (reparse-symbol function_parameters) [15779 15794]))              ) nil [15749 16014])
            ("AppendAssertions" function (:arguments 
              ( ("script" variable nil (reparse-symbol function_parameters) [16037 16043])
                ("info_dict" variable nil (reparse-symbol function_parameters) [16045 16054])
                ("oem_dict" variable nil (reparse-symbol function_parameters) [16056 16064]))              ) nil [16016 16625])
            ("HasRecoveryPatch" function (:arguments 
              ( ("target_files_zip" variable nil (reparse-symbol function_parameters) [16648 16664]))              ) nil [16627 16831])
            ("HasVendorPartition" function (:arguments 
              ( ("target_files_zip" variable nil (reparse-symbol function_parameters) [16855 16871]))              ) nil [16832 16973])
            ("GetOemProperty" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16993 16997])
                ("oem_props" variable nil (reparse-symbol function_parameters) [16999 17008])
                ("oem_dict" variable nil (reparse-symbol function_parameters) [17010 17018])
                ("info_dict" variable nil (reparse-symbol function_parameters) [17020 17029]))              ) nil [16974 17147])
            ("CalculateFingerprint" function (:arguments 
              ( ("oem_props" variable nil (reparse-symbol function_parameters) [17174 17183])
                ("oem_dict" variable nil (reparse-symbol function_parameters) [17185 17193])
                ("info_dict" variable nil (reparse-symbol function_parameters) [17195 17204]))              ) nil [17149 17593])
            ("GetImage" function (:arguments 
              ( ("which" variable nil (reparse-symbol function_parameters) [17608 17613])
                ("tmpdir" variable nil (reparse-symbol function_parameters) [17615 17621])
                ("info_dict" variable nil (reparse-symbol function_parameters) [17623 17632]))              ) nil [17595 19101])
            ("WriteFullOTAPackage" function (:arguments 
              ( ("input_zip" variable nil (reparse-symbol function_parameters) [19127 19136])
                ("output_zip" variable nil (reparse-symbol function_parameters) [19138 19148]))              ) nil [19103 26408])
            ("WritePolicyConfig" function (:arguments 
              ( ("file_name" variable nil (reparse-symbol function_parameters) [26432 26441])
                ("output_zip" variable nil (reparse-symbol function_parameters) [26443 26453]))              ) nil [26410 26526])
            ("WriteMetadata" function (:arguments 
              ( ("metadata" variable nil (reparse-symbol function_parameters) [26546 26554])
                ("output_zip" variable nil (reparse-symbol function_parameters) [26556 26566]))              ) nil [26528 26752])
            ("LoadPartitionFiles" function
               (:documentation "Load all the files from the given partition in a given target-files
  ZipFile, and return a dict of {filename: File object}."
                :arguments 
                  ( ("z" variable nil (reparse-symbol function_parameters) [26777 26778])
                    ("partition" variable nil (reparse-symbol function_parameters) [26780 26789]))                  )
                nil [26754 27241])
            ("GetBuildProp" function
               (:documentation "Return the fingerprint of the build of a given target-files info_dict."
                :arguments 
                  ( ("prop" variable nil (reparse-symbol function_parameters) [27260 27264])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [27266 27275]))                  )
                nil [27243 27507])
            ("AddToKnownPaths" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [27529 27537])
                ("known_paths" variable nil (reparse-symbol function_parameters) [27539 27550]))              ) nil [27509 27754])
            ("WriteBlockIncrementalOTAPackage" function (:arguments 
              ( ("target_zip" variable nil (reparse-symbol function_parameters) [27792 27802])
                ("source_zip" variable nil (reparse-symbol function_parameters) [27804 27814])
                ("output_zip" variable nil (reparse-symbol function_parameters) [27816 27826]))              ) nil [27756 40426])
            ("WriteVerifyPackage" function (:arguments 
              ( ("input_zip" variable nil (reparse-symbol function_parameters) [40451 40460])
                ("output_zip" variable nil (reparse-symbol function_parameters) [40462 40472]))              ) nil [40428 43293])
            ("WriteABOTAPackageWithBrilloScript" function
               (:documentation "Generate an Android OTA package that has A/B update payload."
                :arguments 
                  ( ("target_file" variable nil (reparse-symbol function_parameters) [43333 43344])
                    ("output_file" variable nil (reparse-symbol function_parameters) [43346 43357])
                    ("source_file" variable nil (reparse-symbol function_parameters) [43397 43408]))                  )
                nil [43295 50126])
            ("FileDifference" type
               (:superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [50231 50262])
                            ("print" code nil (reparse-symbol indented_block_body) [50267 50292])
                            ("self" variable nil (reparse-symbol indented_block_body) [50297 50371])
                            ("print" code nil (reparse-symbol indented_block_body) [50376 50401])
                            ("self" variable nil (reparse-symbol indented_block_body) [50406 50480])
                            ("self" variable nil (reparse-symbol indented_block_body) [50486 50531])
                            ("self" variable nil (reparse-symbol indented_block_body) [50536 50569])
                            ("diffs" variable nil (reparse-symbol indented_block_body) [50574 50584])
                            ("self" variable nil (reparse-symbol indented_block_body) [50589 50616])
                            ("known_paths" variable nil (reparse-symbol indented_block_body) [50621 50640])
                            ("largest_source_size" variable nil (reparse-symbol indented_block_body) [50645 50668])
                            ("matching_file_cache" variable nil (reparse-symbol indented_block_body) [50674 50698])
                            ("for" code nil (reparse-symbol indented_block_body) [50703 51144])
                            ("for" code nil (reparse-symbol indented_block_body) [51149 52108])
                            ("common" code nil (reparse-symbol indented_block_body) [52113 52145])
                            ("for" code nil (reparse-symbol indented_block_body) [52151 52942])
                            ("self" variable nil (reparse-symbol indented_block_body) [52947 52993]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [50173 50177])
                            ("partition" variable nil (reparse-symbol function_parameters) [50179 50188])
                            ("source_zip" variable nil (reparse-symbol function_parameters) [50190 50200])
                            ("target_zip" variable nil (reparse-symbol function_parameters) [50202 50212])
                            ("output_zip" variable nil (reparse-symbol function_parameters) [50214 50224]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [50160 52994])
                    ("EmitVerification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53018 53022])
                            ("script" variable nil (reparse-symbol function_parameters) [53024 53030]))                          )
                        (reparse-symbol indented_block_body) [52997 53277])
                    ("EmitExplicitTargetVerification" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53315 53319])
                            ("script" variable nil (reparse-symbol function_parameters) [53321 53327]))                          )
                        (reparse-symbol indented_block_body) [53280 53520])
                    ("RemoveUnneededFiles" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [53547 53551])
                            ("script" variable nil (reparse-symbol function_parameters) [53553 53559])
                            ("extras" variable nil (reparse-symbol function_parameters) [53561 53567]))                          )
                        (reparse-symbol indented_block_body) [53523 53982])
                    ("TotalPatchSize" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54004 54008]))                          )
                        (reparse-symbol indented_block_body) [53985 54062])
                    ("EmitPatches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54081 54085])
                            ("script" variable nil (reparse-symbol function_parameters) [54087 54093])
                            ("total_patch_size" variable nil (reparse-symbol function_parameters) [54095 54111])
                            ("so_far" variable nil (reparse-symbol function_parameters) [54113 54119]))                          )
                        (reparse-symbol indented_block_body) [54065 54643])
                    ("EmitDeferredPatches" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54670 54674])
                            ("script" variable nil (reparse-symbol function_parameters) [54676 54682]))                          )
                        (reparse-symbol indented_block_body) [54646 54946])
                    ("EmitRenames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [54965 54969])
                            ("script" variable nil (reparse-symbol function_parameters) [54971 54977]))                          )
                        (reparse-symbol indented_block_body) [54949 55191]))                  
                :type "class")
                nil [50128 55191])
            ("WriteIncrementalOTAPackage" function (:arguments 
              ( ("target_zip" variable nil (reparse-symbol function_parameters) [55224 55234])
                ("source_zip" variable nil (reparse-symbol function_parameters) [55236 55246])
                ("output_zip" variable nil (reparse-symbol function_parameters) [55248 55258]))              ) nil [55193 71251])
            ("main" function (:arguments 
              ( ("argv" variable nil (reparse-symbol function_parameters) [71262 71266]))              ) nil [71253 80482])
            ("if" code nil nil [80484 80710]))          
      :file "ota_from_target_files.py"
      :pointmax 80710
      :fsize 80709
      :lastmodtime '(22847 45134 299060 6000)
      :unmatched-syntax '((INDENT_BLOCK 80689 . 80710) (NEWLINE 80688 . 80689) (COLON 80687 . 80688) (FINALLY 80680 . 80687) (INDENT_BLOCK 80610 . 80678) (NEWLINE 80609 . 80610) (COLON 80608 . 80609) (TRY 80513 . 80516) (AS 80604 . 80606) (NAME 20687 . 20695) (IF 20718 . 20720) (ELSE 20733 . 20737)))
    (semanticdb-table "semanticdb-table"
      :file "edify_generator.py"
      :fsize 16389
      :lastmodtime '(22847 45134 299060 6000))
    (semanticdb-table "semanticdb-table"
      :file "sparse_img.py"
      :fsize 10256
      :lastmodtime '(22847 45134 299060 6000))
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"
Given a target-files zipfile that does not contain images (ie, does
not have an IMAGES/ top-level subdirectory), produce the images and
add them to the zipfile.

Usage:  add_img_to_target_files target_files
\"\"\"" code nil nil [626 840])
            ("sys" include nil nil [842 852])
            ("if" code nil nil [854 958])
            ("datetime" include nil nil [959 974])
            ("errno" include nil nil [975 987])
            ("os" include nil nil [988 997])
            ("shutil" include nil nil [998 1011])
            ("tempfile" include nil nil [1012 1027])
            ("zipfile" include nil nil [1028 1042])
            ("build_image" include nil nil [1044 1062])
            ("common" include nil nil [1063 1076])
            ("sparse_img" include nil nil [1077 1094])
            ("OPTIONS" variable nil nil [1096 1120])
            ("OPTIONS" variable nil nil [1122 1149])
            ("OPTIONS" variable nil nil [1150 1182])
            ("OPTIONS" variable nil nil [1183 1224])
            ("OPTIONS" variable nil nil [1225 1267])
            ("OPTIONS" variable nil nil [1268 1301])
            ("GetCareMap" function
               (:documentation "Generate care_map of system (or vendor) partition"
                :arguments 
                  ( ("which" variable nil (reparse-symbol function_parameters) [1318 1323])
                    ("imgname" variable nil (reparse-symbol function_parameters) [1325 1332]))                  )
                nil [1303 1682])
            ("AddSystem" function
               (:documentation "Turn the contents of SYSTEM into a system image and store it in
  output_zip."
                :arguments 
                  ( ("output_zip" variable nil (reparse-symbol function_parameters) [1698 1708])
                    ("prefix" variable nil (reparse-symbol function_parameters) [1710 1716])
                    ("recovery_img" variable nil (reparse-symbol function_parameters) [1728 1740])
                    ("boot_img" variable nil (reparse-symbol function_parameters) [1747 1755]))                  )
                nil [1684 2748])
            ("BuildSystem" function
               (:documentation "Build the (sparse) system image and return the name of a temp
  file containing it."
                :arguments 
                  ( ("input_dir" variable nil (reparse-symbol function_parameters) [2766 2775])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [2777 2786])
                    ("block_list" variable nil (reparse-symbol function_parameters) [2788 2798]))                  )
                nil [2750 2974])
            ("AddSystemOther" function
               (:documentation "Turn the contents of SYSTEM_OTHER into a system_other image
  and store it in output_zip."
                :arguments 
                  ( ("output_zip" variable nil (reparse-symbol function_parameters) [2995 3005])
                    ("prefix" variable nil (reparse-symbol function_parameters) [3007 3013]))                  )
                nil [2976 3471])
            ("BuildSystemOther" function
               (:documentation "Build the (sparse) system_other image and return the name of a temp
  file containing it."
                :arguments 
                  ( ("input_dir" variable nil (reparse-symbol function_parameters) [3493 3502])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [3504 3513]))                  )
                nil [3472 3690])
            ("AddVendor" function
               (:documentation "Turn the contents of VENDOR into a vendor image and store in it
  output_zip."
                :arguments 
                  ( ("output_zip" variable nil (reparse-symbol function_parameters) [3706 3716])
                    ("prefix" variable nil (reparse-symbol function_parameters) [3718 3724]))                  )
                nil [3692 4368])
            ("BuildVendor" function
               (:documentation "Build the (sparse) vendor image and return the name of a temp
  file containing it."
                :arguments 
                  ( ("input_dir" variable nil (reparse-symbol function_parameters) [4386 4395])
                    ("info_dict" variable nil (reparse-symbol function_parameters) [4397 4406])
                    ("block_list" variable nil (reparse-symbol function_parameters) [4408 4418]))                  )
                nil [4370 4594])
            ("CreateImage" function (:arguments 
              ( ("input_dir" variable nil (reparse-symbol function_parameters) [4612 4621])
                ("info_dict" variable nil (reparse-symbol function_parameters) [4623 4632])
                ("what" variable nil (reparse-symbol function_parameters) [4634 4638])
                ("block_list" variable nil (reparse-symbol function_parameters) [4640 4650]))              ) nil [4596 6352])
            ("AddUserdata" function
               (:documentation "Create a userdata image and store it in output_zip.

  In most case we just create and store an empty userdata.img;
  But the invoker can also request to create userdata.img with real
  data from the target files, by setting \"userdata_img_with_data=true\"
  in OPTIONS.info_dict.
  "
                :arguments 
                  ( ("output_zip" variable nil (reparse-symbol function_parameters) [6370 6380])
                    ("prefix" variable nil (reparse-symbol function_parameters) [6382 6388]))                  )
                nil [6354 8488])
            ("AddCache" function
               (:documentation "Create an empty cache image and store it in output_zip."
                :arguments 
                  ( ("output_zip" variable nil (reparse-symbol function_parameters) [8503 8513])
                    ("prefix" variable nil (reparse-symbol function_parameters) [8515 8521]))                  )
                nil [8490 9993])
            ("AddImagesToTargetFiles" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [10022 10030]))              ) nil [9995 13979])
            ("main" function (:arguments 
              ( ("argv" variable nil (reparse-symbol function_parameters) [13989 13993]))              ) nil [13980 14933])
            ("if" code nil nil [14934 15160]))          
      :file "add_img_to_target_files.py"
      :pointmax 15160
      :fsize 15159
      :lastmodtime '(22847 65504 459442 427000)
      :unmatched-syntax '((INDENT_BLOCK 15139 . 15160) (NEWLINE 15138 . 15139) (COLON 15137 . 15138) (FINALLY 15130 . 15137) (INDENT_BLOCK 15060 . 15128) (NEWLINE 15059 . 15060) (COLON 15058 . 15059) (TRY 14963 . 14966) (AS 15054 . 15056) (INDENT_BLOCK 5256 . 5299) (NEWLINE 5063 . 5064) (COLON 5062 . 5063) (TRY 4936 . 4939) (AS 5058 . 5060)))
    (semanticdb-table "semanticdb-table"
      :file "build_image.py"
      :fsize 23492
      :lastmodtime '(22847 45134 299060 6000)))
  :file "!home!chenqi!work!aia_internal!build!tools!releasetools!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
